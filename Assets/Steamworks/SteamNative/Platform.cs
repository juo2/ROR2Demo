using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using Facepunch.Steamworks;

namespace SteamNative
{
	// Token: 0x02000057 RID: 87
	internal static class Platform
	{
		// Token: 0x06000010 RID: 16 RVA: 0x00002350 File Offset: 0x00000550
		public static OperatingSystem RunningPlatform()
		{
			PlatformID platform = Environment.OSVersion.Platform;
			if (platform != PlatformID.Unix)
			{
				if (platform != PlatformID.MacOSX)
				{
					return OperatingSystem.Windows;
				}
				return OperatingSystem.macOS;
			}
			else
			{
				if (Directory.Exists("/Applications") && Directory.Exists("/System") && Directory.Exists("/Users") && Directory.Exists("/Volumes"))
				{
					return OperatingSystem.macOS;
				}
				return OperatingSystem.Linux;
			}
		}

		// Token: 0x17000003 RID: 3
		// (get) Token: 0x06000011 RID: 17 RVA: 0x000023A9 File Offset: 0x000005A9
		// (set) Token: 0x06000012 RID: 18 RVA: 0x000023BD File Offset: 0x000005BD
		internal static OperatingSystem Os
		{
			get
			{
				if (Platform._os == OperatingSystem.Unset)
				{
					Platform._os = OperatingSystem.Windows;
				}
				return Platform._os;
			}
			set
			{
				Platform._os = value;
			}
		}

		// Token: 0x17000004 RID: 4
		// (get) Token: 0x06000013 RID: 19 RVA: 0x000023C5 File Offset: 0x000005C5
		// (set) Token: 0x06000014 RID: 20 RVA: 0x000023FE File Offset: 0x000005FE
		internal static Architecture Arch
		{
			get
			{
				if (Platform._arch == Architecture.Unset)
				{
					if (IntPtr.Size == 8)
					{
						Platform._arch = Architecture.x64;
					}
					else
					{
						if (IntPtr.Size != 4)
						{
							throw new Exception("Unsupported Architecture!");
						}
						Platform._arch = Architecture.x86;
					}
				}
				return Platform._arch;
			}
			set
			{
				Platform._arch = value;
			}
		}

		// Token: 0x17000005 RID: 5
		// (get) Token: 0x06000015 RID: 21 RVA: 0x00002406 File Offset: 0x00000606
		public static bool IsWindows
		{
			get
			{
				return Platform.Os == OperatingSystem.Windows;
			}
		}

		// Token: 0x17000006 RID: 6
		// (get) Token: 0x06000016 RID: 22 RVA: 0x00002410 File Offset: 0x00000610
		public static bool IsWindows64
		{
			get
			{
				return Platform.Arch == Architecture.x64 && Platform.IsWindows;
			}
		}

		// Token: 0x17000007 RID: 7
		// (get) Token: 0x06000017 RID: 23 RVA: 0x00002421 File Offset: 0x00000621
		public static bool IsWindows32
		{
			get
			{
				return Platform.Arch == Architecture.x86 && Platform.IsWindows;
			}
		}

		// Token: 0x17000008 RID: 8
		// (get) Token: 0x06000018 RID: 24 RVA: 0x00002432 File Offset: 0x00000632
		public static bool IsLinux64
		{
			get
			{
				return Platform.Arch == Architecture.x64 && Platform.Os == OperatingSystem.Linux;
			}
		}

		// Token: 0x17000009 RID: 9
		// (get) Token: 0x06000019 RID: 25 RVA: 0x00002446 File Offset: 0x00000646
		public static bool IsLinux32
		{
			get
			{
				return Platform.Arch == Architecture.x86 && Platform.Os == OperatingSystem.Linux;
			}
		}

		// Token: 0x1700000A RID: 10
		// (get) Token: 0x0600001A RID: 26 RVA: 0x0000245A File Offset: 0x0000065A
		public static bool IsOsx
		{
			get
			{
				return Platform.Os == OperatingSystem.macOS;
			}
		}

		// Token: 0x1700000B RID: 11
		// (get) Token: 0x0600001B RID: 27 RVA: 0x00002464 File Offset: 0x00000664
		public static bool PackSmall
		{
			get
			{
				return Platform.Os != OperatingSystem.Windows;
			}
		}

		// Token: 0x0400045F RID: 1119
		private static OperatingSystem _os;

		// Token: 0x04000460 RID: 1120
		private static Architecture _arch;

		// Token: 0x0200018D RID: 397
		internal interface Interface : IDisposable
		{
			// Token: 0x170000B2 RID: 178
			// (get) Token: 0x06000C48 RID: 3144
			bool IsValid { get; }

			// Token: 0x06000C49 RID: 3145
			uint ISteamAppList_GetNumInstalledApps();

			// Token: 0x06000C4A RID: 3146
			uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs);

			// Token: 0x06000C4B RID: 3147
			int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax);

			// Token: 0x06000C4C RID: 3148
			int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax);

			// Token: 0x06000C4D RID: 3149
			int ISteamAppList_GetAppBuildId(uint nAppID);

			// Token: 0x06000C4E RID: 3150
			bool ISteamApps_BIsSubscribed();

			// Token: 0x06000C4F RID: 3151
			bool ISteamApps_BIsLowViolence();

			// Token: 0x06000C50 RID: 3152
			bool ISteamApps_BIsCybercafe();

			// Token: 0x06000C51 RID: 3153
			bool ISteamApps_BIsVACBanned();

			// Token: 0x06000C52 RID: 3154
			IntPtr ISteamApps_GetCurrentGameLanguage();

			// Token: 0x06000C53 RID: 3155
			IntPtr ISteamApps_GetAvailableGameLanguages();

			// Token: 0x06000C54 RID: 3156
			bool ISteamApps_BIsSubscribedApp(uint appID);

			// Token: 0x06000C55 RID: 3157
			bool ISteamApps_BIsDlcInstalled(uint appID);

			// Token: 0x06000C56 RID: 3158
			uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID);

			// Token: 0x06000C57 RID: 3159
			bool ISteamApps_BIsSubscribedFromFreeWeekend();

			// Token: 0x06000C58 RID: 3160
			int ISteamApps_GetDLCCount();

			// Token: 0x06000C59 RID: 3161
			bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

			// Token: 0x06000C5A RID: 3162
			void ISteamApps_InstallDLC(uint nAppID);

			// Token: 0x06000C5B RID: 3163
			void ISteamApps_UninstallDLC(uint nAppID);

			// Token: 0x06000C5C RID: 3164
			void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID);

			// Token: 0x06000C5D RID: 3165
			bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize);

			// Token: 0x06000C5E RID: 3166
			bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

			// Token: 0x06000C5F RID: 3167
			uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots);

			// Token: 0x06000C60 RID: 3168
			uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

			// Token: 0x06000C61 RID: 3169
			bool ISteamApps_BIsAppInstalled(uint appID);

			// Token: 0x06000C62 RID: 3170
			CSteamID ISteamApps_GetAppOwner();

			// Token: 0x06000C63 RID: 3171
			IntPtr ISteamApps_GetLaunchQueryParam(string pchKey);

			// Token: 0x06000C64 RID: 3172
			bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

			// Token: 0x06000C65 RID: 3173
			int ISteamApps_GetAppBuildId();

			// Token: 0x06000C66 RID: 3174
			void ISteamApps_RequestAllProofOfPurchaseKeys();

			// Token: 0x06000C67 RID: 3175
			SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName);

			// Token: 0x06000C68 RID: 3176
			HSteamPipe ISteamClient_CreateSteamPipe();

			// Token: 0x06000C69 RID: 3177
			bool ISteamClient_BReleaseSteamPipe(int hSteamPipe);

			// Token: 0x06000C6A RID: 3178
			HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe);

			// Token: 0x06000C6B RID: 3179
			HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType);

			// Token: 0x06000C6C RID: 3180
			void ISteamClient_ReleaseUser(int hSteamPipe, int hUser);

			// Token: 0x06000C6D RID: 3181
			IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C6E RID: 3182
			IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C6F RID: 3183
			void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

			// Token: 0x06000C70 RID: 3184
			IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C71 RID: 3185
			IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion);

			// Token: 0x06000C72 RID: 3186
			IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C73 RID: 3187
			IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C74 RID: 3188
			IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C75 RID: 3189
			IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C76 RID: 3190
			IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C77 RID: 3191
			IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C78 RID: 3192
			IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C79 RID: 3193
			IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C7A RID: 3194
			IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C7B RID: 3195
			uint ISteamClient_GetIPCCallCount();

			// Token: 0x06000C7C RID: 3196
			void ISteamClient_SetWarningMessageHook(IntPtr pFunction);

			// Token: 0x06000C7D RID: 3197
			bool ISteamClient_BShutdownIfAllPipesClosed();

			// Token: 0x06000C7E RID: 3198
			IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C7F RID: 3199
			IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C80 RID: 3200
			IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C81 RID: 3201
			IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C82 RID: 3202
			IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C83 RID: 3203
			IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C84 RID: 3204
			IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C85 RID: 3205
			IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C86 RID: 3206
			IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C87 RID: 3207
			IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion);

			// Token: 0x06000C88 RID: 3208
			bool ISteamController_Init();

			// Token: 0x06000C89 RID: 3209
			bool ISteamController_Shutdown();

			// Token: 0x06000C8A RID: 3210
			void ISteamController_RunFrame();

			// Token: 0x06000C8B RID: 3211
			int ISteamController_GetConnectedControllers(IntPtr handlesOut);

			// Token: 0x06000C8C RID: 3212
			bool ISteamController_ShowBindingPanel(ulong controllerHandle);

			// Token: 0x06000C8D RID: 3213
			ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName);

			// Token: 0x06000C8E RID: 3214
			void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle);

			// Token: 0x06000C8F RID: 3215
			ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle);

			// Token: 0x06000C90 RID: 3216
			void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle);

			// Token: 0x06000C91 RID: 3217
			void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle);

			// Token: 0x06000C92 RID: 3218
			void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle);

			// Token: 0x06000C93 RID: 3219
			int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut);

			// Token: 0x06000C94 RID: 3220
			ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName);

			// Token: 0x06000C95 RID: 3221
			ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle);

			// Token: 0x06000C96 RID: 3222
			int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

			// Token: 0x06000C97 RID: 3223
			ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName);

			// Token: 0x06000C98 RID: 3224
			ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle);

			// Token: 0x06000C99 RID: 3225
			int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

			// Token: 0x06000C9A RID: 3226
			void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction);

			// Token: 0x06000C9B RID: 3227
			void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

			// Token: 0x06000C9C RID: 3228
			void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

			// Token: 0x06000C9D RID: 3229
			void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

			// Token: 0x06000C9E RID: 3230
			void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

			// Token: 0x06000C9F RID: 3231
			int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle);

			// Token: 0x06000CA0 RID: 3232
			ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex);

			// Token: 0x06000CA1 RID: 3233
			ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle);

			// Token: 0x06000CA2 RID: 3234
			bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

			// Token: 0x06000CA3 RID: 3235
			bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

			// Token: 0x06000CA4 RID: 3236
			IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin);

			// Token: 0x06000CA5 RID: 3237
			IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin);

			// Token: 0x06000CA6 RID: 3238
			SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle);

			// Token: 0x06000CA7 RID: 3239
			IntPtr ISteamFriends_GetPersonaName();

			// Token: 0x06000CA8 RID: 3240
			SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName);

			// Token: 0x06000CA9 RID: 3241
			PersonaState ISteamFriends_GetPersonaState();

			// Token: 0x06000CAA RID: 3242
			int ISteamFriends_GetFriendCount(int iFriendFlags);

			// Token: 0x06000CAB RID: 3243
			CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);

			// Token: 0x06000CAC RID: 3244
			FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend);

			// Token: 0x06000CAD RID: 3245
			PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend);

			// Token: 0x06000CAE RID: 3246
			IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend);

			// Token: 0x06000CAF RID: 3247
			bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

			// Token: 0x06000CB0 RID: 3248
			IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName);

			// Token: 0x06000CB1 RID: 3249
			int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend);

			// Token: 0x06000CB2 RID: 3250
			IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer);

			// Token: 0x06000CB3 RID: 3251
			int ISteamFriends_GetFriendsGroupCount();

			// Token: 0x06000CB4 RID: 3252
			FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

			// Token: 0x06000CB5 RID: 3253
			IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID);

			// Token: 0x06000CB6 RID: 3254
			int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID);

			// Token: 0x06000CB7 RID: 3255
			void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

			// Token: 0x06000CB8 RID: 3256
			bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags);

			// Token: 0x06000CB9 RID: 3257
			int ISteamFriends_GetClanCount();

			// Token: 0x06000CBA RID: 3258
			CSteamID ISteamFriends_GetClanByIndex(int iClan);

			// Token: 0x06000CBB RID: 3259
			IntPtr ISteamFriends_GetClanName(ulong steamIDClan);

			// Token: 0x06000CBC RID: 3260
			IntPtr ISteamFriends_GetClanTag(ulong steamIDClan);

			// Token: 0x06000CBD RID: 3261
			bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

			// Token: 0x06000CBE RID: 3262
			SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest);

			// Token: 0x06000CBF RID: 3263
			int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource);

			// Token: 0x06000CC0 RID: 3264
			CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend);

			// Token: 0x06000CC1 RID: 3265
			bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource);

			// Token: 0x06000CC2 RID: 3266
			void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

			// Token: 0x06000CC3 RID: 3267
			void ISteamFriends_ActivateGameOverlay(string pchDialog);

			// Token: 0x06000CC4 RID: 3268
			void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID);

			// Token: 0x06000CC5 RID: 3269
			void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL);

			// Token: 0x06000CC6 RID: 3270
			void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag);

			// Token: 0x06000CC7 RID: 3271
			void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith);

			// Token: 0x06000CC8 RID: 3272
			void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby);

			// Token: 0x06000CC9 RID: 3273
			int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend);

			// Token: 0x06000CCA RID: 3274
			int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend);

			// Token: 0x06000CCB RID: 3275
			int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend);

			// Token: 0x06000CCC RID: 3276
			bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

			// Token: 0x06000CCD RID: 3277
			SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan);

			// Token: 0x06000CCE RID: 3278
			CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan);

			// Token: 0x06000CCF RID: 3279
			int ISteamFriends_GetClanOfficerCount(ulong steamIDClan);

			// Token: 0x06000CD0 RID: 3280
			CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer);

			// Token: 0x06000CD1 RID: 3281
			uint ISteamFriends_GetUserRestrictions();

			// Token: 0x06000CD2 RID: 3282
			bool ISteamFriends_SetRichPresence(string pchKey, string pchValue);

			// Token: 0x06000CD3 RID: 3283
			void ISteamFriends_ClearRichPresence();

			// Token: 0x06000CD4 RID: 3284
			IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey);

			// Token: 0x06000CD5 RID: 3285
			int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend);

			// Token: 0x06000CD6 RID: 3286
			IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey);

			// Token: 0x06000CD7 RID: 3287
			void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend);

			// Token: 0x06000CD8 RID: 3288
			bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString);

			// Token: 0x06000CD9 RID: 3289
			int ISteamFriends_GetCoplayFriendCount();

			// Token: 0x06000CDA RID: 3290
			CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend);

			// Token: 0x06000CDB RID: 3291
			int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend);

			// Token: 0x06000CDC RID: 3292
			AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend);

			// Token: 0x06000CDD RID: 3293
			SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan);

			// Token: 0x06000CDE RID: 3294
			bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan);

			// Token: 0x06000CDF RID: 3295
			int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan);

			// Token: 0x06000CE0 RID: 3296
			CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser);

			// Token: 0x06000CE1 RID: 3297
			bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText);

			// Token: 0x06000CE2 RID: 3298
			int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

			// Token: 0x06000CE3 RID: 3299
			bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser);

			// Token: 0x06000CE4 RID: 3300
			bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat);

			// Token: 0x06000CE5 RID: 3301
			bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat);

			// Token: 0x06000CE6 RID: 3302
			bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat);

			// Token: 0x06000CE7 RID: 3303
			bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

			// Token: 0x06000CE8 RID: 3304
			bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend);

			// Token: 0x06000CE9 RID: 3305
			int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

			// Token: 0x06000CEA RID: 3306
			SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID);

			// Token: 0x06000CEB RID: 3307
			SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID);

			// Token: 0x06000CEC RID: 3308
			SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex);

			// Token: 0x06000CED RID: 3309
			bool ISteamFriends_IsClanPublic(ulong steamIDClan);

			// Token: 0x06000CEE RID: 3310
			bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan);

			// Token: 0x06000CEF RID: 3311
			bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

			// Token: 0x06000CF0 RID: 3312
			void ISteamGameServer_SetProduct(string pszProduct);

			// Token: 0x06000CF1 RID: 3313
			void ISteamGameServer_SetGameDescription(string pszGameDescription);

			// Token: 0x06000CF2 RID: 3314
			void ISteamGameServer_SetModDir(string pszModDir);

			// Token: 0x06000CF3 RID: 3315
			void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated);

			// Token: 0x06000CF4 RID: 3316
			void ISteamGameServer_LogOn(string pszToken);

			// Token: 0x06000CF5 RID: 3317
			void ISteamGameServer_LogOnAnonymous();

			// Token: 0x06000CF6 RID: 3318
			void ISteamGameServer_LogOff();

			// Token: 0x06000CF7 RID: 3319
			bool ISteamGameServer_BLoggedOn();

			// Token: 0x06000CF8 RID: 3320
			bool ISteamGameServer_BSecure();

			// Token: 0x06000CF9 RID: 3321
			CSteamID ISteamGameServer_GetSteamID();

			// Token: 0x06000CFA RID: 3322
			bool ISteamGameServer_WasRestartRequested();

			// Token: 0x06000CFB RID: 3323
			void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

			// Token: 0x06000CFC RID: 3324
			void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

			// Token: 0x06000CFD RID: 3325
			void ISteamGameServer_SetServerName(string pszServerName);

			// Token: 0x06000CFE RID: 3326
			void ISteamGameServer_SetMapName(string pszMapName);

			// Token: 0x06000CFF RID: 3327
			void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

			// Token: 0x06000D00 RID: 3328
			void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

			// Token: 0x06000D01 RID: 3329
			void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName);

			// Token: 0x06000D02 RID: 3330
			void ISteamGameServer_ClearAllKeyValues();

			// Token: 0x06000D03 RID: 3331
			void ISteamGameServer_SetKeyValue(string pKey, string pValue);

			// Token: 0x06000D04 RID: 3332
			void ISteamGameServer_SetGameTags(string pchGameTags);

			// Token: 0x06000D05 RID: 3333
			void ISteamGameServer_SetGameData(string pchGameData);

			// Token: 0x06000D06 RID: 3334
			void ISteamGameServer_SetRegion(string pszRegion);

			// Token: 0x06000D07 RID: 3335
			bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

			// Token: 0x06000D08 RID: 3336
			CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection();

			// Token: 0x06000D09 RID: 3337
			void ISteamGameServer_SendUserDisconnect(ulong steamIDUser);

			// Token: 0x06000D0A RID: 3338
			bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore);

			// Token: 0x06000D0B RID: 3339
			HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

			// Token: 0x06000D0C RID: 3340
			BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

			// Token: 0x06000D0D RID: 3341
			void ISteamGameServer_EndAuthSession(ulong steamID);

			// Token: 0x06000D0E RID: 3342
			void ISteamGameServer_CancelAuthTicket(uint hAuthTicket);

			// Token: 0x06000D0F RID: 3343
			UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID);

			// Token: 0x06000D10 RID: 3344
			bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup);

			// Token: 0x06000D11 RID: 3345
			void ISteamGameServer_GetGameplayStats();

			// Token: 0x06000D12 RID: 3346
			SteamAPICall_t ISteamGameServer_GetServerReputation();

			// Token: 0x06000D13 RID: 3347
			uint ISteamGameServer_GetPublicIP();

			// Token: 0x06000D14 RID: 3348
			bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort);

			// Token: 0x06000D15 RID: 3349
			int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

			// Token: 0x06000D16 RID: 3350
			void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive);

			// Token: 0x06000D17 RID: 3351
			void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

			// Token: 0x06000D18 RID: 3352
			void ISteamGameServer_ForceHeartbeat();

			// Token: 0x06000D19 RID: 3353
			SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan);

			// Token: 0x06000D1A RID: 3354
			SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer);

			// Token: 0x06000D1B RID: 3355
			SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser);

			// Token: 0x06000D1C RID: 3356
			bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

			// Token: 0x06000D1D RID: 3357
			bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

			// Token: 0x06000D1E RID: 3358
			bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			// Token: 0x06000D1F RID: 3359
			bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData);

			// Token: 0x06000D20 RID: 3360
			bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData);

			// Token: 0x06000D21 RID: 3361
			bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

			// Token: 0x06000D22 RID: 3362
			bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName);

			// Token: 0x06000D23 RID: 3363
			bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName);

			// Token: 0x06000D24 RID: 3364
			SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser);

			// Token: 0x06000D25 RID: 3365
			void ISteamHTMLSurface_DestructISteamHTMLSurface();

			// Token: 0x06000D26 RID: 3366
			bool ISteamHTMLSurface_Init();

			// Token: 0x06000D27 RID: 3367
			bool ISteamHTMLSurface_Shutdown();

			// Token: 0x06000D28 RID: 3368
			SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS);

			// Token: 0x06000D29 RID: 3369
			void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle);

			// Token: 0x06000D2A RID: 3370
			void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData);

			// Token: 0x06000D2B RID: 3371
			void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight);

			// Token: 0x06000D2C RID: 3372
			void ISteamHTMLSurface_StopLoad(uint unBrowserHandle);

			// Token: 0x06000D2D RID: 3373
			void ISteamHTMLSurface_Reload(uint unBrowserHandle);

			// Token: 0x06000D2E RID: 3374
			void ISteamHTMLSurface_GoBack(uint unBrowserHandle);

			// Token: 0x06000D2F RID: 3375
			void ISteamHTMLSurface_GoForward(uint unBrowserHandle);

			// Token: 0x06000D30 RID: 3376
			void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue);

			// Token: 0x06000D31 RID: 3377
			void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript);

			// Token: 0x06000D32 RID: 3378
			void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton);

			// Token: 0x06000D33 RID: 3379
			void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton);

			// Token: 0x06000D34 RID: 3380
			void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton);

			// Token: 0x06000D35 RID: 3381
			void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y);

			// Token: 0x06000D36 RID: 3382
			void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta);

			// Token: 0x06000D37 RID: 3383
			void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

			// Token: 0x06000D38 RID: 3384
			void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

			// Token: 0x06000D39 RID: 3385
			void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

			// Token: 0x06000D3A RID: 3386
			void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

			// Token: 0x06000D3B RID: 3387
			void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

			// Token: 0x06000D3C RID: 3388
			void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

			// Token: 0x06000D3D RID: 3389
			void ISteamHTMLSurface_ViewSource(uint unBrowserHandle);

			// Token: 0x06000D3E RID: 3390
			void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle);

			// Token: 0x06000D3F RID: 3391
			void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle);

			// Token: 0x06000D40 RID: 3392
			void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

			// Token: 0x06000D41 RID: 3393
			void ISteamHTMLSurface_StopFind(uint unBrowserHandle);

			// Token: 0x06000D42 RID: 3394
			void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y);

			// Token: 0x06000D43 RID: 3395
			void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

			// Token: 0x06000D44 RID: 3396
			void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

			// Token: 0x06000D45 RID: 3397
			void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

			// Token: 0x06000D46 RID: 3398
			void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling);

			// Token: 0x06000D47 RID: 3399
			void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

			// Token: 0x06000D48 RID: 3400
			void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

			// Token: 0x06000D49 RID: 3401
			HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

			// Token: 0x06000D4A RID: 3402
			bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue);

			// Token: 0x06000D4B RID: 3403
			bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds);

			// Token: 0x06000D4C RID: 3404
			bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue);

			// Token: 0x06000D4D RID: 3405
			bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue);

			// Token: 0x06000D4E RID: 3406
			bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle);

			// Token: 0x06000D4F RID: 3407
			bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle);

			// Token: 0x06000D50 RID: 3408
			bool ISteamHTTP_DeferHTTPRequest(uint hRequest);

			// Token: 0x06000D51 RID: 3409
			bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest);

			// Token: 0x06000D52 RID: 3410
			bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

			// Token: 0x06000D53 RID: 3411
			bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

			// Token: 0x06000D54 RID: 3412
			bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize);

			// Token: 0x06000D55 RID: 3413
			bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

			// Token: 0x06000D56 RID: 3414
			bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

			// Token: 0x06000D57 RID: 3415
			bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest);

			// Token: 0x06000D58 RID: 3416
			bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut);

			// Token: 0x06000D59 RID: 3417
			bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

			// Token: 0x06000D5A RID: 3418
			HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

			// Token: 0x06000D5B RID: 3419
			bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer);

			// Token: 0x06000D5C RID: 3420
			bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

			// Token: 0x06000D5D RID: 3421
			bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer);

			// Token: 0x06000D5E RID: 3422
			bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo);

			// Token: 0x06000D5F RID: 3423
			bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

			// Token: 0x06000D60 RID: 3424
			bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds);

			// Token: 0x06000D61 RID: 3425
			bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

			// Token: 0x06000D62 RID: 3426
			Result ISteamInventory_GetResultStatus(int resultHandle);

			// Token: 0x06000D63 RID: 3427
			bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

			// Token: 0x06000D64 RID: 3428
			bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

			// Token: 0x06000D65 RID: 3429
			uint ISteamInventory_GetResultTimestamp(int resultHandle);

			// Token: 0x06000D66 RID: 3430
			bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected);

			// Token: 0x06000D67 RID: 3431
			void ISteamInventory_DestroyResult(int resultHandle);

			// Token: 0x06000D68 RID: 3432
			bool ISteamInventory_GetAllItems(ref int pResultHandle);

			// Token: 0x06000D69 RID: 3433
			bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

			// Token: 0x06000D6A RID: 3434
			bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

			// Token: 0x06000D6B RID: 3435
			bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

			// Token: 0x06000D6C RID: 3436
			bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

			// Token: 0x06000D6D RID: 3437
			bool ISteamInventory_GrantPromoItems(ref int pResultHandle);

			// Token: 0x06000D6E RID: 3438
			bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef);

			// Token: 0x06000D6F RID: 3439
			bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

			// Token: 0x06000D70 RID: 3440
			bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity);

			// Token: 0x06000D71 RID: 3441
			bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

			// Token: 0x06000D72 RID: 3442
			bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

			// Token: 0x06000D73 RID: 3443
			void ISteamInventory_SendItemDropHeartbeat();

			// Token: 0x06000D74 RID: 3444
			bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition);

			// Token: 0x06000D75 RID: 3445
			bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

			// Token: 0x06000D76 RID: 3446
			bool ISteamInventory_LoadItemDefinitions();

			// Token: 0x06000D77 RID: 3447
			bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

			// Token: 0x06000D78 RID: 3448
			bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

			// Token: 0x06000D79 RID: 3449
			SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID);

			// Token: 0x06000D7A RID: 3450
			bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

			// Token: 0x06000D7B RID: 3451
			SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

			// Token: 0x06000D7C RID: 3452
			SteamAPICall_t ISteamInventory_RequestPrices();

			// Token: 0x06000D7D RID: 3453
			uint ISteamInventory_GetNumItemsWithPrices();

			// Token: 0x06000D7E RID: 3454
			bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

			// Token: 0x06000D7F RID: 3455
			bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice);

			// Token: 0x06000D80 RID: 3456
			SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties();

			// Token: 0x06000D81 RID: 3457
			bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName);

			// Token: 0x06000D82 RID: 3458
			bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

			// Token: 0x06000D83 RID: 3459
			bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000D84 RID: 3460
			bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue);

			// Token: 0x06000D85 RID: 3461
			bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue);

			// Token: 0x06000D86 RID: 3462
			bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle);

			// Token: 0x06000D87 RID: 3463
			int ISteamMatchmaking_GetFavoriteGameCount();

			// Token: 0x06000D88 RID: 3464
			bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

			// Token: 0x06000D89 RID: 3465
			int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

			// Token: 0x06000D8A RID: 3466
			bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

			// Token: 0x06000D8B RID: 3467
			SteamAPICall_t ISteamMatchmaking_RequestLobbyList();

			// Token: 0x06000D8C RID: 3468
			void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

			// Token: 0x06000D8D RID: 3469
			void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

			// Token: 0x06000D8E RID: 3470
			void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo);

			// Token: 0x06000D8F RID: 3471
			void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

			// Token: 0x06000D90 RID: 3472
			void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter);

			// Token: 0x06000D91 RID: 3473
			void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

			// Token: 0x06000D92 RID: 3474
			void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby);

			// Token: 0x06000D93 RID: 3475
			CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby);

			// Token: 0x06000D94 RID: 3476
			SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers);

			// Token: 0x06000D95 RID: 3477
			SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby);

			// Token: 0x06000D96 RID: 3478
			void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby);

			// Token: 0x06000D97 RID: 3479
			bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee);

			// Token: 0x06000D98 RID: 3480
			int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby);

			// Token: 0x06000D99 RID: 3481
			CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember);

			// Token: 0x06000D9A RID: 3482
			IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey);

			// Token: 0x06000D9B RID: 3483
			bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue);

			// Token: 0x06000D9C RID: 3484
			int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby);

			// Token: 0x06000D9D RID: 3485
			bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

			// Token: 0x06000D9E RID: 3486
			bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey);

			// Token: 0x06000D9F RID: 3487
			IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey);

			// Token: 0x06000DA0 RID: 3488
			void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue);

			// Token: 0x06000DA1 RID: 3489
			bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

			// Token: 0x06000DA2 RID: 3490
			int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

			// Token: 0x06000DA3 RID: 3491
			bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby);

			// Token: 0x06000DA4 RID: 3492
			void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

			// Token: 0x06000DA5 RID: 3493
			bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

			// Token: 0x06000DA6 RID: 3494
			bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers);

			// Token: 0x06000DA7 RID: 3495
			int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby);

			// Token: 0x06000DA8 RID: 3496
			bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType);

			// Token: 0x06000DA9 RID: 3497
			bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

			// Token: 0x06000DAA RID: 3498
			CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby);

			// Token: 0x06000DAB RID: 3499
			bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner);

			// Token: 0x06000DAC RID: 3500
			bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent);

			// Token: 0x06000DAD RID: 3501
			HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			// Token: 0x06000DAE RID: 3502
			HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse);

			// Token: 0x06000DAF RID: 3503
			HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			// Token: 0x06000DB0 RID: 3504
			HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			// Token: 0x06000DB1 RID: 3505
			HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			// Token: 0x06000DB2 RID: 3506
			HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

			// Token: 0x06000DB3 RID: 3507
			void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest);

			// Token: 0x06000DB4 RID: 3508
			IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer);

			// Token: 0x06000DB5 RID: 3509
			void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest);

			// Token: 0x06000DB6 RID: 3510
			void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest);

			// Token: 0x06000DB7 RID: 3511
			bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest);

			// Token: 0x06000DB8 RID: 3512
			int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest);

			// Token: 0x06000DB9 RID: 3513
			void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer);

			// Token: 0x06000DBA RID: 3514
			HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

			// Token: 0x06000DBB RID: 3515
			HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

			// Token: 0x06000DBC RID: 3516
			HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

			// Token: 0x06000DBD RID: 3517
			void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery);

			// Token: 0x06000DBE RID: 3518
			bool ISteamMusic_BIsEnabled();

			// Token: 0x06000DBF RID: 3519
			bool ISteamMusic_BIsPlaying();

			// Token: 0x06000DC0 RID: 3520
			AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

			// Token: 0x06000DC1 RID: 3521
			void ISteamMusic_Play();

			// Token: 0x06000DC2 RID: 3522
			void ISteamMusic_Pause();

			// Token: 0x06000DC3 RID: 3523
			void ISteamMusic_PlayPrevious();

			// Token: 0x06000DC4 RID: 3524
			void ISteamMusic_PlayNext();

			// Token: 0x06000DC5 RID: 3525
			void ISteamMusic_SetVolume(float flVolume);

			// Token: 0x06000DC6 RID: 3526
			float ISteamMusic_GetVolume();

			// Token: 0x06000DC7 RID: 3527
			bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName);

			// Token: 0x06000DC8 RID: 3528
			bool ISteamMusicRemote_DeregisterSteamMusicRemote();

			// Token: 0x06000DC9 RID: 3529
			bool ISteamMusicRemote_BIsCurrentMusicRemote();

			// Token: 0x06000DCA RID: 3530
			bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DCB RID: 3531
			bool ISteamMusicRemote_SetDisplayName(string pchDisplayName);

			// Token: 0x06000DCC RID: 3532
			bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength);

			// Token: 0x06000DCD RID: 3533
			bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DCE RID: 3534
			bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DCF RID: 3535
			bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DD0 RID: 3536
			bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DD1 RID: 3537
			bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DD2 RID: 3538
			bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DD3 RID: 3539
			bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

			// Token: 0x06000DD4 RID: 3540
			bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DD5 RID: 3541
			bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

			// Token: 0x06000DD6 RID: 3542
			bool ISteamMusicRemote_UpdateVolume(float flValue);

			// Token: 0x06000DD7 RID: 3543
			bool ISteamMusicRemote_CurrentEntryWillChange();

			// Token: 0x06000DD8 RID: 3544
			bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable);

			// Token: 0x06000DD9 RID: 3545
			bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText);

			// Token: 0x06000DDA RID: 3546
			bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

			// Token: 0x06000DDB RID: 3547
			bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength);

			// Token: 0x06000DDC RID: 3548
			bool ISteamMusicRemote_CurrentEntryDidChange();

			// Token: 0x06000DDD RID: 3549
			bool ISteamMusicRemote_QueueWillChange();

			// Token: 0x06000DDE RID: 3550
			bool ISteamMusicRemote_ResetQueueEntries();

			// Token: 0x06000DDF RID: 3551
			bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText);

			// Token: 0x06000DE0 RID: 3552
			bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

			// Token: 0x06000DE1 RID: 3553
			bool ISteamMusicRemote_QueueDidChange();

			// Token: 0x06000DE2 RID: 3554
			bool ISteamMusicRemote_PlaylistWillChange();

			// Token: 0x06000DE3 RID: 3555
			bool ISteamMusicRemote_ResetPlaylistEntries();

			// Token: 0x06000DE4 RID: 3556
			bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText);

			// Token: 0x06000DE5 RID: 3557
			bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

			// Token: 0x06000DE6 RID: 3558
			bool ISteamMusicRemote_PlaylistDidChange();

			// Token: 0x06000DE7 RID: 3559
			bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

			// Token: 0x06000DE8 RID: 3560
			bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

			// Token: 0x06000DE9 RID: 3561
			bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

			// Token: 0x06000DEA RID: 3562
			bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote);

			// Token: 0x06000DEB RID: 3563
			bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote);

			// Token: 0x06000DEC RID: 3564
			bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel);

			// Token: 0x06000DED RID: 3565
			bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

			// Token: 0x06000DEE RID: 3566
			bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow);

			// Token: 0x06000DEF RID: 3567
			SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			// Token: 0x06000DF0 RID: 3568
			SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

			// Token: 0x06000DF1 RID: 3569
			SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

			// Token: 0x06000DF2 RID: 3570
			bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			// Token: 0x06000DF3 RID: 3571
			bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

			// Token: 0x06000DF4 RID: 3572
			bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

			// Token: 0x06000DF5 RID: 3573
			bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize);

			// Token: 0x06000DF6 RID: 3574
			bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

			// Token: 0x06000DF7 RID: 3575
			bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

			// Token: 0x06000DF8 RID: 3576
			bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

			// Token: 0x06000DF9 RID: 3577
			bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

			// Token: 0x06000DFA RID: 3578
			bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort);

			// Token: 0x06000DFB RID: 3579
			SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket);

			// Token: 0x06000DFC RID: 3580
			int ISteamNetworking_GetMaxPacketSize(uint hSocket);

			// Token: 0x06000DFD RID: 3581
			bool ISteamParentalSettings_BIsParentalLockEnabled();

			// Token: 0x06000DFE RID: 3582
			bool ISteamParentalSettings_BIsParentalLockLocked();

			// Token: 0x06000DFF RID: 3583
			bool ISteamParentalSettings_BIsAppBlocked(uint nAppID);

			// Token: 0x06000E00 RID: 3584
			bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID);

			// Token: 0x06000E01 RID: 3585
			bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature);

			// Token: 0x06000E02 RID: 3586
			bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature);

			// Token: 0x06000E03 RID: 3587
			bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData);

			// Token: 0x06000E04 RID: 3588
			int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead);

			// Token: 0x06000E05 RID: 3589
			SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData);

			// Token: 0x06000E06 RID: 3590
			SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead);

			// Token: 0x06000E07 RID: 3591
			bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

			// Token: 0x06000E08 RID: 3592
			bool ISteamRemoteStorage_FileForget(string pchFile);

			// Token: 0x06000E09 RID: 3593
			bool ISteamRemoteStorage_FileDelete(string pchFile);

			// Token: 0x06000E0A RID: 3594
			SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile);

			// Token: 0x06000E0B RID: 3595
			bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

			// Token: 0x06000E0C RID: 3596
			UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile);

			// Token: 0x06000E0D RID: 3597
			bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData);

			// Token: 0x06000E0E RID: 3598
			bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle);

			// Token: 0x06000E0F RID: 3599
			bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle);

			// Token: 0x06000E10 RID: 3600
			bool ISteamRemoteStorage_FileExists(string pchFile);

			// Token: 0x06000E11 RID: 3601
			bool ISteamRemoteStorage_FilePersisted(string pchFile);

			// Token: 0x06000E12 RID: 3602
			int ISteamRemoteStorage_GetFileSize(string pchFile);

			// Token: 0x06000E13 RID: 3603
			long ISteamRemoteStorage_GetFileTimestamp(string pchFile);

			// Token: 0x06000E14 RID: 3604
			RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile);

			// Token: 0x06000E15 RID: 3605
			int ISteamRemoteStorage_GetFileCount();

			// Token: 0x06000E16 RID: 3606
			IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

			// Token: 0x06000E17 RID: 3607
			bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

			// Token: 0x06000E18 RID: 3608
			bool ISteamRemoteStorage_IsCloudEnabledForAccount();

			// Token: 0x06000E19 RID: 3609
			bool ISteamRemoteStorage_IsCloudEnabledForApp();

			// Token: 0x06000E1A RID: 3610
			void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled);

			// Token: 0x06000E1B RID: 3611
			SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority);

			// Token: 0x06000E1C RID: 3612
			bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

			// Token: 0x06000E1D RID: 3613
			bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

			// Token: 0x06000E1E RID: 3614
			int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

			// Token: 0x06000E1F RID: 3615
			int ISteamRemoteStorage_GetCachedUGCCount();

			// Token: 0x06000E20 RID: 3616
			UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

			// Token: 0x06000E21 RID: 3617
			SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

			// Token: 0x06000E22 RID: 3618
			PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId);

			// Token: 0x06000E23 RID: 3619
			bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile);

			// Token: 0x06000E24 RID: 3620
			bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile);

			// Token: 0x06000E25 RID: 3621
			bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle);

			// Token: 0x06000E26 RID: 3622
			bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription);

			// Token: 0x06000E27 RID: 3623
			bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

			// Token: 0x06000E28 RID: 3624
			bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

			// Token: 0x06000E29 RID: 3625
			SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle);

			// Token: 0x06000E2A RID: 3626
			SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld);

			// Token: 0x06000E2B RID: 3627
			SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId);

			// Token: 0x06000E2C RID: 3628
			SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

			// Token: 0x06000E2D RID: 3629
			SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId);

			// Token: 0x06000E2E RID: 3630
			SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

			// Token: 0x06000E2F RID: 3631
			SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId);

			// Token: 0x06000E30 RID: 3632
			bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription);

			// Token: 0x06000E31 RID: 3633
			SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId);

			// Token: 0x06000E32 RID: 3634
			SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			// Token: 0x06000E33 RID: 3635
			SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId);

			// Token: 0x06000E34 RID: 3636
			SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

			// Token: 0x06000E35 RID: 3637
			SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

			// Token: 0x06000E36 RID: 3638
			SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction);

			// Token: 0x06000E37 RID: 3639
			SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex);

			// Token: 0x06000E38 RID: 3640
			SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

			// Token: 0x06000E39 RID: 3641
			SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority);

			// Token: 0x06000E3A RID: 3642
			ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

			// Token: 0x06000E3B RID: 3643
			ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

			// Token: 0x06000E3C RID: 3644
			void ISteamScreenshots_TriggerScreenshot();

			// Token: 0x06000E3D RID: 3645
			void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook);

			// Token: 0x06000E3E RID: 3646
			bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation);

			// Token: 0x06000E3F RID: 3647
			bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID);

			// Token: 0x06000E40 RID: 3648
			bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID);

			// Token: 0x06000E41 RID: 3649
			bool ISteamScreenshots_IsScreenshotsHooked();

			// Token: 0x06000E42 RID: 3650
			ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename);

			// Token: 0x06000E43 RID: 3651
			UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

			// Token: 0x06000E44 RID: 3652
			UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

			// Token: 0x06000E45 RID: 3653
			UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

			// Token: 0x06000E46 RID: 3654
			SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle);

			// Token: 0x06000E47 RID: 3655
			bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails);

			// Token: 0x06000E48 RID: 3656
			bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

			// Token: 0x06000E49 RID: 3657
			bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

			// Token: 0x06000E4A RID: 3658
			bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

			// Token: 0x06000E4B RID: 3659
			bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

			// Token: 0x06000E4C RID: 3660
			uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index);

			// Token: 0x06000E4D RID: 3661
			bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

			// Token: 0x06000E4E RID: 3662
			uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index);

			// Token: 0x06000E4F RID: 3663
			bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

			// Token: 0x06000E50 RID: 3664
			bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle);

			// Token: 0x06000E51 RID: 3665
			bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName);

			// Token: 0x06000E52 RID: 3666
			bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName);

			// Token: 0x06000E53 RID: 3667
			bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

			// Token: 0x06000E54 RID: 3668
			bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

			// Token: 0x06000E55 RID: 3669
			bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

			// Token: 0x06000E56 RID: 3670
			bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

			// Token: 0x06000E57 RID: 3671
			bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

			// Token: 0x06000E58 RID: 3672
			bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

			// Token: 0x06000E59 RID: 3673
			bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

			// Token: 0x06000E5A RID: 3674
			bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays);

			// Token: 0x06000E5B RID: 3675
			bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage);

			// Token: 0x06000E5C RID: 3676
			bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds);

			// Token: 0x06000E5D RID: 3677
			bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName);

			// Token: 0x06000E5E RID: 3678
			bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

			// Token: 0x06000E5F RID: 3679
			bool ISteamUGC_SetSearchText(ulong handle, string pSearchText);

			// Token: 0x06000E60 RID: 3680
			bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays);

			// Token: 0x06000E61 RID: 3681
			bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue);

			// Token: 0x06000E62 RID: 3682
			SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds);

			// Token: 0x06000E63 RID: 3683
			SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType);

			// Token: 0x06000E64 RID: 3684
			UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID);

			// Token: 0x06000E65 RID: 3685
			bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle);

			// Token: 0x06000E66 RID: 3686
			bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription);

			// Token: 0x06000E67 RID: 3687
			bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage);

			// Token: 0x06000E68 RID: 3688
			bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData);

			// Token: 0x06000E69 RID: 3689
			bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

			// Token: 0x06000E6A RID: 3690
			bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

			// Token: 0x06000E6B RID: 3691
			bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder);

			// Token: 0x06000E6C RID: 3692
			bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile);

			// Token: 0x06000E6D RID: 3693
			bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey);

			// Token: 0x06000E6E RID: 3694
			bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue);

			// Token: 0x06000E6F RID: 3695
			bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type);

			// Token: 0x06000E70 RID: 3696
			bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID);

			// Token: 0x06000E71 RID: 3697
			bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile);

			// Token: 0x06000E72 RID: 3698
			bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID);

			// Token: 0x06000E73 RID: 3699
			bool ISteamUGC_RemoveItemPreview(ulong handle, uint index);

			// Token: 0x06000E74 RID: 3700
			SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote);

			// Token: 0x06000E75 RID: 3701
			ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

			// Token: 0x06000E76 RID: 3702
			SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

			// Token: 0x06000E77 RID: 3703
			SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID);

			// Token: 0x06000E78 RID: 3704
			SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID);

			// Token: 0x06000E79 RID: 3705
			SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID);

			// Token: 0x06000E7A RID: 3706
			SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID);

			// Token: 0x06000E7B RID: 3707
			SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID);

			// Token: 0x06000E7C RID: 3708
			uint ISteamUGC_GetNumSubscribedItems();

			// Token: 0x06000E7D RID: 3709
			uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries);

			// Token: 0x06000E7E RID: 3710
			uint ISteamUGC_GetItemState(ulong nPublishedFileID);

			// Token: 0x06000E7F RID: 3711
			bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

			// Token: 0x06000E80 RID: 3712
			bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

			// Token: 0x06000E81 RID: 3713
			bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

			// Token: 0x06000E82 RID: 3714
			bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder);

			// Token: 0x06000E83 RID: 3715
			void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend);

			// Token: 0x06000E84 RID: 3716
			SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

			// Token: 0x06000E85 RID: 3717
			SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

			// Token: 0x06000E86 RID: 3718
			SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems();

			// Token: 0x06000E87 RID: 3719
			SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID);

			// Token: 0x06000E88 RID: 3720
			SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID);

			// Token: 0x06000E89 RID: 3721
			SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID);

			// Token: 0x06000E8A RID: 3722
			SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID);

			// Token: 0x06000E8B RID: 3723
			SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID);

			// Token: 0x06000E8C RID: 3724
			SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID);

			// Token: 0x06000E8D RID: 3725
			HSteamUser ISteamUser_GetHSteamUser();

			// Token: 0x06000E8E RID: 3726
			bool ISteamUser_BLoggedOn();

			// Token: 0x06000E8F RID: 3727
			CSteamID ISteamUser_GetSteamID();

			// Token: 0x06000E90 RID: 3728
			int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

			// Token: 0x06000E91 RID: 3729
			void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

			// Token: 0x06000E92 RID: 3730
			void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo);

			// Token: 0x06000E93 RID: 3731
			bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer);

			// Token: 0x06000E94 RID: 3732
			void ISteamUser_StartVoiceRecording();

			// Token: 0x06000E95 RID: 3733
			void ISteamUser_StopVoiceRecording();

			// Token: 0x06000E96 RID: 3734
			VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			// Token: 0x06000E97 RID: 3735
			VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

			// Token: 0x06000E98 RID: 3736
			VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

			// Token: 0x06000E99 RID: 3737
			uint ISteamUser_GetVoiceOptimalSampleRate();

			// Token: 0x06000E9A RID: 3738
			HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

			// Token: 0x06000E9B RID: 3739
			BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

			// Token: 0x06000E9C RID: 3740
			void ISteamUser_EndAuthSession(ulong steamID);

			// Token: 0x06000E9D RID: 3741
			void ISteamUser_CancelAuthTicket(uint hAuthTicket);

			// Token: 0x06000E9E RID: 3742
			UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID);

			// Token: 0x06000E9F RID: 3743
			bool ISteamUser_BIsBehindNAT();

			// Token: 0x06000EA0 RID: 3744
			void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

			// Token: 0x06000EA1 RID: 3745
			SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude);

			// Token: 0x06000EA2 RID: 3746
			bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

			// Token: 0x06000EA3 RID: 3747
			int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

			// Token: 0x06000EA4 RID: 3748
			int ISteamUser_GetPlayerSteamLevel();

			// Token: 0x06000EA5 RID: 3749
			SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL);

			// Token: 0x06000EA6 RID: 3750
			bool ISteamUser_BIsPhoneVerified();

			// Token: 0x06000EA7 RID: 3751
			bool ISteamUser_BIsTwoFactorEnabled();

			// Token: 0x06000EA8 RID: 3752
			bool ISteamUser_BIsPhoneIdentifying();

			// Token: 0x06000EA9 RID: 3753
			bool ISteamUser_BIsPhoneRequiringVerification();

			// Token: 0x06000EAA RID: 3754
			bool ISteamUserStats_RequestCurrentStats();

			// Token: 0x06000EAB RID: 3755
			bool ISteamUserStats_GetStat(string pchName, out int pData);

			// Token: 0x06000EAC RID: 3756
			bool ISteamUserStats_GetStat0(string pchName, out float pData);

			// Token: 0x06000EAD RID: 3757
			bool ISteamUserStats_SetStat(string pchName, int nData);

			// Token: 0x06000EAE RID: 3758
			bool ISteamUserStats_SetStat0(string pchName, float fData);

			// Token: 0x06000EAF RID: 3759
			bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength);

			// Token: 0x06000EB0 RID: 3760
			bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			// Token: 0x06000EB1 RID: 3761
			bool ISteamUserStats_SetAchievement(string pchName);

			// Token: 0x06000EB2 RID: 3762
			bool ISteamUserStats_ClearAchievement(string pchName);

			// Token: 0x06000EB3 RID: 3763
			bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

			// Token: 0x06000EB4 RID: 3764
			bool ISteamUserStats_StoreStats();

			// Token: 0x06000EB5 RID: 3765
			int ISteamUserStats_GetAchievementIcon(string pchName);

			// Token: 0x06000EB6 RID: 3766
			IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey);

			// Token: 0x06000EB7 RID: 3767
			bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress);

			// Token: 0x06000EB8 RID: 3768
			uint ISteamUserStats_GetNumAchievements();

			// Token: 0x06000EB9 RID: 3769
			IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

			// Token: 0x06000EBA RID: 3770
			SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser);

			// Token: 0x06000EBB RID: 3771
			bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

			// Token: 0x06000EBC RID: 3772
			bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

			// Token: 0x06000EBD RID: 3773
			bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			// Token: 0x06000EBE RID: 3774
			bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

			// Token: 0x06000EBF RID: 3775
			bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

			// Token: 0x06000EC0 RID: 3776
			SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

			// Token: 0x06000EC1 RID: 3777
			SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName);

			// Token: 0x06000EC2 RID: 3778
			IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard);

			// Token: 0x06000EC3 RID: 3779
			int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard);

			// Token: 0x06000EC4 RID: 3780
			LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard);

			// Token: 0x06000EC5 RID: 3781
			LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard);

			// Token: 0x06000EC6 RID: 3782
			SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

			// Token: 0x06000EC7 RID: 3783
			SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

			// Token: 0x06000EC8 RID: 3784
			bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

			// Token: 0x06000EC9 RID: 3785
			SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

			// Token: 0x06000ECA RID: 3786
			SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC);

			// Token: 0x06000ECB RID: 3787
			SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers();

			// Token: 0x06000ECC RID: 3788
			SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages();

			// Token: 0x06000ECD RID: 3789
			int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			// Token: 0x06000ECE RID: 3790
			int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

			// Token: 0x06000ECF RID: 3791
			bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent);

			// Token: 0x06000ED0 RID: 3792
			SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays);

			// Token: 0x06000ED1 RID: 3793
			bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData);

			// Token: 0x06000ED2 RID: 3794
			bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData);

			// Token: 0x06000ED3 RID: 3795
			int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData);

			// Token: 0x06000ED4 RID: 3796
			int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData);

			// Token: 0x06000ED5 RID: 3797
			uint ISteamUtils_GetSecondsSinceAppActive();

			// Token: 0x06000ED6 RID: 3798
			uint ISteamUtils_GetSecondsSinceComputerActive();

			// Token: 0x06000ED7 RID: 3799
			Universe ISteamUtils_GetConnectedUniverse();

			// Token: 0x06000ED8 RID: 3800
			uint ISteamUtils_GetServerRealTime();

			// Token: 0x06000ED9 RID: 3801
			IntPtr ISteamUtils_GetIPCountry();

			// Token: 0x06000EDA RID: 3802
			bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

			// Token: 0x06000EDB RID: 3803
			bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize);

			// Token: 0x06000EDC RID: 3804
			bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

			// Token: 0x06000EDD RID: 3805
			byte ISteamUtils_GetCurrentBatteryPower();

			// Token: 0x06000EDE RID: 3806
			uint ISteamUtils_GetAppID();

			// Token: 0x06000EDF RID: 3807
			void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition);

			// Token: 0x06000EE0 RID: 3808
			bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			// Token: 0x06000EE1 RID: 3809
			SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall);

			// Token: 0x06000EE2 RID: 3810
			bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

			// Token: 0x06000EE3 RID: 3811
			uint ISteamUtils_GetIPCCallCount();

			// Token: 0x06000EE4 RID: 3812
			void ISteamUtils_SetWarningMessageHook(IntPtr pFunction);

			// Token: 0x06000EE5 RID: 3813
			bool ISteamUtils_IsOverlayEnabled();

			// Token: 0x06000EE6 RID: 3814
			bool ISteamUtils_BOverlayNeedsPresent();

			// Token: 0x06000EE7 RID: 3815
			SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName);

			// Token: 0x06000EE8 RID: 3816
			bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

			// Token: 0x06000EE9 RID: 3817
			uint ISteamUtils_GetEnteredGamepadTextLength();

			// Token: 0x06000EEA RID: 3818
			bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText);

			// Token: 0x06000EEB RID: 3819
			IntPtr ISteamUtils_GetSteamUILanguage();

			// Token: 0x06000EEC RID: 3820
			bool ISteamUtils_IsSteamRunningInVR();

			// Token: 0x06000EED RID: 3821
			void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

			// Token: 0x06000EEE RID: 3822
			bool ISteamUtils_IsSteamInBigPictureMode();

			// Token: 0x06000EEF RID: 3823
			void ISteamUtils_StartVRDashboard();

			// Token: 0x06000EF0 RID: 3824
			bool ISteamUtils_IsVRHeadsetStreamingEnabled();

			// Token: 0x06000EF1 RID: 3825
			void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled);

			// Token: 0x06000EF2 RID: 3826
			void ISteamVideo_GetVideoURL(uint unVideoAppID);

			// Token: 0x06000EF3 RID: 3827
			bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers);

			// Token: 0x06000EF4 RID: 3828
			void ISteamVideo_GetOPFSettings(uint unVideoAppID);

			// Token: 0x06000EF5 RID: 3829
			bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

			// Token: 0x06000EF6 RID: 3830
			bool SteamApi_SteamAPI_Init();

			// Token: 0x06000EF7 RID: 3831
			void SteamApi_SteamAPI_RunCallbacks();

			// Token: 0x06000EF8 RID: 3832
			void SteamApi_SteamGameServer_RunCallbacks();

			// Token: 0x06000EF9 RID: 3833
			void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

			// Token: 0x06000EFA RID: 3834
			void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback);

			// Token: 0x06000EFB RID: 3835
			void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

			// Token: 0x06000EFC RID: 3836
			void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

			// Token: 0x06000EFD RID: 3837
			bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

			// Token: 0x06000EFE RID: 3838
			void SteamApi_SteamAPI_Shutdown();

			// Token: 0x06000EFF RID: 3839
			void SteamApi_SteamGameServer_Shutdown();

			// Token: 0x06000F00 RID: 3840
			HSteamUser SteamApi_SteamAPI_GetHSteamUser();

			// Token: 0x06000F01 RID: 3841
			HSteamPipe SteamApi_SteamAPI_GetHSteamPipe();

			// Token: 0x06000F02 RID: 3842
			HSteamUser SteamApi_SteamGameServer_GetHSteamUser();

			// Token: 0x06000F03 RID: 3843
			HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe();

			// Token: 0x06000F04 RID: 3844
			IntPtr SteamApi_SteamInternal_CreateInterface(string version);

			// Token: 0x06000F05 RID: 3845
			bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
		}

		// Token: 0x0200018E RID: 398
		internal class Linux32 : Platform.Interface, IDisposable
		{
			// Token: 0x170000B3 RID: 179
			// (get) Token: 0x06000F06 RID: 3846 RVA: 0x0003B8C4 File Offset: 0x00039AC4
			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			// Token: 0x06000F07 RID: 3847 RVA: 0x0003B8D6 File Offset: 0x00039AD6
			internal Linux32(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			// Token: 0x06000F08 RID: 3848 RVA: 0x0003B8E5 File Offset: 0x00039AE5
			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			// Token: 0x06000F09 RID: 3849 RVA: 0x0003B8F2 File Offset: 0x00039AF2
			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			// Token: 0x06000F0A RID: 3850 RVA: 0x0003B91C File Offset: 0x00039B1C
			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			// Token: 0x06000F0B RID: 3851 RVA: 0x0003B947 File Offset: 0x00039B47
			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			// Token: 0x06000F0C RID: 3852 RVA: 0x0003B972 File Offset: 0x00039B72
			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			// Token: 0x06000F0D RID: 3853 RVA: 0x0003B99E File Offset: 0x00039B9E
			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			// Token: 0x06000F0E RID: 3854 RVA: 0x0003B9CA File Offset: 0x00039BCA
			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F0F RID: 3855 RVA: 0x0003B9F7 File Offset: 0x00039BF7
			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F10 RID: 3856 RVA: 0x0003BA24 File Offset: 0x00039C24
			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			// Token: 0x06000F11 RID: 3857 RVA: 0x0003BA50 File Offset: 0x00039C50
			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F12 RID: 3858 RVA: 0x0003BA7D File Offset: 0x00039C7D
			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F13 RID: 3859 RVA: 0x0003BAA9 File Offset: 0x00039CA9
			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F14 RID: 3860 RVA: 0x0003BAD6 File Offset: 0x00039CD6
			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F15 RID: 3861 RVA: 0x0003BB03 File Offset: 0x00039D03
			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F16 RID: 3862 RVA: 0x0003BB30 File Offset: 0x00039D30
			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F17 RID: 3863 RVA: 0x0003BB5D File Offset: 0x00039D5D
			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F18 RID: 3864 RVA: 0x0003BB8A File Offset: 0x00039D8A
			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F19 RID: 3865 RVA: 0x0003BBB7 File Offset: 0x00039DB7
			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F1A RID: 3866 RVA: 0x0003BBE4 File Offset: 0x00039DE4
			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F1B RID: 3867 RVA: 0x0003BC11 File Offset: 0x00039E11
			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F1C RID: 3868 RVA: 0x0003BC3E File Offset: 0x00039E3E
			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			// Token: 0x06000F1D RID: 3869 RVA: 0x0003BC68 File Offset: 0x00039E68
			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x06000F1E RID: 3870 RVA: 0x0003BC93 File Offset: 0x00039E93
			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			// Token: 0x06000F1F RID: 3871 RVA: 0x0003BCBD File Offset: 0x00039EBD
			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F20 RID: 3872 RVA: 0x0003BCEA File Offset: 0x00039EEA
			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F21 RID: 3873 RVA: 0x0003BD17 File Offset: 0x00039F17
			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F22 RID: 3874 RVA: 0x0003BD44 File Offset: 0x00039F44
			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F23 RID: 3875 RVA: 0x0003BD71 File Offset: 0x00039F71
			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F24 RID: 3876 RVA: 0x0003BD9E File Offset: 0x00039F9E
			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F25 RID: 3877 RVA: 0x0003BDCB File Offset: 0x00039FCB
			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F26 RID: 3878 RVA: 0x0003BDF8 File Offset: 0x00039FF8
			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F27 RID: 3879 RVA: 0x0003BE25 File Offset: 0x0003A025
			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F28 RID: 3880 RVA: 0x0003BE52 File Offset: 0x0003A052
			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06000F29 RID: 3881 RVA: 0x0003BE7F File Offset: 0x0003A07F
			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			// Token: 0x06000F2A RID: 3882 RVA: 0x0003BEA9 File Offset: 0x0003A0A9
			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			// Token: 0x06000F2B RID: 3883 RVA: 0x0003BED3 File Offset: 0x0003A0D3
			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			// Token: 0x06000F2C RID: 3884 RVA: 0x0003BEFD File Offset: 0x0003A0FD
			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			// Token: 0x06000F2D RID: 3885 RVA: 0x0003BF30 File Offset: 0x0003A130
			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			// Token: 0x06000F2E RID: 3886 RVA: 0x0003BF5C File Offset: 0x0003A15C
			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			// Token: 0x06000F2F RID: 3887 RVA: 0x0003BF89 File Offset: 0x0003A189
			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			// Token: 0x06000F30 RID: 3888 RVA: 0x0003BFB5 File Offset: 0x0003A1B5
			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			// Token: 0x06000F31 RID: 3889 RVA: 0x0003BFDF File Offset: 0x0003A1DF
			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			// Token: 0x06000F32 RID: 3890 RVA: 0x0003C009 File Offset: 0x0003A209
			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x06000F33 RID: 3891 RVA: 0x0003C038 File Offset: 0x0003A238
			public virtual VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x06000F34 RID: 3892 RVA: 0x0003C07C File Offset: 0x0003A27C
			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			// Token: 0x06000F35 RID: 3893 RVA: 0x0003C0AF File Offset: 0x0003A2AF
			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			// Token: 0x06000F36 RID: 3894 RVA: 0x0003C0D9 File Offset: 0x0003A2D9
			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x06000F37 RID: 3895 RVA: 0x0003C106 File Offset: 0x0003A306
			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x06000F38 RID: 3896 RVA: 0x0003C133 File Offset: 0x0003A333
			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x06000F39 RID: 3897 RVA: 0x0003C15E File Offset: 0x0003A35E
			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x06000F3A RID: 3898 RVA: 0x0003C189 File Offset: 0x0003A389
			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x06000F3B RID: 3899 RVA: 0x0003C1B5 File Offset: 0x0003A3B5
			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			// Token: 0x06000F3C RID: 3900 RVA: 0x0003C1DF File Offset: 0x0003A3DF
			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			// Token: 0x06000F3D RID: 3901 RVA: 0x0003C20C File Offset: 0x0003A40C
			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			// Token: 0x06000F3E RID: 3902 RVA: 0x0003C238 File Offset: 0x0003A438
			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x06000F3F RID: 3903 RVA: 0x0003C265 File Offset: 0x0003A465
			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			// Token: 0x06000F40 RID: 3904 RVA: 0x0003C291 File Offset: 0x0003A491
			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			// Token: 0x06000F41 RID: 3905 RVA: 0x0003C2BB File Offset: 0x0003A4BB
			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			// Token: 0x06000F42 RID: 3906 RVA: 0x0003C2E6 File Offset: 0x0003A4E6
			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			// Token: 0x06000F43 RID: 3907 RVA: 0x0003C310 File Offset: 0x0003A510
			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			// Token: 0x06000F44 RID: 3908 RVA: 0x0003C33A File Offset: 0x0003A53A
			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			// Token: 0x06000F45 RID: 3909 RVA: 0x0003C364 File Offset: 0x0003A564
			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			// Token: 0x06000F46 RID: 3910 RVA: 0x0003C38E File Offset: 0x0003A58E
			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			// Token: 0x06000F47 RID: 3911 RVA: 0x0003C3B8 File Offset: 0x0003A5B8
			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			// Token: 0x06000F48 RID: 3912 RVA: 0x0003C3E3 File Offset: 0x0003A5E3
			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			// Token: 0x06000F49 RID: 3913 RVA: 0x0003C40D File Offset: 0x0003A60D
			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			// Token: 0x06000F4A RID: 3914 RVA: 0x0003C438 File Offset: 0x0003A638
			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			// Token: 0x06000F4B RID: 3915 RVA: 0x0003C464 File Offset: 0x0003A664
			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F4C RID: 3916 RVA: 0x0003C48F File Offset: 0x0003A68F
			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F4D RID: 3917 RVA: 0x0003C4BA File Offset: 0x0003A6BA
			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F4E RID: 3918 RVA: 0x0003C4E8 File Offset: 0x0003A6E8
			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				FriendGameInfo_t.PackSmall d = default(FriendGameInfo_t.PackSmall);
				bool result = Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref d);
				pFriendGameInfo = d;
				return result;
			}

			// Token: 0x06000F4F RID: 3919 RVA: 0x0003C534 File Offset: 0x0003A734
			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			// Token: 0x06000F50 RID: 3920 RVA: 0x0003C560 File Offset: 0x0003A760
			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F51 RID: 3921 RVA: 0x0003C58B File Offset: 0x0003A78B
			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			// Token: 0x06000F52 RID: 3922 RVA: 0x0003C5B6 File Offset: 0x0003A7B6
			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			// Token: 0x06000F53 RID: 3923 RVA: 0x0003C5E0 File Offset: 0x0003A7E0
			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			// Token: 0x06000F54 RID: 3924 RVA: 0x0003C60B File Offset: 0x0003A80B
			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			// Token: 0x06000F55 RID: 3925 RVA: 0x0003C636 File Offset: 0x0003A836
			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			// Token: 0x06000F56 RID: 3926 RVA: 0x0003C661 File Offset: 0x0003A861
			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			// Token: 0x06000F57 RID: 3927 RVA: 0x0003C68E File Offset: 0x0003A88E
			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			// Token: 0x06000F58 RID: 3928 RVA: 0x0003C6BA File Offset: 0x0003A8BA
			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			// Token: 0x06000F59 RID: 3929 RVA: 0x0003C6E4 File Offset: 0x0003A8E4
			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			// Token: 0x06000F5A RID: 3930 RVA: 0x0003C70F File Offset: 0x0003A90F
			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			// Token: 0x06000F5B RID: 3931 RVA: 0x0003C73A File Offset: 0x0003A93A
			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			// Token: 0x06000F5C RID: 3932 RVA: 0x0003C765 File Offset: 0x0003A965
			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			// Token: 0x06000F5D RID: 3933 RVA: 0x0003C794 File Offset: 0x0003A994
			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			// Token: 0x06000F5E RID: 3934 RVA: 0x0003C7C0 File Offset: 0x0003A9C0
			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			// Token: 0x06000F5F RID: 3935 RVA: 0x0003C7EB File Offset: 0x0003A9EB
			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			// Token: 0x06000F60 RID: 3936 RVA: 0x0003C817 File Offset: 0x0003AA17
			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			// Token: 0x06000F61 RID: 3937 RVA: 0x0003C843 File Offset: 0x0003AA43
			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			// Token: 0x06000F62 RID: 3938 RVA: 0x0003C86F File Offset: 0x0003AA6F
			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			// Token: 0x06000F63 RID: 3939 RVA: 0x0003C89A File Offset: 0x0003AA9A
			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			// Token: 0x06000F64 RID: 3940 RVA: 0x0003C8C6 File Offset: 0x0003AAC6
			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			// Token: 0x06000F65 RID: 3941 RVA: 0x0003C8F1 File Offset: 0x0003AAF1
			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			// Token: 0x06000F66 RID: 3942 RVA: 0x0003C91D File Offset: 0x0003AB1D
			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			// Token: 0x06000F67 RID: 3943 RVA: 0x0003C948 File Offset: 0x0003AB48
			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			// Token: 0x06000F68 RID: 3944 RVA: 0x0003C973 File Offset: 0x0003AB73
			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F69 RID: 3945 RVA: 0x0003C99E File Offset: 0x0003AB9E
			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F6A RID: 3946 RVA: 0x0003C9C9 File Offset: 0x0003ABC9
			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F6B RID: 3947 RVA: 0x0003C9F4 File Offset: 0x0003ABF4
			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			// Token: 0x06000F6C RID: 3948 RVA: 0x0003CA20 File Offset: 0x0003AC20
			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			// Token: 0x06000F6D RID: 3949 RVA: 0x0003CA4B File Offset: 0x0003AC4B
			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			// Token: 0x06000F6E RID: 3950 RVA: 0x0003CA76 File Offset: 0x0003AC76
			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			// Token: 0x06000F6F RID: 3951 RVA: 0x0003CAA1 File Offset: 0x0003ACA1
			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			// Token: 0x06000F70 RID: 3952 RVA: 0x0003CACD File Offset: 0x0003ACCD
			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			// Token: 0x06000F71 RID: 3953 RVA: 0x0003CAF7 File Offset: 0x0003ACF7
			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			// Token: 0x06000F72 RID: 3954 RVA: 0x0003CB23 File Offset: 0x0003AD23
			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			// Token: 0x06000F73 RID: 3955 RVA: 0x0003CB4D File Offset: 0x0003AD4D
			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			// Token: 0x06000F74 RID: 3956 RVA: 0x0003CB79 File Offset: 0x0003AD79
			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F75 RID: 3957 RVA: 0x0003CBA4 File Offset: 0x0003ADA4
			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			// Token: 0x06000F76 RID: 3958 RVA: 0x0003CBD0 File Offset: 0x0003ADD0
			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F77 RID: 3959 RVA: 0x0003CBFB File Offset: 0x0003ADFB
			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			// Token: 0x06000F78 RID: 3960 RVA: 0x0003CC27 File Offset: 0x0003AE27
			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			// Token: 0x06000F79 RID: 3961 RVA: 0x0003CC51 File Offset: 0x0003AE51
			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			// Token: 0x06000F7A RID: 3962 RVA: 0x0003CC7C File Offset: 0x0003AE7C
			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F7B RID: 3963 RVA: 0x0003CCA7 File Offset: 0x0003AEA7
			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			// Token: 0x06000F7C RID: 3964 RVA: 0x0003CCD2 File Offset: 0x0003AED2
			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x06000F7D RID: 3965 RVA: 0x0003CCFD File Offset: 0x0003AEFD
			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x06000F7E RID: 3966 RVA: 0x0003CD28 File Offset: 0x0003AF28
			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			// Token: 0x06000F7F RID: 3967 RVA: 0x0003CD53 File Offset: 0x0003AF53
			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			// Token: 0x06000F80 RID: 3968 RVA: 0x0003CD7F File Offset: 0x0003AF7F
			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			// Token: 0x06000F81 RID: 3969 RVA: 0x0003CDAB File Offset: 0x0003AFAB
			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			// Token: 0x06000F82 RID: 3970 RVA: 0x0003CDDE File Offset: 0x0003AFDE
			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			// Token: 0x06000F83 RID: 3971 RVA: 0x0003CE0A File Offset: 0x0003B00A
			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06000F84 RID: 3972 RVA: 0x0003CE35 File Offset: 0x0003B035
			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06000F85 RID: 3973 RVA: 0x0003CE60 File Offset: 0x0003B060
			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06000F86 RID: 3974 RVA: 0x0003CE8B File Offset: 0x0003B08B
			public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			// Token: 0x06000F87 RID: 3975 RVA: 0x0003CEB6 File Offset: 0x0003B0B6
			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			// Token: 0x06000F88 RID: 3976 RVA: 0x0003CEE2 File Offset: 0x0003B0E2
			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06000F89 RID: 3977 RVA: 0x0003CF13 File Offset: 0x0003B113
			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			// Token: 0x06000F8A RID: 3978 RVA: 0x0003CF3E File Offset: 0x0003B13E
			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			// Token: 0x06000F8B RID: 3979 RVA: 0x0003CF69 File Offset: 0x0003B169
			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			// Token: 0x06000F8C RID: 3980 RVA: 0x0003CF94 File Offset: 0x0003B194
			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			// Token: 0x06000F8D RID: 3981 RVA: 0x0003CFBF File Offset: 0x0003B1BF
			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			// Token: 0x06000F8E RID: 3982 RVA: 0x0003CFEA File Offset: 0x0003B1EA
			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			// Token: 0x06000F8F RID: 3983 RVA: 0x0003D014 File Offset: 0x0003B214
			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			// Token: 0x06000F90 RID: 3984 RVA: 0x0003D03E File Offset: 0x0003B23E
			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			// Token: 0x06000F91 RID: 3985 RVA: 0x0003D068 File Offset: 0x0003B268
			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			// Token: 0x06000F92 RID: 3986 RVA: 0x0003D092 File Offset: 0x0003B292
			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			// Token: 0x06000F93 RID: 3987 RVA: 0x0003D0BC File Offset: 0x0003B2BC
			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			// Token: 0x06000F94 RID: 3988 RVA: 0x0003D0E9 File Offset: 0x0003B2E9
			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			// Token: 0x06000F95 RID: 3989 RVA: 0x0003D116 File Offset: 0x0003B316
			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			// Token: 0x06000F96 RID: 3990 RVA: 0x0003D142 File Offset: 0x0003B342
			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			// Token: 0x06000F97 RID: 3991 RVA: 0x0003D16C File Offset: 0x0003B36C
			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			// Token: 0x06000F98 RID: 3992 RVA: 0x0003D196 File Offset: 0x0003B396
			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			// Token: 0x06000F99 RID: 3993 RVA: 0x0003D1C1 File Offset: 0x0003B3C1
			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			// Token: 0x06000F9A RID: 3994 RVA: 0x0003D1ED File Offset: 0x0003B3ED
			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			// Token: 0x06000F9B RID: 3995 RVA: 0x0003D218 File Offset: 0x0003B418
			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			// Token: 0x06000F9C RID: 3996 RVA: 0x0003D249 File Offset: 0x0003B449
			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			// Token: 0x06000F9D RID: 3997 RVA: 0x0003D273 File Offset: 0x0003B473
			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x06000F9E RID: 3998 RVA: 0x0003D29E File Offset: 0x0003B49E
			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			// Token: 0x06000F9F RID: 3999 RVA: 0x0003D2C8 File Offset: 0x0003B4C8
			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			// Token: 0x06000FA0 RID: 4000 RVA: 0x0003D2F2 File Offset: 0x0003B4F2
			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			// Token: 0x06000FA1 RID: 4001 RVA: 0x0003D31D File Offset: 0x0003B51D
			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			// Token: 0x06000FA2 RID: 4002 RVA: 0x0003D34E File Offset: 0x0003B54E
			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			// Token: 0x06000FA3 RID: 4003 RVA: 0x0003D378 File Offset: 0x0003B578
			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			// Token: 0x06000FA4 RID: 4004 RVA: 0x0003D3A4 File Offset: 0x0003B5A4
			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			// Token: 0x06000FA5 RID: 4005 RVA: 0x0003D3CE File Offset: 0x0003B5CE
			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			// Token: 0x06000FA6 RID: 4006 RVA: 0x0003D3F8 File Offset: 0x0003B5F8
			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			// Token: 0x06000FA7 RID: 4007 RVA: 0x0003D424 File Offset: 0x0003B624
			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			// Token: 0x06000FA8 RID: 4008 RVA: 0x0003D44E File Offset: 0x0003B64E
			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			// Token: 0x06000FA9 RID: 4009 RVA: 0x0003D478 File Offset: 0x0003B678
			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			// Token: 0x06000FAA RID: 4010 RVA: 0x0003D4A2 File Offset: 0x0003B6A2
			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			// Token: 0x06000FAB RID: 4011 RVA: 0x0003D4CD File Offset: 0x0003B6CD
			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			// Token: 0x06000FAC RID: 4012 RVA: 0x0003D4F7 File Offset: 0x0003B6F7
			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			// Token: 0x06000FAD RID: 4013 RVA: 0x0003D52C File Offset: 0x0003B72C
			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			// Token: 0x06000FAE RID: 4014 RVA: 0x0003D55F File Offset: 0x0003B75F
			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			// Token: 0x06000FAF RID: 4015 RVA: 0x0003D590 File Offset: 0x0003B790
			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			// Token: 0x06000FB0 RID: 4016 RVA: 0x0003D5BA File Offset: 0x0003B7BA
			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			// Token: 0x06000FB1 RID: 4017 RVA: 0x0003D5E7 File Offset: 0x0003B7E7
			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			// Token: 0x06000FB2 RID: 4018 RVA: 0x0003D614 File Offset: 0x0003B814
			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			// Token: 0x06000FB3 RID: 4019 RVA: 0x0003D640 File Offset: 0x0003B840
			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			// Token: 0x06000FB4 RID: 4020 RVA: 0x0003D66B File Offset: 0x0003B86B
			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			// Token: 0x06000FB5 RID: 4021 RVA: 0x0003D696 File Offset: 0x0003B896
			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			// Token: 0x06000FB6 RID: 4022 RVA: 0x0003D6C1 File Offset: 0x0003B8C1
			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FB7 RID: 4023 RVA: 0x0003D6EC File Offset: 0x0003B8EC
			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			// Token: 0x06000FB8 RID: 4024 RVA: 0x0003D717 File Offset: 0x0003B917
			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			// Token: 0x06000FB9 RID: 4025 RVA: 0x0003D743 File Offset: 0x0003B943
			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FBA RID: 4026 RVA: 0x0003D76E File Offset: 0x0003B96E
			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FBB RID: 4027 RVA: 0x0003D799 File Offset: 0x0003B999
			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			// Token: 0x06000FBC RID: 4028 RVA: 0x0003D7C5 File Offset: 0x0003B9C5
			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FBD RID: 4029 RVA: 0x0003D7F0 File Offset: 0x0003B9F0
			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			// Token: 0x06000FBE RID: 4030 RVA: 0x0003D81C File Offset: 0x0003BA1C
			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06000FBF RID: 4031 RVA: 0x0003D848 File Offset: 0x0003BA48
			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06000FC0 RID: 4032 RVA: 0x0003D875 File Offset: 0x0003BA75
			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FC1 RID: 4033 RVA: 0x0003D8A0 File Offset: 0x0003BAA0
			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			// Token: 0x06000FC2 RID: 4034 RVA: 0x0003D8D3 File Offset: 0x0003BAD3
			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06000FC3 RID: 4035 RVA: 0x0003D8FF File Offset: 0x0003BAFF
			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			// Token: 0x06000FC4 RID: 4036 RVA: 0x0003D92C File Offset: 0x0003BB2C
			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06000FC5 RID: 4037 RVA: 0x0003D959 File Offset: 0x0003BB59
			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			// Token: 0x06000FC6 RID: 4038 RVA: 0x0003D986 File Offset: 0x0003BB86
			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06000FC7 RID: 4039 RVA: 0x0003D9B9 File Offset: 0x0003BBB9
			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FC8 RID: 4040 RVA: 0x0003D9E4 File Offset: 0x0003BBE4
			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			// Token: 0x06000FC9 RID: 4041 RVA: 0x0003DA13 File Offset: 0x0003BC13
			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			// Token: 0x06000FCA RID: 4042 RVA: 0x0003DA42 File Offset: 0x0003BC42
			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			// Token: 0x06000FCB RID: 4043 RVA: 0x0003DA6E File Offset: 0x0003BC6E
			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FCC RID: 4044 RVA: 0x0003DA99 File Offset: 0x0003BC99
			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			// Token: 0x06000FCD RID: 4045 RVA: 0x0003DAC5 File Offset: 0x0003BCC5
			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			// Token: 0x06000FCE RID: 4046 RVA: 0x0003DAF1 File Offset: 0x0003BCF1
			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			// Token: 0x06000FCF RID: 4047 RVA: 0x0003DB1C File Offset: 0x0003BD1C
			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			// Token: 0x06000FD0 RID: 4048 RVA: 0x0003DB48 File Offset: 0x0003BD48
			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			// Token: 0x06000FD1 RID: 4049 RVA: 0x0003DB74 File Offset: 0x0003BD74
			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06000FD2 RID: 4050 RVA: 0x0003DBA3 File Offset: 0x0003BDA3
			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			// Token: 0x06000FD3 RID: 4051 RVA: 0x0003DBCF File Offset: 0x0003BDCF
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06000FD4 RID: 4052 RVA: 0x0003DBFE File Offset: 0x0003BDFE
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06000FD5 RID: 4053 RVA: 0x0003DC2D File Offset: 0x0003BE2D
			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06000FD6 RID: 4054 RVA: 0x0003DC5C File Offset: 0x0003BE5C
			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06000FD7 RID: 4055 RVA: 0x0003DC8B File Offset: 0x0003BE8B
			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			// Token: 0x06000FD8 RID: 4056 RVA: 0x0003DCB6 File Offset: 0x0003BEB6
			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			// Token: 0x06000FD9 RID: 4057 RVA: 0x0003DCE2 File Offset: 0x0003BEE2
			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			// Token: 0x06000FDA RID: 4058 RVA: 0x0003DD0D File Offset: 0x0003BF0D
			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			// Token: 0x06000FDB RID: 4059 RVA: 0x0003DD38 File Offset: 0x0003BF38
			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			// Token: 0x06000FDC RID: 4060 RVA: 0x0003DD63 File Offset: 0x0003BF63
			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			// Token: 0x06000FDD RID: 4061 RVA: 0x0003DD8E File Offset: 0x0003BF8E
			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			// Token: 0x06000FDE RID: 4062 RVA: 0x0003DDBA File Offset: 0x0003BFBA
			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06000FDF RID: 4063 RVA: 0x0003DDE7 File Offset: 0x0003BFE7
			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06000FE0 RID: 4064 RVA: 0x0003DE14 File Offset: 0x0003C014
			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06000FE1 RID: 4065 RVA: 0x0003DE41 File Offset: 0x0003C041
			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			// Token: 0x06000FE2 RID: 4066 RVA: 0x0003DE6C File Offset: 0x0003C06C
			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06000FE3 RID: 4067 RVA: 0x0003DE99 File Offset: 0x0003C099
			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			// Token: 0x06000FE4 RID: 4068 RVA: 0x0003DEC6 File Offset: 0x0003C0C6
			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06000FE5 RID: 4069 RVA: 0x0003DEF3 File Offset: 0x0003C0F3
			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			// Token: 0x06000FE6 RID: 4070 RVA: 0x0003DF20 File Offset: 0x0003C120
			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			// Token: 0x06000FE7 RID: 4071 RVA: 0x0003DF4D File Offset: 0x0003C14D
			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			// Token: 0x06000FE8 RID: 4072 RVA: 0x0003DF78 File Offset: 0x0003C178
			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			// Token: 0x06000FE9 RID: 4073 RVA: 0x0003DFA3 File Offset: 0x0003C1A3
			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			// Token: 0x06000FEA RID: 4074 RVA: 0x0003DFCE File Offset: 0x0003C1CE
			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			// Token: 0x06000FEB RID: 4075 RVA: 0x0003DFFA File Offset: 0x0003C1FA
			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			// Token: 0x06000FEC RID: 4076 RVA: 0x0003E025 File Offset: 0x0003C225
			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			// Token: 0x06000FED RID: 4077 RVA: 0x0003E052 File Offset: 0x0003C252
			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			// Token: 0x06000FEE RID: 4078 RVA: 0x0003E07D File Offset: 0x0003C27D
			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			// Token: 0x06000FEF RID: 4079 RVA: 0x0003E0A8 File Offset: 0x0003C2A8
			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			// Token: 0x06000FF0 RID: 4080 RVA: 0x0003E0D3 File Offset: 0x0003C2D3
			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			// Token: 0x06000FF1 RID: 4081 RVA: 0x0003E0FE File Offset: 0x0003C2FE
			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			// Token: 0x06000FF2 RID: 4082 RVA: 0x0003E129 File Offset: 0x0003C329
			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			// Token: 0x06000FF3 RID: 4083 RVA: 0x0003E154 File Offset: 0x0003C354
			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			// Token: 0x06000FF4 RID: 4084 RVA: 0x0003E17F File Offset: 0x0003C37F
			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			// Token: 0x06000FF5 RID: 4085 RVA: 0x0003E1A9 File Offset: 0x0003C3A9
			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			// Token: 0x06000FF6 RID: 4086 RVA: 0x0003E1D5 File Offset: 0x0003C3D5
			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			// Token: 0x06000FF7 RID: 4087 RVA: 0x0003E201 File Offset: 0x0003C401
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			// Token: 0x06000FF8 RID: 4088 RVA: 0x0003E22B File Offset: 0x0003C42B
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			// Token: 0x06000FF9 RID: 4089 RVA: 0x0003E255 File Offset: 0x0003C455
			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			// Token: 0x06000FFA RID: 4090 RVA: 0x0003E280 File Offset: 0x0003C480
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			// Token: 0x06000FFB RID: 4091 RVA: 0x0003E2AC File Offset: 0x0003C4AC
			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			// Token: 0x06000FFC RID: 4092 RVA: 0x0003E2D9 File Offset: 0x0003C4D9
			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			// Token: 0x06000FFD RID: 4093 RVA: 0x0003E30A File Offset: 0x0003C50A
			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			// Token: 0x06000FFE RID: 4094 RVA: 0x0003E33B File Offset: 0x0003C53B
			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			// Token: 0x06000FFF RID: 4095 RVA: 0x0003E365 File Offset: 0x0003C565
			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			// Token: 0x06001000 RID: 4096 RVA: 0x0003E390 File Offset: 0x0003C590
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref d, eWorkshopFileType);
				pTags = d;
				return result;
			}

			// Token: 0x06001001 RID: 4097 RVA: 0x0003E3E7 File Offset: 0x0003C5E7
			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001002 RID: 4098 RVA: 0x0003E412 File Offset: 0x0003C612
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			// Token: 0x06001003 RID: 4099 RVA: 0x0003E43E File Offset: 0x0003C63E
			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			// Token: 0x06001004 RID: 4100 RVA: 0x0003E46A File Offset: 0x0003C66A
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			// Token: 0x06001005 RID: 4101 RVA: 0x0003E496 File Offset: 0x0003C696
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			// Token: 0x06001006 RID: 4102 RVA: 0x0003E4C2 File Offset: 0x0003C6C2
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			// Token: 0x06001007 RID: 4103 RVA: 0x0003E4F0 File Offset: 0x0003C6F0
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				bool result = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x06001008 RID: 4104 RVA: 0x0003E53C File Offset: 0x0003C73C
			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			// Token: 0x06001009 RID: 4105 RVA: 0x0003E567 File Offset: 0x0003C767
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			// Token: 0x0600100A RID: 4106 RVA: 0x0003E593 File Offset: 0x0003C793
			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600100B RID: 4107 RVA: 0x0003E5BE File Offset: 0x0003C7BE
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x0600100C RID: 4108 RVA: 0x0003E5E9 File Offset: 0x0003C7E9
			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600100D RID: 4109 RVA: 0x0003E614 File Offset: 0x0003C814
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x0600100E RID: 4110 RVA: 0x0003E63F File Offset: 0x0003C83F
			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600100F RID: 4111 RVA: 0x0003E66A File Offset: 0x0003C86A
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			// Token: 0x06001010 RID: 4112 RVA: 0x0003E696 File Offset: 0x0003C896
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001011 RID: 4113 RVA: 0x0003E6C1 File Offset: 0x0003C8C1
			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			// Token: 0x06001012 RID: 4114 RVA: 0x0003E6ED File Offset: 0x0003C8ED
			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001013 RID: 4115 RVA: 0x0003E718 File Offset: 0x0003C918
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamParamStringArray_t.PackSmall d2 = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref d, ref d2);
				pRequiredTags = d;
				pExcludedTags = d2;
				return result;
			}

			// Token: 0x06001014 RID: 4116 RVA: 0x0003E77C File Offset: 0x0003C97C
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x06001015 RID: 4117 RVA: 0x0003E7D5 File Offset: 0x0003C9D5
			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			// Token: 0x06001016 RID: 4118 RVA: 0x0003E801 File Offset: 0x0003CA01
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			// Token: 0x06001017 RID: 4119 RVA: 0x0003E830 File Offset: 0x0003CA30
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamParamStringArray_t.PackSmall d2 = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref d, ref d2);
				pTags = d;
				pUserTags = d2;
				return result;
			}

			// Token: 0x06001018 RID: 4120 RVA: 0x0003E898 File Offset: 0x0003CA98
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			// Token: 0x06001019 RID: 4121 RVA: 0x0003E8C5 File Offset: 0x0003CAC5
			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			// Token: 0x0600101A RID: 4122 RVA: 0x0003E8EF File Offset: 0x0003CAEF
			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			// Token: 0x0600101B RID: 4123 RVA: 0x0003E91B File Offset: 0x0003CB1B
			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			// Token: 0x0600101C RID: 4124 RVA: 0x0003E947 File Offset: 0x0003CB47
			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			// Token: 0x0600101D RID: 4125 RVA: 0x0003E973 File Offset: 0x0003CB73
			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			// Token: 0x0600101E RID: 4126 RVA: 0x0003E99F File Offset: 0x0003CB9F
			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x0600101F RID: 4127 RVA: 0x0003E9CC File Offset: 0x0003CBCC
			public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			// Token: 0x06001020 RID: 4128 RVA: 0x0003E9F8 File Offset: 0x0003CBF8
			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			// Token: 0x06001021 RID: 4129 RVA: 0x0003EA23 File Offset: 0x0003CC23
			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			// Token: 0x06001022 RID: 4130 RVA: 0x0003EA4E File Offset: 0x0003CC4E
			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x06001023 RID: 4131 RVA: 0x0003EA7B File Offset: 0x0003CC7B
			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			// Token: 0x06001024 RID: 4132 RVA: 0x0003EAA5 File Offset: 0x0003CCA5
			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			// Token: 0x06001025 RID: 4133 RVA: 0x0003EAD0 File Offset: 0x0003CCD0
			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			// Token: 0x06001026 RID: 4134 RVA: 0x0003EAFC File Offset: 0x0003CCFC
			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			// Token: 0x06001027 RID: 4135 RVA: 0x0003EB29 File Offset: 0x0003CD29
			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			// Token: 0x06001028 RID: 4136 RVA: 0x0003EB53 File Offset: 0x0003CD53
			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			// Token: 0x06001029 RID: 4137 RVA: 0x0003EB7E File Offset: 0x0003CD7E
			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x0600102A RID: 4138 RVA: 0x0003EBA9 File Offset: 0x0003CDA9
			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600102B RID: 4139 RVA: 0x0003EBD6 File Offset: 0x0003CDD6
			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600102C RID: 4140 RVA: 0x0003EC03 File Offset: 0x0003CE03
			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x0600102D RID: 4141 RVA: 0x0003EC30 File Offset: 0x0003CE30
			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x0600102E RID: 4142 RVA: 0x0003EC5F File Offset: 0x0003CE5F
			public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			// Token: 0x0600102F RID: 4143 RVA: 0x0003EC8A File Offset: 0x0003CE8A
			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			// Token: 0x06001030 RID: 4144 RVA: 0x0003ECB7 File Offset: 0x0003CEB7
			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			// Token: 0x06001031 RID: 4145 RVA: 0x0003ECE2 File Offset: 0x0003CEE2
			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001032 RID: 4146 RVA: 0x0003ED0D File Offset: 0x0003CF0D
			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001033 RID: 4147 RVA: 0x0003ED38 File Offset: 0x0003CF38
			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001034 RID: 4148 RVA: 0x0003ED63 File Offset: 0x0003CF63
			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001035 RID: 4149 RVA: 0x0003ED8E File Offset: 0x0003CF8E
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			// Token: 0x06001036 RID: 4150 RVA: 0x0003EDBD File Offset: 0x0003CFBD
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			// Token: 0x06001037 RID: 4151 RVA: 0x0003EDEC File Offset: 0x0003CFEC
			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				LeaderboardEntry_t.PackSmall d = default(LeaderboardEntry_t.PackSmall);
				bool result = Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref d, pDetails, cDetailsMax);
				pLeaderboardEntry = d;
				return result;
			}

			// Token: 0x06001038 RID: 4152 RVA: 0x0003EE3D File Offset: 0x0003D03D
			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			// Token: 0x06001039 RID: 4153 RVA: 0x0003EE6E File Offset: 0x0003D06E
			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			// Token: 0x0600103A RID: 4154 RVA: 0x0003EE9A File Offset: 0x0003D09A
			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			// Token: 0x0600103B RID: 4155 RVA: 0x0003EEC4 File Offset: 0x0003D0C4
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			// Token: 0x0600103C RID: 4156 RVA: 0x0003EEEE File Offset: 0x0003D0EE
			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x0600103D RID: 4157 RVA: 0x0003EF1D File Offset: 0x0003D11D
			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x0600103E RID: 4158 RVA: 0x0003EF4E File Offset: 0x0003D14E
			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			// Token: 0x0600103F RID: 4159 RVA: 0x0003EF7A File Offset: 0x0003D17A
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			// Token: 0x06001040 RID: 4160 RVA: 0x0003EFA5 File Offset: 0x0003D1A5
			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001041 RID: 4161 RVA: 0x0003EFD1 File Offset: 0x0003D1D1
			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001042 RID: 4162 RVA: 0x0003EFFD File Offset: 0x0003D1FD
			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001043 RID: 4163 RVA: 0x0003F02A File Offset: 0x0003D22A
			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001044 RID: 4164 RVA: 0x0003F057 File Offset: 0x0003D257
			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			// Token: 0x06001045 RID: 4165 RVA: 0x0003F081 File Offset: 0x0003D281
			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			// Token: 0x06001046 RID: 4166 RVA: 0x0003F0AB File Offset: 0x0003D2AB
			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			// Token: 0x06001047 RID: 4167 RVA: 0x0003F0D5 File Offset: 0x0003D2D5
			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			// Token: 0x06001048 RID: 4168 RVA: 0x0003F0FF File Offset: 0x0003D2FF
			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			// Token: 0x06001049 RID: 4169 RVA: 0x0003F129 File Offset: 0x0003D329
			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			// Token: 0x0600104A RID: 4170 RVA: 0x0003F153 File Offset: 0x0003D353
			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			// Token: 0x0600104B RID: 4171 RVA: 0x0003F17E File Offset: 0x0003D37E
			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			// Token: 0x0600104C RID: 4172 RVA: 0x0003F1A9 File Offset: 0x0003D3A9
			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			// Token: 0x0600104D RID: 4173 RVA: 0x0003F1D4 File Offset: 0x0003D3D4
			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			// Token: 0x0600104E RID: 4174 RVA: 0x0003F1FE File Offset: 0x0003D3FE
			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			// Token: 0x0600104F RID: 4175 RVA: 0x0003F228 File Offset: 0x0003D428
			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			// Token: 0x06001050 RID: 4176 RVA: 0x0003F259 File Offset: 0x0003D459
			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001051 RID: 4177 RVA: 0x0003F284 File Offset: 0x0003D484
			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001052 RID: 4178 RVA: 0x0003F2AF File Offset: 0x0003D4AF
			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			// Token: 0x06001053 RID: 4179 RVA: 0x0003F2DA File Offset: 0x0003D4DA
			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			// Token: 0x06001054 RID: 4180 RVA: 0x0003F306 File Offset: 0x0003D506
			public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			// Token: 0x06001055 RID: 4181 RVA: 0x0003F331 File Offset: 0x0003D531
			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			// Token: 0x06001056 RID: 4182 RVA: 0x0003F35E File Offset: 0x0003D55E
			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			// Token: 0x06001057 RID: 4183 RVA: 0x0003F38B File Offset: 0x0003D58B
			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			// Token: 0x06001058 RID: 4184 RVA: 0x0003F3B6 File Offset: 0x0003D5B6
			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			// Token: 0x06001059 RID: 4185 RVA: 0x0003F3E0 File Offset: 0x0003D5E0
			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			// Token: 0x0600105A RID: 4186 RVA: 0x0003F40B File Offset: 0x0003D60B
			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x0600105B RID: 4187 RVA: 0x0003F438 File Offset: 0x0003D638
			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			// Token: 0x0600105C RID: 4188 RVA: 0x0003F462 File Offset: 0x0003D662
			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			// Token: 0x0600105D RID: 4189 RVA: 0x0003F48C File Offset: 0x0003D68C
			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			// Token: 0x0600105E RID: 4190 RVA: 0x0003F4B7 File Offset: 0x0003D6B7
			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			// Token: 0x0600105F RID: 4191 RVA: 0x0003F4E8 File Offset: 0x0003D6E8
			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			// Token: 0x06001060 RID: 4192 RVA: 0x0003F514 File Offset: 0x0003D714
			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			// Token: 0x06001061 RID: 4193 RVA: 0x0003F545 File Offset: 0x0003D745
			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x06001062 RID: 4194 RVA: 0x0003F570 File Offset: 0x0003D770
			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x06001063 RID: 4195 RVA: 0x0003F59B File Offset: 0x0003D79B
			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			// Token: 0x06001064 RID: 4196 RVA: 0x0003F5C8 File Offset: 0x0003D7C8
			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				P2PSessionState_t.PackSmall d = default(P2PSessionState_t.PackSmall);
				bool result = Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref d);
				pConnectionState = d;
				return result;
			}

			// Token: 0x06001065 RID: 4197 RVA: 0x0003F614 File Offset: 0x0003D814
			public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			// Token: 0x06001066 RID: 4198 RVA: 0x0003F63F File Offset: 0x0003D83F
			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			// Token: 0x06001067 RID: 4199 RVA: 0x0003F66E File Offset: 0x0003D86E
			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			// Token: 0x06001068 RID: 4200 RVA: 0x0003F69D File Offset: 0x0003D89D
			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			// Token: 0x06001069 RID: 4201 RVA: 0x0003F6CA File Offset: 0x0003D8CA
			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x0600106A RID: 4202 RVA: 0x0003F6F6 File Offset: 0x0003D8F6
			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x0600106B RID: 4203 RVA: 0x0003F722 File Offset: 0x0003D922
			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			// Token: 0x0600106C RID: 4204 RVA: 0x0003F751 File Offset: 0x0003D951
			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			// Token: 0x0600106D RID: 4205 RVA: 0x0003F77D File Offset: 0x0003D97D
			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			// Token: 0x0600106E RID: 4206 RVA: 0x0003F7AC File Offset: 0x0003D9AC
			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x0600106F RID: 4207 RVA: 0x0003F7D9 File Offset: 0x0003D9D9
			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x06001070 RID: 4208 RVA: 0x0003F80A File Offset: 0x0003DA0A
			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			// Token: 0x06001071 RID: 4209 RVA: 0x0003F83B File Offset: 0x0003DA3B
			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			// Token: 0x06001072 RID: 4210 RVA: 0x0003F868 File Offset: 0x0003DA68
			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			// Token: 0x06001073 RID: 4211 RVA: 0x0003F893 File Offset: 0x0003DA93
			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			// Token: 0x06001074 RID: 4212 RVA: 0x0003F8BE File Offset: 0x0003DABE
			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			// Token: 0x06001075 RID: 4213 RVA: 0x0003F8ED File Offset: 0x0003DAED
			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			// Token: 0x06001076 RID: 4214 RVA: 0x0003F91C File Offset: 0x0003DB1C
			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			// Token: 0x06001077 RID: 4215 RVA: 0x0003F946 File Offset: 0x0003DB46
			public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			// Token: 0x06001078 RID: 4216 RVA: 0x0003F971 File Offset: 0x0003DB71
			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			// Token: 0x06001079 RID: 4217 RVA: 0x0003F99D File Offset: 0x0003DB9D
			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			// Token: 0x0600107A RID: 4218 RVA: 0x0003F9C9 File Offset: 0x0003DBC9
			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			// Token: 0x0600107B RID: 4219 RVA: 0x0003F9F5 File Offset: 0x0003DBF5
			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			// Token: 0x0600107C RID: 4220 RVA: 0x0003FA1F File Offset: 0x0003DC1F
			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			// Token: 0x0600107D RID: 4221 RVA: 0x0003FA4C File Offset: 0x0003DC4C
			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			// Token: 0x0600107E RID: 4222 RVA: 0x0003FA76 File Offset: 0x0003DC76
			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			// Token: 0x0600107F RID: 4223 RVA: 0x0003FAA0 File Offset: 0x0003DCA0
			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			// Token: 0x06001080 RID: 4224 RVA: 0x0003FACA File Offset: 0x0003DCCA
			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			// Token: 0x06001081 RID: 4225 RVA: 0x0003FAF4 File Offset: 0x0003DCF4
			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			// Token: 0x06001082 RID: 4226 RVA: 0x0003FB1E File Offset: 0x0003DD1E
			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			// Token: 0x06001083 RID: 4227 RVA: 0x0003FB48 File Offset: 0x0003DD48
			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			// Token: 0x06001084 RID: 4228 RVA: 0x0003FB72 File Offset: 0x0003DD72
			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			// Token: 0x06001085 RID: 4229 RVA: 0x0003FB9D File Offset: 0x0003DD9D
			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			// Token: 0x06001086 RID: 4230 RVA: 0x0003FBC7 File Offset: 0x0003DDC7
			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			// Token: 0x06001087 RID: 4231 RVA: 0x0003FBF2 File Offset: 0x0003DDF2
			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			// Token: 0x06001088 RID: 4232 RVA: 0x0003FC1C File Offset: 0x0003DE1C
			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			// Token: 0x06001089 RID: 4233 RVA: 0x0003FC46 File Offset: 0x0003DE46
			public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			// Token: 0x0600108A RID: 4234 RVA: 0x0003FC71 File Offset: 0x0003DE71
			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			// Token: 0x0600108B RID: 4235 RVA: 0x0003FC9C File Offset: 0x0003DE9C
			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x0600108C RID: 4236 RVA: 0x0003FCC8 File Offset: 0x0003DEC8
			public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			// Token: 0x0600108D RID: 4237 RVA: 0x0003FCF3 File Offset: 0x0003DEF3
			public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			// Token: 0x0600108E RID: 4238 RVA: 0x0003FD1E File Offset: 0x0003DF1E
			public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			// Token: 0x0600108F RID: 4239 RVA: 0x0003FD49 File Offset: 0x0003DF49
			public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			// Token: 0x06001090 RID: 4240 RVA: 0x0003FD74 File Offset: 0x0003DF74
			public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			// Token: 0x06001091 RID: 4241 RVA: 0x0003FD9F File Offset: 0x0003DF9F
			public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			// Token: 0x06001092 RID: 4242 RVA: 0x0003FDCA File Offset: 0x0003DFCA
			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			// Token: 0x06001093 RID: 4243 RVA: 0x0003FDF5 File Offset: 0x0003DFF5
			public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			// Token: 0x06001094 RID: 4244 RVA: 0x0003FE20 File Offset: 0x0003E020
			public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			// Token: 0x06001095 RID: 4245 RVA: 0x0003FE4B File Offset: 0x0003E04B
			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			// Token: 0x06001096 RID: 4246 RVA: 0x0003FE76 File Offset: 0x0003E076
			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			// Token: 0x06001097 RID: 4247 RVA: 0x0003FEA0 File Offset: 0x0003E0A0
			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			// Token: 0x06001098 RID: 4248 RVA: 0x0003FECB File Offset: 0x0003E0CB
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			// Token: 0x06001099 RID: 4249 RVA: 0x0003FEF6 File Offset: 0x0003E0F6
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			// Token: 0x0600109A RID: 4250 RVA: 0x0003FF21 File Offset: 0x0003E121
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x0600109B RID: 4251 RVA: 0x0003FF4D File Offset: 0x0003E14D
			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			// Token: 0x0600109C RID: 4252 RVA: 0x0003FF77 File Offset: 0x0003E177
			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			// Token: 0x0600109D RID: 4253 RVA: 0x0003FFA1 File Offset: 0x0003E1A1
			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			// Token: 0x0600109E RID: 4254 RVA: 0x0003FFCB File Offset: 0x0003E1CB
			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x0600109F RID: 4255 RVA: 0x0003FFF8 File Offset: 0x0003E1F8
			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			// Token: 0x060010A0 RID: 4256 RVA: 0x00040023 File Offset: 0x0003E223
			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			// Token: 0x060010A1 RID: 4257 RVA: 0x0004004D File Offset: 0x0003E24D
			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			// Token: 0x060010A2 RID: 4258 RVA: 0x00040077 File Offset: 0x0003E277
			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			// Token: 0x060010A3 RID: 4259 RVA: 0x000400A1 File Offset: 0x0003E2A1
			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x060010A4 RID: 4260 RVA: 0x000400CE File Offset: 0x0003E2CE
			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			// Token: 0x060010A5 RID: 4261 RVA: 0x000400F9 File Offset: 0x0003E2F9
			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			// Token: 0x060010A6 RID: 4262 RVA: 0x00040123 File Offset: 0x0003E323
			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			// Token: 0x060010A7 RID: 4263 RVA: 0x0004014F File Offset: 0x0003E34F
			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			// Token: 0x060010A8 RID: 4264 RVA: 0x0004017B File Offset: 0x0003E37B
			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			// Token: 0x060010A9 RID: 4265 RVA: 0x000401A7 File Offset: 0x0003E3A7
			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			// Token: 0x060010AA RID: 4266 RVA: 0x000401D4 File Offset: 0x0003E3D4
			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			// Token: 0x060010AB RID: 4267 RVA: 0x00040201 File Offset: 0x0003E401
			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x060010AC RID: 4268 RVA: 0x0004022D File Offset: 0x0003E42D
			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x060010AD RID: 4269 RVA: 0x00040259 File Offset: 0x0003E459
			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x060010AE RID: 4270 RVA: 0x00040284 File Offset: 0x0003E484
			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x060010AF RID: 4271 RVA: 0x000402AF File Offset: 0x0003E4AF
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			// Token: 0x060010B0 RID: 4272 RVA: 0x000402DC File Offset: 0x0003E4DC
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			// Token: 0x060010B1 RID: 4273 RVA: 0x0004030B File Offset: 0x0003E50B
			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			// Token: 0x060010B2 RID: 4274 RVA: 0x00040337 File Offset: 0x0003E537
			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x060010B3 RID: 4275 RVA: 0x00040364 File Offset: 0x0003E564
			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x060010B4 RID: 4276 RVA: 0x00040393 File Offset: 0x0003E593
			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x060010B5 RID: 4277 RVA: 0x000403BE File Offset: 0x0003E5BE
			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			// Token: 0x060010B6 RID: 4278 RVA: 0x000403EA File Offset: 0x0003E5EA
			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			// Token: 0x060010B7 RID: 4279 RVA: 0x00040419 File Offset: 0x0003E619
			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			// Token: 0x060010B8 RID: 4280 RVA: 0x00040444 File Offset: 0x0003E644
			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			// Token: 0x060010B9 RID: 4281 RVA: 0x0004046F File Offset: 0x0003E66F
			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			// Token: 0x060010BA RID: 4282 RVA: 0x0004049E File Offset: 0x0003E69E
			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			// Token: 0x060010BB RID: 4283 RVA: 0x000404CA File Offset: 0x0003E6CA
			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			// Token: 0x060010BC RID: 4284 RVA: 0x000404F6 File Offset: 0x0003E6F6
			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			// Token: 0x060010BD RID: 4285 RVA: 0x00040522 File Offset: 0x0003E722
			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			// Token: 0x060010BE RID: 4286 RVA: 0x0004054E File Offset: 0x0003E74E
			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			// Token: 0x060010BF RID: 4287 RVA: 0x0004057A File Offset: 0x0003E77A
			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			// Token: 0x060010C0 RID: 4288 RVA: 0x000405A4 File Offset: 0x0003E7A4
			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			// Token: 0x060010C1 RID: 4289 RVA: 0x000405CE File Offset: 0x0003E7CE
			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			// Token: 0x060010C2 RID: 4290 RVA: 0x000405F8 File Offset: 0x0003E7F8
			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			// Token: 0x060010C3 RID: 4291 RVA: 0x00040623 File Offset: 0x0003E823
			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			// Token: 0x060010C4 RID: 4292 RVA: 0x0004064E File Offset: 0x0003E84E
			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			// Token: 0x060010C5 RID: 4293 RVA: 0x00040679 File Offset: 0x0003E879
			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			// Token: 0x060010C6 RID: 4294 RVA: 0x000406A5 File Offset: 0x0003E8A5
			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			// Token: 0x060010C7 RID: 4295 RVA: 0x000406D0 File Offset: 0x0003E8D0
			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x060010C8 RID: 4296 RVA: 0x000406FC File Offset: 0x0003E8FC
			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x060010C9 RID: 4297 RVA: 0x00040728 File Offset: 0x0003E928
			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			// Token: 0x060010CA RID: 4298 RVA: 0x00040753 File Offset: 0x0003E953
			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			// Token: 0x060010CB RID: 4299 RVA: 0x0004077F File Offset: 0x0003E97F
			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x060010CC RID: 4300 RVA: 0x000407AA File Offset: 0x0003E9AA
			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			// Token: 0x060010CD RID: 4301 RVA: 0x000407D6 File Offset: 0x0003E9D6
			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			// Token: 0x060010CE RID: 4302 RVA: 0x00040805 File Offset: 0x0003EA05
			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x060010CF RID: 4303 RVA: 0x00040830 File Offset: 0x0003EA30
			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			// Token: 0x060010D0 RID: 4304 RVA: 0x0004085C File Offset: 0x0003EA5C
			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			// Token: 0x060010D1 RID: 4305 RVA: 0x0004088B File Offset: 0x0003EA8B
			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			// Token: 0x060010D2 RID: 4306 RVA: 0x000408B7 File Offset: 0x0003EAB7
			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			// Token: 0x060010D3 RID: 4307 RVA: 0x000408E4 File Offset: 0x0003EAE4
			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			// Token: 0x060010D4 RID: 4308 RVA: 0x00040917 File Offset: 0x0003EB17
			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			// Token: 0x060010D5 RID: 4309 RVA: 0x00040944 File Offset: 0x0003EB44
			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			// Token: 0x060010D6 RID: 4310 RVA: 0x00040975 File Offset: 0x0003EB75
			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			// Token: 0x060010D7 RID: 4311 RVA: 0x000409A0 File Offset: 0x0003EBA0
			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			// Token: 0x060010D8 RID: 4312 RVA: 0x000409CB File Offset: 0x0003EBCB
			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			// Token: 0x060010D9 RID: 4313 RVA: 0x000409F6 File Offset: 0x0003EBF6
			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x060010DA RID: 4314 RVA: 0x00040A27 File Offset: 0x0003EC27
			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x060010DB RID: 4315 RVA: 0x00040A58 File Offset: 0x0003EC58
			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x060010DC RID: 4316 RVA: 0x00040A83 File Offset: 0x0003EC83
			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x060010DD RID: 4317 RVA: 0x00040AAE File Offset: 0x0003ECAE
			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			// Token: 0x060010DE RID: 4318 RVA: 0x00040AD9 File Offset: 0x0003ECD9
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x060010DF RID: 4319 RVA: 0x00040B0E File Offset: 0x0003ED0E
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x060010E0 RID: 4320 RVA: 0x00040B3F File Offset: 0x0003ED3F
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x060010E1 RID: 4321 RVA: 0x00040B6B File Offset: 0x0003ED6B
			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x060010E2 RID: 4322 RVA: 0x00040B98 File Offset: 0x0003ED98
			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamUGCDetails_t.PackSmall d = default(SteamUGCDetails_t.PackSmall);
				bool result = Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref d);
				pDetails = d;
				return result;
			}

			// Token: 0x060010E3 RID: 4323 RVA: 0x00040BE5 File Offset: 0x0003EDE5
			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			// Token: 0x060010E4 RID: 4324 RVA: 0x00040C14 File Offset: 0x0003EE14
			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			// Token: 0x060010E5 RID: 4325 RVA: 0x00040C43 File Offset: 0x0003EE43
			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x060010E6 RID: 4326 RVA: 0x00040C72 File Offset: 0x0003EE72
			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			// Token: 0x060010E7 RID: 4327 RVA: 0x00040CA1 File Offset: 0x0003EEA1
			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			// Token: 0x060010E8 RID: 4328 RVA: 0x00040CD0 File Offset: 0x0003EED0
			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			// Token: 0x060010E9 RID: 4329 RVA: 0x00040D12 File Offset: 0x0003EF12
			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			// Token: 0x060010EA RID: 4330 RVA: 0x00040D3E File Offset: 0x0003EF3E
			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			// Token: 0x060010EB RID: 4331 RVA: 0x00040D73 File Offset: 0x0003EF73
			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x060010EC RID: 4332 RVA: 0x00040D9E File Offset: 0x0003EF9E
			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			// Token: 0x060010ED RID: 4333 RVA: 0x00040DCA File Offset: 0x0003EFCA
			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			// Token: 0x060010EE RID: 4334 RVA: 0x00040DF6 File Offset: 0x0003EFF6
			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			// Token: 0x060010EF RID: 4335 RVA: 0x00040E22 File Offset: 0x0003F022
			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			// Token: 0x060010F0 RID: 4336 RVA: 0x00040E4E File Offset: 0x0003F04E
			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			// Token: 0x060010F1 RID: 4337 RVA: 0x00040E7A File Offset: 0x0003F07A
			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			// Token: 0x060010F2 RID: 4338 RVA: 0x00040EA6 File Offset: 0x0003F0A6
			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			// Token: 0x060010F3 RID: 4339 RVA: 0x00040ED2 File Offset: 0x0003F0D2
			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			// Token: 0x060010F4 RID: 4340 RVA: 0x00040EFE File Offset: 0x0003F0FE
			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			// Token: 0x060010F5 RID: 4341 RVA: 0x00040F2A File Offset: 0x0003F12A
			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			// Token: 0x060010F6 RID: 4342 RVA: 0x00040F56 File Offset: 0x0003F156
			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x060010F7 RID: 4343 RVA: 0x00040F82 File Offset: 0x0003F182
			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			// Token: 0x060010F8 RID: 4344 RVA: 0x00040FAE File Offset: 0x0003F1AE
			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			// Token: 0x060010F9 RID: 4345 RVA: 0x00040FDA File Offset: 0x0003F1DA
			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			// Token: 0x060010FA RID: 4346 RVA: 0x00041006 File Offset: 0x0003F206
			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			// Token: 0x060010FB RID: 4347 RVA: 0x00041032 File Offset: 0x0003F232
			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			// Token: 0x060010FC RID: 4348 RVA: 0x0004105E File Offset: 0x0003F25E
			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			// Token: 0x060010FD RID: 4349 RVA: 0x0004108B File Offset: 0x0003F28B
			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			// Token: 0x060010FE RID: 4350 RVA: 0x000410B7 File Offset: 0x0003F2B7
			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			// Token: 0x060010FF RID: 4351 RVA: 0x000410E3 File Offset: 0x0003F2E3
			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			// Token: 0x06001100 RID: 4352 RVA: 0x0004110F File Offset: 0x0003F30F
			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			// Token: 0x06001101 RID: 4353 RVA: 0x0004113B File Offset: 0x0003F33B
			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			// Token: 0x06001102 RID: 4354 RVA: 0x00041167 File Offset: 0x0003F367
			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001103 RID: 4355 RVA: 0x00041193 File Offset: 0x0003F393
			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			// Token: 0x06001104 RID: 4356 RVA: 0x000411BF File Offset: 0x0003F3BF
			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			// Token: 0x06001105 RID: 4357 RVA: 0x000411EC File Offset: 0x0003F3EC
			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				bool result = Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x06001106 RID: 4358 RVA: 0x00041238 File Offset: 0x0003F438
			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			// Token: 0x06001107 RID: 4359 RVA: 0x00041264 File Offset: 0x0003F464
			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			// Token: 0x06001108 RID: 4360 RVA: 0x00041290 File Offset: 0x0003F490
			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			// Token: 0x06001109 RID: 4361 RVA: 0x000412BC File Offset: 0x0003F4BC
			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			// Token: 0x0600110A RID: 4362 RVA: 0x000412E9 File Offset: 0x0003F4E9
			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			// Token: 0x0600110B RID: 4363 RVA: 0x00041316 File Offset: 0x0003F516
			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			// Token: 0x0600110C RID: 4364 RVA: 0x00041342 File Offset: 0x0003F542
			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			// Token: 0x0600110D RID: 4365 RVA: 0x0004136F File Offset: 0x0003F56F
			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			// Token: 0x0600110E RID: 4366 RVA: 0x0004139C File Offset: 0x0003F59C
			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			// Token: 0x0600110F RID: 4367 RVA: 0x000413C8 File Offset: 0x0003F5C8
			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			// Token: 0x06001110 RID: 4368 RVA: 0x000413F4 File Offset: 0x0003F5F4
			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			// Token: 0x06001111 RID: 4369 RVA: 0x00041421 File Offset: 0x0003F621
			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			// Token: 0x06001112 RID: 4370 RVA: 0x0004144D File Offset: 0x0003F64D
			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001113 RID: 4371 RVA: 0x00041478 File Offset: 0x0003F678
			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001114 RID: 4372 RVA: 0x000414A4 File Offset: 0x0003F6A4
			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001115 RID: 4373 RVA: 0x000414D0 File Offset: 0x0003F6D0
			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001116 RID: 4374 RVA: 0x000414FB File Offset: 0x0003F6FB
			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001117 RID: 4375 RVA: 0x00041526 File Offset: 0x0003F726
			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			// Token: 0x06001118 RID: 4376 RVA: 0x00041550 File Offset: 0x0003F750
			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001119 RID: 4377 RVA: 0x0004157C File Offset: 0x0003F77C
			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			// Token: 0x0600111A RID: 4378 RVA: 0x000415A7 File Offset: 0x0003F7A7
			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			// Token: 0x0600111B RID: 4379 RVA: 0x000415D8 File Offset: 0x0003F7D8
			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x0600111C RID: 4380 RVA: 0x00041605 File Offset: 0x0003F805
			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			// Token: 0x0600111D RID: 4381 RVA: 0x00041631 File Offset: 0x0003F831
			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			// Token: 0x0600111E RID: 4382 RVA: 0x0004165D File Offset: 0x0003F85D
			public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			// Token: 0x0600111F RID: 4383 RVA: 0x00041688 File Offset: 0x0003F888
			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001120 RID: 4384 RVA: 0x000416B4 File Offset: 0x0003F8B4
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001121 RID: 4385 RVA: 0x000416E0 File Offset: 0x0003F8E0
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			// Token: 0x06001122 RID: 4386 RVA: 0x0004170A File Offset: 0x0003F90A
			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x06001123 RID: 4387 RVA: 0x00041736 File Offset: 0x0003F936
			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x06001124 RID: 4388 RVA: 0x00041762 File Offset: 0x0003F962
			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x06001125 RID: 4389 RVA: 0x0004178E File Offset: 0x0003F98E
			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x06001126 RID: 4390 RVA: 0x000417BA File Offset: 0x0003F9BA
			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001127 RID: 4391 RVA: 0x000417E5 File Offset: 0x0003F9E5
			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001128 RID: 4392 RVA: 0x00041810 File Offset: 0x0003FA10
			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			// Token: 0x06001129 RID: 4393 RVA: 0x0004183A File Offset: 0x0003FA3A
			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			// Token: 0x0600112A RID: 4394 RVA: 0x00041866 File Offset: 0x0003FA66
			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			// Token: 0x0600112B RID: 4395 RVA: 0x00041893 File Offset: 0x0003FA93
			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			// Token: 0x0600112C RID: 4396 RVA: 0x000418C0 File Offset: 0x0003FAC0
			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			// Token: 0x0600112D RID: 4397 RVA: 0x000418EB File Offset: 0x0003FAEB
			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			// Token: 0x0600112E RID: 4398 RVA: 0x00041915 File Offset: 0x0003FB15
			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			// Token: 0x0600112F RID: 4399 RVA: 0x0004193F File Offset: 0x0003FB3F
			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			// Token: 0x06001130 RID: 4400 RVA: 0x00041969 File Offset: 0x0003FB69
			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			// Token: 0x06001131 RID: 4401 RVA: 0x00041995 File Offset: 0x0003FB95
			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001132 RID: 4402 RVA: 0x000419C0 File Offset: 0x0003FBC0
			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			// Token: 0x06001133 RID: 4403 RVA: 0x000419ED File Offset: 0x0003FBED
			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			// Token: 0x06001134 RID: 4404 RVA: 0x00041A1A File Offset: 0x0003FC1A
			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001135 RID: 4405 RVA: 0x00041A45 File Offset: 0x0003FC45
			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001136 RID: 4406 RVA: 0x00041A70 File Offset: 0x0003FC70
			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001137 RID: 4407 RVA: 0x00041A9B File Offset: 0x0003FC9B
			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001138 RID: 4408 RVA: 0x00041AC6 File Offset: 0x0003FCC6
			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			// Token: 0x06001139 RID: 4409 RVA: 0x00041AF3 File Offset: 0x0003FCF3
			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			// Token: 0x0600113A RID: 4410 RVA: 0x00041B1F File Offset: 0x0003FD1F
			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x0600113B RID: 4411 RVA: 0x00041B4B File Offset: 0x0003FD4B
			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x0600113C RID: 4412 RVA: 0x00041B77 File Offset: 0x0003FD77
			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x0600113D RID: 4413 RVA: 0x00041BA3 File Offset: 0x0003FDA3
			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x0600113E RID: 4414 RVA: 0x00041BD0 File Offset: 0x0003FDD0
			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			// Token: 0x0600113F RID: 4415 RVA: 0x00041BFC File Offset: 0x0003FDFC
			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001140 RID: 4416 RVA: 0x00041C29 File Offset: 0x0003FE29
			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001141 RID: 4417 RVA: 0x00041C56 File Offset: 0x0003FE56
			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			// Token: 0x06001142 RID: 4418 RVA: 0x00041C83 File Offset: 0x0003FE83
			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001143 RID: 4419 RVA: 0x00041CAF File Offset: 0x0003FEAF
			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001144 RID: 4420 RVA: 0x00041CDB File Offset: 0x0003FEDB
			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			// Token: 0x06001145 RID: 4421 RVA: 0x00041D07 File Offset: 0x0003FF07
			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001146 RID: 4422 RVA: 0x00041D32 File Offset: 0x0003FF32
			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001147 RID: 4423 RVA: 0x00041D5D File Offset: 0x0003FF5D
			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001148 RID: 4424 RVA: 0x00041D88 File Offset: 0x0003FF88
			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			// Token: 0x06001149 RID: 4425 RVA: 0x00041DB7 File Offset: 0x0003FFB7
			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			// Token: 0x0600114A RID: 4426 RVA: 0x00041DE2 File Offset: 0x0003FFE2
			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x0600114B RID: 4427 RVA: 0x00041E0F File Offset: 0x0004000F
			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			// Token: 0x0600114C RID: 4428 RVA: 0x00041E44 File Offset: 0x00040044
			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			// Token: 0x0600114D RID: 4429 RVA: 0x00041E73 File Offset: 0x00040073
			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			// Token: 0x0600114E RID: 4430 RVA: 0x00041E9F File Offset: 0x0004009F
			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			// Token: 0x0600114F RID: 4431 RVA: 0x00041ECB File Offset: 0x000400CB
			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			// Token: 0x06001150 RID: 4432 RVA: 0x00041EF7 File Offset: 0x000400F7
			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			// Token: 0x06001151 RID: 4433 RVA: 0x00041F23 File Offset: 0x00040123
			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			// Token: 0x06001152 RID: 4434 RVA: 0x00041F4E File Offset: 0x0004014E
			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			// Token: 0x06001153 RID: 4435 RVA: 0x00041F7B File Offset: 0x0004017B
			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001154 RID: 4436 RVA: 0x00041FAC File Offset: 0x000401AC
			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			// Token: 0x06001155 RID: 4437 RVA: 0x00041FD7 File Offset: 0x000401D7
			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			// Token: 0x06001156 RID: 4438 RVA: 0x00042003 File Offset: 0x00040203
			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			// Token: 0x06001157 RID: 4439 RVA: 0x0004202E File Offset: 0x0004022E
			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x06001158 RID: 4440 RVA: 0x00042059 File Offset: 0x00040259
			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			// Token: 0x06001159 RID: 4441 RVA: 0x00042086 File Offset: 0x00040286
			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			// Token: 0x0600115A RID: 4442 RVA: 0x000420B3 File Offset: 0x000402B3
			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			// Token: 0x0600115B RID: 4443 RVA: 0x000420E2 File Offset: 0x000402E2
			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x0600115C RID: 4444 RVA: 0x00042111 File Offset: 0x00040311
			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x0600115D RID: 4445 RVA: 0x0004213C File Offset: 0x0004033C
			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			// Token: 0x0600115E RID: 4446 RVA: 0x00042168 File Offset: 0x00040368
			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			// Token: 0x0600115F RID: 4447 RVA: 0x00042195 File Offset: 0x00040395
			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			// Token: 0x06001160 RID: 4448 RVA: 0x000421C2 File Offset: 0x000403C2
			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			// Token: 0x06001161 RID: 4449 RVA: 0x000421F7 File Offset: 0x000403F7
			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			// Token: 0x06001162 RID: 4450 RVA: 0x00042226 File Offset: 0x00040426
			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			// Token: 0x06001163 RID: 4451 RVA: 0x00042250 File Offset: 0x00040450
			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			// Token: 0x06001164 RID: 4452 RVA: 0x0004227C File Offset: 0x0004047C
			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			// Token: 0x06001165 RID: 4453 RVA: 0x000422BE File Offset: 0x000404BE
			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			// Token: 0x06001166 RID: 4454 RVA: 0x000422E8 File Offset: 0x000404E8
			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x06001167 RID: 4455 RVA: 0x00042314 File Offset: 0x00040514
			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001168 RID: 4456 RVA: 0x00042343 File Offset: 0x00040543
			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			// Token: 0x06001169 RID: 4457 RVA: 0x0004236E File Offset: 0x0004056E
			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x0600116A RID: 4458 RVA: 0x0004239B File Offset: 0x0004059B
			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x0600116B RID: 4459 RVA: 0x000423C8 File Offset: 0x000405C8
			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			// Token: 0x0600116C RID: 4460 RVA: 0x000423F2 File Offset: 0x000405F2
			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			// Token: 0x0600116D RID: 4461 RVA: 0x0004241C File Offset: 0x0004061C
			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			// Token: 0x0600116E RID: 4462 RVA: 0x00042449 File Offset: 0x00040649
			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			// Token: 0x0600116F RID: 4463 RVA: 0x00042475 File Offset: 0x00040675
			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			// Token: 0x06001170 RID: 4464 RVA: 0x0004249F File Offset: 0x0004069F
			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			// Token: 0x06001171 RID: 4465 RVA: 0x000424CC File Offset: 0x000406CC
			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			// Token: 0x06001172 RID: 4466 RVA: 0x000424FB File Offset: 0x000406FB
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			// Token: 0x06001173 RID: 4467 RVA: 0x0004252A File Offset: 0x0004072A
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			// Token: 0x06001174 RID: 4468 RVA: 0x00042559 File Offset: 0x00040759
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			// Token: 0x06001175 RID: 4469 RVA: 0x00042588 File Offset: 0x00040788
			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			// Token: 0x06001176 RID: 4470 RVA: 0x000425B4 File Offset: 0x000407B4
			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			// Token: 0x06001177 RID: 4471 RVA: 0x000425DF File Offset: 0x000407DF
			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			// Token: 0x06001178 RID: 4472 RVA: 0x0004260A File Offset: 0x0004080A
			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			// Token: 0x06001179 RID: 4473 RVA: 0x00042635 File Offset: 0x00040835
			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			// Token: 0x0600117A RID: 4474 RVA: 0x00042662 File Offset: 0x00040862
			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			// Token: 0x0600117B RID: 4475 RVA: 0x0004268C File Offset: 0x0004088C
			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			// Token: 0x0600117C RID: 4476 RVA: 0x000426B6 File Offset: 0x000408B6
			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			// Token: 0x0600117D RID: 4477 RVA: 0x000426E1 File Offset: 0x000408E1
			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			// Token: 0x0600117E RID: 4478 RVA: 0x0004270C File Offset: 0x0004090C
			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			// Token: 0x0600117F RID: 4479 RVA: 0x00042737 File Offset: 0x00040937
			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			// Token: 0x06001180 RID: 4480 RVA: 0x00042762 File Offset: 0x00040962
			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			// Token: 0x06001181 RID: 4481 RVA: 0x00042795 File Offset: 0x00040995
			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			// Token: 0x06001182 RID: 4482 RVA: 0x000427C0 File Offset: 0x000409C0
			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			// Token: 0x06001183 RID: 4483 RVA: 0x000427EB File Offset: 0x000409EB
			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			// Token: 0x06001184 RID: 4484 RVA: 0x00042816 File Offset: 0x00040A16
			public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			// Token: 0x06001185 RID: 4485 RVA: 0x00042841 File Offset: 0x00040A41
			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			// Token: 0x06001186 RID: 4486 RVA: 0x0004286C File Offset: 0x00040A6C
			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			// Token: 0x06001187 RID: 4487 RVA: 0x00042896 File Offset: 0x00040A96
			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			// Token: 0x06001188 RID: 4488 RVA: 0x000428C0 File Offset: 0x00040AC0
			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			// Token: 0x06001189 RID: 4489 RVA: 0x000428EA File Offset: 0x00040AEA
			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			// Token: 0x0600118A RID: 4490 RVA: 0x00042914 File Offset: 0x00040B14
			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			// Token: 0x0600118B RID: 4491 RVA: 0x0004293E File Offset: 0x00040B3E
			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			// Token: 0x0600118C RID: 4492 RVA: 0x00042968 File Offset: 0x00040B68
			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			// Token: 0x0600118D RID: 4493 RVA: 0x00042993 File Offset: 0x00040B93
			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			// Token: 0x0600118E RID: 4494 RVA: 0x000429BE File Offset: 0x00040BBE
			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			// Token: 0x0600118F RID: 4495 RVA: 0x000429E9 File Offset: 0x00040BE9
			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			// Token: 0x06001190 RID: 4496 RVA: 0x00042A14 File Offset: 0x00040C14
			public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			// Token: 0x06001191 RID: 4497 RVA: 0x00042A3F File Offset: 0x00040C3F
			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			// Token: 0x06001192 RID: 4498 RVA: 0x00042A6A File Offset: 0x00040C6A
			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			// Token: 0x06001193 RID: 4499 RVA: 0x00042A95 File Offset: 0x00040C95
			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			// Token: 0x06001194 RID: 4500 RVA: 0x00042ABF File Offset: 0x00040CBF
			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			// Token: 0x06001195 RID: 4501 RVA: 0x00042AEB File Offset: 0x00040CEB
			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			// Token: 0x06001196 RID: 4502 RVA: 0x00042B16 File Offset: 0x00040D16
			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			// Token: 0x06001197 RID: 4503 RVA: 0x00042B41 File Offset: 0x00040D41
			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			// Token: 0x06001198 RID: 4504 RVA: 0x00042B6C File Offset: 0x00040D6C
			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			// Token: 0x06001199 RID: 4505 RVA: 0x00042B9B File Offset: 0x00040D9B
			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			// Token: 0x0600119A RID: 4506 RVA: 0x00042BC5 File Offset: 0x00040DC5
			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			// Token: 0x0600119B RID: 4507 RVA: 0x00042BF0 File Offset: 0x00040DF0
			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			// Token: 0x0600119C RID: 4508 RVA: 0x00042C1D File Offset: 0x00040E1D
			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x0600119D RID: 4509 RVA: 0x00042C4A File Offset: 0x00040E4A
			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x0600119E RID: 4510 RVA: 0x00042C77 File Offset: 0x00040E77
			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x0600119F RID: 4511 RVA: 0x00042CA2 File Offset: 0x00040EA2
			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x060011A0 RID: 4512 RVA: 0x00042CCD File Offset: 0x00040ECD
			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x060011A1 RID: 4513 RVA: 0x00042CF9 File Offset: 0x00040EF9
			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			// Token: 0x060011A2 RID: 4514 RVA: 0x00042D25 File Offset: 0x00040F25
			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			// Token: 0x060011A3 RID: 4515 RVA: 0x00042D4F File Offset: 0x00040F4F
			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			// Token: 0x060011A4 RID: 4516 RVA: 0x00042D79 File Offset: 0x00040F79
			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			// Token: 0x060011A5 RID: 4517 RVA: 0x00042DA3 File Offset: 0x00040FA3
			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			// Token: 0x060011A6 RID: 4518 RVA: 0x00042DD2 File Offset: 0x00040FD2
			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			// Token: 0x060011A7 RID: 4519 RVA: 0x00042E01 File Offset: 0x00041001
			public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			// Token: 0x060011A8 RID: 4520 RVA: 0x00042E2C File Offset: 0x0004102C
			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			// Token: 0x060011A9 RID: 4521 RVA: 0x00042E57 File Offset: 0x00041057
			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux32.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			// Token: 0x060011AA RID: 4522 RVA: 0x00042E81 File Offset: 0x00041081
			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			// Token: 0x060011AB RID: 4523 RVA: 0x00042EAC File Offset: 0x000410AC
			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			// Token: 0x060011AC RID: 4524 RVA: 0x00042ED7 File Offset: 0x000410D7
			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x060011AD RID: 4525 RVA: 0x00042F02 File Offset: 0x00041102
			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060011AE RID: 4526 RVA: 0x00042F2F File Offset: 0x0004112F
			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060011AF RID: 4527 RVA: 0x00042F5C File Offset: 0x0004115C
			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x060011B0 RID: 4528 RVA: 0x00042F89 File Offset: 0x00041189
			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			// Token: 0x060011B1 RID: 4529 RVA: 0x00042FB6 File Offset: 0x000411B6
			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			// Token: 0x060011B2 RID: 4530 RVA: 0x00042FE3 File Offset: 0x000411E3
			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x060011B3 RID: 4531 RVA: 0x00043012 File Offset: 0x00041212
			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x060011B4 RID: 4532 RVA: 0x0004303E File Offset: 0x0004123E
			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x060011B5 RID: 4533 RVA: 0x0004306A File Offset: 0x0004126A
			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux32.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x060011B6 RID: 4534 RVA: 0x00043095 File Offset: 0x00041295
			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Linux32.Native.SteamAPI_Init();
			}

			// Token: 0x060011B7 RID: 4535 RVA: 0x0004309C File Offset: 0x0004129C
			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Linux32.Native.SteamAPI_RunCallbacks();
			}

			// Token: 0x060011B8 RID: 4536 RVA: 0x000430A3 File Offset: 0x000412A3
			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Linux32.Native.SteamGameServer_RunCallbacks();
			}

			// Token: 0x060011B9 RID: 4537 RVA: 0x000430AA File Offset: 0x000412AA
			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Linux32.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			// Token: 0x060011BA RID: 4538 RVA: 0x000430B3 File Offset: 0x000412B3
			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Linux32.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			// Token: 0x060011BB RID: 4539 RVA: 0x000430BB File Offset: 0x000412BB
			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux32.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			// Token: 0x060011BC RID: 4540 RVA: 0x000430C4 File Offset: 0x000412C4
			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux32.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			// Token: 0x060011BD RID: 4541 RVA: 0x000430CD File Offset: 0x000412CD
			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Linux32.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			// Token: 0x060011BE RID: 4542 RVA: 0x000430DD File Offset: 0x000412DD
			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Linux32.Native.SteamAPI_Shutdown();
			}

			// Token: 0x060011BF RID: 4543 RVA: 0x000430E4 File Offset: 0x000412E4
			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Linux32.Native.SteamGameServer_Shutdown();
			}

			// Token: 0x060011C0 RID: 4544 RVA: 0x000430EB File Offset: 0x000412EB
			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Linux32.Native.SteamAPI_GetHSteamUser();
			}

			// Token: 0x060011C1 RID: 4545 RVA: 0x000430F2 File Offset: 0x000412F2
			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Linux32.Native.SteamAPI_GetHSteamPipe();
			}

			// Token: 0x060011C2 RID: 4546 RVA: 0x000430F9 File Offset: 0x000412F9
			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Linux32.Native.SteamGameServer_GetHSteamUser();
			}

			// Token: 0x060011C3 RID: 4547 RVA: 0x00043100 File Offset: 0x00041300
			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Linux32.Native.SteamGameServer_GetHSteamPipe();
			}

			// Token: 0x060011C4 RID: 4548 RVA: 0x00043107 File Offset: 0x00041307
			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Linux32.Native.SteamInternal_CreateInterface(version);
			}

			// Token: 0x060011C5 RID: 4549 RVA: 0x0004310F File Offset: 0x0004130F
			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Linux32.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			// Token: 0x04000930 RID: 2352
			internal IntPtr _ptr;

			// Token: 0x020002B4 RID: 692
			internal static class Native
			{
				// Token: 0x06001FB4 RID: 8116
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				// Token: 0x06001FB5 RID: 8117
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06001FB6 RID: 8118
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06001FB7 RID: 8119
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				// Token: 0x06001FB8 RID: 8120
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				// Token: 0x06001FB9 RID: 8121
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FBA RID: 8122
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FBB RID: 8123
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				// Token: 0x06001FBC RID: 8124
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FBD RID: 8125
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				// Token: 0x06001FBE RID: 8126
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FBF RID: 8127
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC0 RID: 8128
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC1 RID: 8129
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC2 RID: 8130
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC3 RID: 8131
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC4 RID: 8132
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC5 RID: 8133
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC6 RID: 8134
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FC7 RID: 8135
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				// Token: 0x06001FC8 RID: 8136
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				// Token: 0x06001FC9 RID: 8137
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				// Token: 0x06001FCA RID: 8138
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FCB RID: 8139
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FCC RID: 8140
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FCD RID: 8141
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FCE RID: 8142
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FCF RID: 8143
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FD0 RID: 8144
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FD1 RID: 8145
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FD2 RID: 8146
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FD3 RID: 8147
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06001FD4 RID: 8148
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				// Token: 0x06001FD5 RID: 8149
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				// Token: 0x06001FD6 RID: 8150
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				// Token: 0x06001FD7 RID: 8151
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

				// Token: 0x06001FD8 RID: 8152
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				// Token: 0x06001FD9 RID: 8153
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				// Token: 0x06001FDA RID: 8154
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				// Token: 0x06001FDB RID: 8155
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06001FDC RID: 8156
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06001FDD RID: 8157
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06001FDE RID: 8158
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, [MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06001FDF RID: 8159
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				// Token: 0x06001FE0 RID: 8160
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				// Token: 0x06001FE1 RID: 8161
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06001FE2 RID: 8162
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x06001FE3 RID: 8163
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				// Token: 0x06001FE4 RID: 8164
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				// Token: 0x06001FE5 RID: 8165
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				// Token: 0x06001FE6 RID: 8166
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				// Token: 0x06001FE7 RID: 8167
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				// Token: 0x06001FE8 RID: 8168
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				// Token: 0x06001FE9 RID: 8169
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06001FEA RID: 8170
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

				// Token: 0x06001FEB RID: 8171
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				// Token: 0x06001FEC RID: 8172
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				// Token: 0x06001FED RID: 8173
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				// Token: 0x06001FEE RID: 8174
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				// Token: 0x06001FEF RID: 8175
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				// Token: 0x06001FF0 RID: 8176
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				// Token: 0x06001FF1 RID: 8177
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				// Token: 0x06001FF2 RID: 8178
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				// Token: 0x06001FF3 RID: 8179
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				// Token: 0x06001FF4 RID: 8180
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				// Token: 0x06001FF5 RID: 8181
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				// Token: 0x06001FF6 RID: 8182
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06001FF7 RID: 8183
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06001FF8 RID: 8184
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06001FF9 RID: 8185
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t.PackSmall pFriendGameInfo);

				// Token: 0x06001FFA RID: 8186
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				// Token: 0x06001FFB RID: 8187
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06001FFC RID: 8188
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				// Token: 0x06001FFD RID: 8189
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				// Token: 0x06001FFE RID: 8190
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				// Token: 0x06001FFF RID: 8191
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x06002000 RID: 8192
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x06002001 RID: 8193
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				// Token: 0x06002002 RID: 8194
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				// Token: 0x06002003 RID: 8195
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				// Token: 0x06002004 RID: 8196
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				// Token: 0x06002005 RID: 8197
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002006 RID: 8198
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002007 RID: 8199
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				// Token: 0x06002008 RID: 8200
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				// Token: 0x06002009 RID: 8201
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				// Token: 0x0600200A RID: 8202
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				// Token: 0x0600200B RID: 8203
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				// Token: 0x0600200C RID: 8204
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

				// Token: 0x0600200D RID: 8205
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				// Token: 0x0600200E RID: 8206
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				// Token: 0x0600200F RID: 8207
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				// Token: 0x06002010 RID: 8208
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				// Token: 0x06002011 RID: 8209
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				// Token: 0x06002012 RID: 8210
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				// Token: 0x06002013 RID: 8211
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002014 RID: 8212
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002015 RID: 8213
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002016 RID: 8214
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

				// Token: 0x06002017 RID: 8215
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002018 RID: 8216
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002019 RID: 8217
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600201A RID: 8218
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				// Token: 0x0600201B RID: 8219
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				// Token: 0x0600201C RID: 8220
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				// Token: 0x0600201D RID: 8221
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				// Token: 0x0600201E RID: 8222
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				// Token: 0x0600201F RID: 8223
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002020 RID: 8224
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				// Token: 0x06002021 RID: 8225
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002022 RID: 8226
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				// Token: 0x06002023 RID: 8227
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				// Token: 0x06002024 RID: 8228
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				// Token: 0x06002025 RID: 8229
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002026 RID: 8230
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002027 RID: 8231
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002028 RID: 8232
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002029 RID: 8233
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600202A RID: 8234
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				// Token: 0x0600202B RID: 8235
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				// Token: 0x0600202C RID: 8236
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				// Token: 0x0600202D RID: 8237
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				// Token: 0x0600202E RID: 8238
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x0600202F RID: 8239
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002030 RID: 8240
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002031 RID: 8241
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

				// Token: 0x06002032 RID: 8242
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				// Token: 0x06002033 RID: 8243
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x06002034 RID: 8244
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x06002035 RID: 8245
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x06002036 RID: 8246
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				// Token: 0x06002037 RID: 8247
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002038 RID: 8248
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002039 RID: 8249
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				// Token: 0x0600203A RID: 8250
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				// Token: 0x0600203B RID: 8251
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				// Token: 0x0600203C RID: 8252
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				// Token: 0x0600203D RID: 8253
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				// Token: 0x0600203E RID: 8254
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				// Token: 0x0600203F RID: 8255
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				// Token: 0x06002040 RID: 8256
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				// Token: 0x06002041 RID: 8257
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				// Token: 0x06002042 RID: 8258
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				// Token: 0x06002043 RID: 8259
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				// Token: 0x06002044 RID: 8260
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x06002045 RID: 8261
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				// Token: 0x06002046 RID: 8262
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x06002047 RID: 8263
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				// Token: 0x06002048 RID: 8264
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				// Token: 0x06002049 RID: 8265
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				// Token: 0x0600204A RID: 8266
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				// Token: 0x0600204B RID: 8267
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				// Token: 0x0600204C RID: 8268
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				// Token: 0x0600204D RID: 8269
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				// Token: 0x0600204E RID: 8270
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				// Token: 0x0600204F RID: 8271
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				// Token: 0x06002050 RID: 8272
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				// Token: 0x06002051 RID: 8273
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				// Token: 0x06002052 RID: 8274
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				// Token: 0x06002053 RID: 8275
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				// Token: 0x06002054 RID: 8276
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				// Token: 0x06002055 RID: 8277
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x06002056 RID: 8278
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				// Token: 0x06002057 RID: 8279
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				// Token: 0x06002058 RID: 8280
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				// Token: 0x06002059 RID: 8281
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				// Token: 0x0600205A RID: 8282
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				// Token: 0x0600205B RID: 8283
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x0600205C RID: 8284
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x0600205D RID: 8285
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				// Token: 0x0600205E RID: 8286
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				// Token: 0x0600205F RID: 8287
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				// Token: 0x06002060 RID: 8288
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				// Token: 0x06002061 RID: 8289
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002062 RID: 8290
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				// Token: 0x06002063 RID: 8291
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				// Token: 0x06002064 RID: 8292
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002065 RID: 8293
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002066 RID: 8294
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				// Token: 0x06002067 RID: 8295
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002068 RID: 8296
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				// Token: 0x06002069 RID: 8297
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x0600206A RID: 8298
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x0600206B RID: 8299
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x0600206C RID: 8300
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				// Token: 0x0600206D RID: 8301
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x0600206E RID: 8302
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				// Token: 0x0600206F RID: 8303
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x06002070 RID: 8304
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				// Token: 0x06002071 RID: 8305
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x06002072 RID: 8306
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002073 RID: 8307
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				// Token: 0x06002074 RID: 8308
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				// Token: 0x06002075 RID: 8309
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				// Token: 0x06002076 RID: 8310
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002077 RID: 8311
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				// Token: 0x06002078 RID: 8312
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

				// Token: 0x06002079 RID: 8313
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x0600207A RID: 8314
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				// Token: 0x0600207B RID: 8315
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				// Token: 0x0600207C RID: 8316
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600207D RID: 8317
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				// Token: 0x0600207E RID: 8318
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600207F RID: 8319
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002080 RID: 8320
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002081 RID: 8321
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002082 RID: 8322
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				// Token: 0x06002083 RID: 8323
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002084 RID: 8324
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002085 RID: 8325
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002086 RID: 8326
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002087 RID: 8327
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002088 RID: 8328
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002089 RID: 8329
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x0600208A RID: 8330
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x0600208B RID: 8331
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x0600208C RID: 8332
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				// Token: 0x0600208D RID: 8333
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				// Token: 0x0600208E RID: 8334
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				// Token: 0x0600208F RID: 8335
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				// Token: 0x06002090 RID: 8336
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				// Token: 0x06002091 RID: 8337
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				// Token: 0x06002092 RID: 8338
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002093 RID: 8339
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002094 RID: 8340
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002095 RID: 8341
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				// Token: 0x06002096 RID: 8342
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002097 RID: 8343
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				// Token: 0x06002098 RID: 8344
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002099 RID: 8345
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x0600209A RID: 8346
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600209B RID: 8347
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600209C RID: 8348
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600209D RID: 8349
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600209E RID: 8350
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600209F RID: 8351
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				// Token: 0x060020A0 RID: 8352
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				// Token: 0x060020A1 RID: 8353
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				// Token: 0x060020A2 RID: 8354
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				// Token: 0x060020A3 RID: 8355
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				// Token: 0x060020A4 RID: 8356
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x060020A5 RID: 8357
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				// Token: 0x060020A6 RID: 8358
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				// Token: 0x060020A7 RID: 8359
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				// Token: 0x060020A8 RID: 8360
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				// Token: 0x060020A9 RID: 8361
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				// Token: 0x060020AA RID: 8362
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				// Token: 0x060020AB RID: 8363
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags, WorkshopFileType eWorkshopFileType);

				// Token: 0x060020AC RID: 8364
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060020AD RID: 8365
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				// Token: 0x060020AE RID: 8366
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				// Token: 0x060020AF RID: 8367
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				// Token: 0x060020B0 RID: 8368
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				// Token: 0x060020B1 RID: 8369
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x060020B2 RID: 8370
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x060020B3 RID: 8371
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				// Token: 0x060020B4 RID: 8372
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				// Token: 0x060020B5 RID: 8373
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060020B6 RID: 8374
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x060020B7 RID: 8375
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060020B8 RID: 8376
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x060020B9 RID: 8377
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060020BA RID: 8378
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				// Token: 0x060020BB RID: 8379
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060020BC RID: 8380
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x060020BD RID: 8381
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060020BE RID: 8382
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t.PackSmall pRequiredTags, ref SteamParamStringArray_t.PackSmall pExcludedTags);

				// Token: 0x060020BF RID: 8383
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x060020C0 RID: 8384
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				// Token: 0x060020C1 RID: 8385
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				// Token: 0x060020C2 RID: 8386
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t.PackSmall pTags, ref SteamParamStringArray_t.PackSmall pUserTags);

				// Token: 0x060020C3 RID: 8387
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				// Token: 0x060020C4 RID: 8388
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				// Token: 0x060020C5 RID: 8389
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				// Token: 0x060020C6 RID: 8390
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				// Token: 0x060020C7 RID: 8391
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				// Token: 0x060020C8 RID: 8392
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				// Token: 0x060020C9 RID: 8393
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x060020CA RID: 8394
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060020CB RID: 8395
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x060020CC RID: 8396
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x060020CD RID: 8397
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x060020CE RID: 8398
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				// Token: 0x060020CF RID: 8399
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				// Token: 0x060020D0 RID: 8400
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				// Token: 0x060020D1 RID: 8401
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				// Token: 0x060020D2 RID: 8402
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				// Token: 0x060020D3 RID: 8403
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				// Token: 0x060020D4 RID: 8404
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				// Token: 0x060020D5 RID: 8405
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x060020D6 RID: 8406
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x060020D7 RID: 8407
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060020D8 RID: 8408
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x060020D9 RID: 8409
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

				// Token: 0x060020DA RID: 8410
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				// Token: 0x060020DB RID: 8411
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				// Token: 0x060020DC RID: 8412
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x060020DD RID: 8413
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x060020DE RID: 8414
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x060020DF RID: 8415
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x060020E0 RID: 8416
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				// Token: 0x060020E1 RID: 8417
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				// Token: 0x060020E2 RID: 8418
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t.PackSmall pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				// Token: 0x060020E3 RID: 8419
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				// Token: 0x060020E4 RID: 8420
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				// Token: 0x060020E5 RID: 8421
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				// Token: 0x060020E6 RID: 8422
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				// Token: 0x060020E7 RID: 8423
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060020E8 RID: 8424
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060020E9 RID: 8425
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				// Token: 0x060020EA RID: 8426
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				// Token: 0x060020EB RID: 8427
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				// Token: 0x060020EC RID: 8428
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				// Token: 0x060020ED RID: 8429
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				// Token: 0x060020EE RID: 8430
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				// Token: 0x060020EF RID: 8431
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				// Token: 0x060020F0 RID: 8432
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				// Token: 0x060020F1 RID: 8433
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				// Token: 0x060020F2 RID: 8434
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				// Token: 0x060020F3 RID: 8435
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				// Token: 0x060020F4 RID: 8436
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				// Token: 0x060020F5 RID: 8437
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				// Token: 0x060020F6 RID: 8438
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x060020F7 RID: 8439
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060020F8 RID: 8440
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				// Token: 0x060020F9 RID: 8441
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				// Token: 0x060020FA RID: 8442
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x060020FB RID: 8443
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060020FC RID: 8444
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060020FD RID: 8445
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060020FE RID: 8446
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x060020FF RID: 8447
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

				// Token: 0x06002100 RID: 8448
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				// Token: 0x06002101 RID: 8449
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				// Token: 0x06002102 RID: 8450
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x06002103 RID: 8451
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				// Token: 0x06002104 RID: 8452
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				// Token: 0x06002105 RID: 8453
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x06002106 RID: 8454
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				// Token: 0x06002107 RID: 8455
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				// Token: 0x06002108 RID: 8456
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				// Token: 0x06002109 RID: 8457
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				// Token: 0x0600210A RID: 8458
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				// Token: 0x0600210B RID: 8459
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				// Token: 0x0600210C RID: 8460
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x0600210D RID: 8461
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x0600210E RID: 8462
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				// Token: 0x0600210F RID: 8463
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t.PackSmall pConnectionState);

				// Token: 0x06002110 RID: 8464
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, [MarshalAs(UnmanagedType.U1)] bool bAllow);

				// Token: 0x06002111 RID: 8465
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x06002112 RID: 8466
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x06002113 RID: 8467
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				// Token: 0x06002114 RID: 8468
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x06002115 RID: 8469
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x06002116 RID: 8470
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

				// Token: 0x06002117 RID: 8471
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				// Token: 0x06002118 RID: 8472
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				// Token: 0x06002119 RID: 8473
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x0600211A RID: 8474
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x0600211B RID: 8475
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				// Token: 0x0600211C RID: 8476
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				// Token: 0x0600211D RID: 8477
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x0600211E RID: 8478
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x0600211F RID: 8479
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				// Token: 0x06002120 RID: 8480
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				// Token: 0x06002121 RID: 8481
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				// Token: 0x06002122 RID: 8482
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, [MarshalAs(UnmanagedType.U1)] bool bHook);

				// Token: 0x06002123 RID: 8483
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				// Token: 0x06002124 RID: 8484
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				// Token: 0x06002125 RID: 8485
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				// Token: 0x06002126 RID: 8486
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				// Token: 0x06002127 RID: 8487
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				// Token: 0x06002128 RID: 8488
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				// Token: 0x06002129 RID: 8489
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				// Token: 0x0600212A RID: 8490
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				// Token: 0x0600212B RID: 8491
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				// Token: 0x0600212C RID: 8492
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				// Token: 0x0600212D RID: 8493
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				// Token: 0x0600212E RID: 8494
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				// Token: 0x0600212F RID: 8495
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				// Token: 0x06002130 RID: 8496
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				// Token: 0x06002131 RID: 8497
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				// Token: 0x06002132 RID: 8498
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x06002133 RID: 8499
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x06002134 RID: 8500
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002135 RID: 8501
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				// Token: 0x06002136 RID: 8502
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x06002137 RID: 8503
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002138 RID: 8504
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002139 RID: 8505
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600213A RID: 8506
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600213B RID: 8507
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600213C RID: 8508
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600213D RID: 8509
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				// Token: 0x0600213E RID: 8510
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600213F RID: 8511
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002140 RID: 8512
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				// Token: 0x06002141 RID: 8513
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002142 RID: 8514
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bAvailable);

				// Token: 0x06002143 RID: 8515
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				// Token: 0x06002144 RID: 8516
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				// Token: 0x06002145 RID: 8517
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x06002146 RID: 8518
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002147 RID: 8519
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002148 RID: 8520
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				// Token: 0x06002149 RID: 8521
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x0600214A RID: 8522
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x0600214B RID: 8523
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x0600214C RID: 8524
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x0600214D RID: 8525
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				// Token: 0x0600214E RID: 8526
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x0600214F RID: 8527
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x06002150 RID: 8528
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002151 RID: 8529
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				// Token: 0x06002152 RID: 8530
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				// Token: 0x06002153 RID: 8531
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				// Token: 0x06002154 RID: 8532
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				// Token: 0x06002155 RID: 8533
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				// Token: 0x06002156 RID: 8534
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x06002157 RID: 8535
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x06002158 RID: 8536
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002159 RID: 8537
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x0600215A RID: 8538
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				// Token: 0x0600215B RID: 8539
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				// Token: 0x0600215C RID: 8540
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				// Token: 0x0600215D RID: 8541
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x0600215E RID: 8542
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x0600215F RID: 8543
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002160 RID: 8544
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				// Token: 0x06002161 RID: 8545
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				// Token: 0x06002162 RID: 8546
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

				// Token: 0x06002163 RID: 8547
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				// Token: 0x06002164 RID: 8548
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				// Token: 0x06002165 RID: 8549
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				// Token: 0x06002166 RID: 8550
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				// Token: 0x06002167 RID: 8551
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

				// Token: 0x06002168 RID: 8552
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				// Token: 0x06002169 RID: 8553
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

				// Token: 0x0600216A RID: 8554
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				// Token: 0x0600216B RID: 8555
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				// Token: 0x0600216C RID: 8556
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				// Token: 0x0600216D RID: 8557
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				// Token: 0x0600216E RID: 8558
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x0600216F RID: 8559
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				// Token: 0x06002170 RID: 8560
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				// Token: 0x06002171 RID: 8561
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002172 RID: 8562
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x06002173 RID: 8563
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x06002174 RID: 8564
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002175 RID: 8565
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				// Token: 0x06002176 RID: 8566
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x06002177 RID: 8567
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				// Token: 0x06002178 RID: 8568
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x06002179 RID: 8569
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x0600217A RID: 8570
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				// Token: 0x0600217B RID: 8571
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x0600217C RID: 8572
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				// Token: 0x0600217D RID: 8573
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				// Token: 0x0600217E RID: 8574
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				// Token: 0x0600217F RID: 8575
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				// Token: 0x06002180 RID: 8576
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				// Token: 0x06002181 RID: 8577
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				// Token: 0x06002182 RID: 8578
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				// Token: 0x06002183 RID: 8579
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002184 RID: 8580
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002185 RID: 8581
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002186 RID: 8582
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002187 RID: 8583
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002188 RID: 8584
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002189 RID: 8585
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x0600218A RID: 8586
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x0600218B RID: 8587
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x0600218C RID: 8588
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x0600218D RID: 8589
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t.PackSmall pDetails);

				// Token: 0x0600218E RID: 8590
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				// Token: 0x0600218F RID: 8591
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				// Token: 0x06002190 RID: 8592
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x06002191 RID: 8593
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				// Token: 0x06002192 RID: 8594
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002193 RID: 8595
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				// Token: 0x06002194 RID: 8596
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002195 RID: 8597
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				// Token: 0x06002196 RID: 8598
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x06002197 RID: 8599
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002198 RID: 8600
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002199 RID: 8601
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

				// Token: 0x0600219A RID: 8602
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

				// Token: 0x0600219B RID: 8603
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

				// Token: 0x0600219C RID: 8604
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

				// Token: 0x0600219D RID: 8605
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

				// Token: 0x0600219E RID: 8606
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

				// Token: 0x0600219F RID: 8607
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

				// Token: 0x060021A0 RID: 8608
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x060021A1 RID: 8609
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x060021A2 RID: 8610
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				// Token: 0x060021A3 RID: 8611
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				// Token: 0x060021A4 RID: 8612
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

				// Token: 0x060021A5 RID: 8613
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				// Token: 0x060021A6 RID: 8614
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x060021A7 RID: 8615
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				// Token: 0x060021A8 RID: 8616
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				// Token: 0x060021A9 RID: 8617
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				// Token: 0x060021AA RID: 8618
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				// Token: 0x060021AB RID: 8619
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				// Token: 0x060021AC RID: 8620
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				// Token: 0x060021AD RID: 8621
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x060021AE RID: 8622
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				// Token: 0x060021AF RID: 8623
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x060021B0 RID: 8624
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x060021B1 RID: 8625
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				// Token: 0x060021B2 RID: 8626
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				// Token: 0x060021B3 RID: 8627
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				// Token: 0x060021B4 RID: 8628
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				// Token: 0x060021B5 RID: 8629
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				// Token: 0x060021B6 RID: 8630
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				// Token: 0x060021B7 RID: 8631
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				// Token: 0x060021B8 RID: 8632
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				// Token: 0x060021B9 RID: 8633
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x060021BA RID: 8634
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				// Token: 0x060021BB RID: 8635
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				// Token: 0x060021BC RID: 8636
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x060021BD RID: 8637
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060021BE RID: 8638
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x060021BF RID: 8639
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x060021C0 RID: 8640
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060021C1 RID: 8641
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060021C2 RID: 8642
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				// Token: 0x060021C3 RID: 8643
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x060021C4 RID: 8644
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060021C5 RID: 8645
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				// Token: 0x060021C6 RID: 8646
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x060021C7 RID: 8647
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

				// Token: 0x060021C8 RID: 8648
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				// Token: 0x060021C9 RID: 8649
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, [MarshalAs(UnmanagedType.U1)] bool bSuspend);

				// Token: 0x060021CA RID: 8650
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x060021CB RID: 8651
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x060021CC RID: 8652
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				// Token: 0x060021CD RID: 8653
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x060021CE RID: 8654
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x060021CF RID: 8655
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x060021D0 RID: 8656
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x060021D1 RID: 8657
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060021D2 RID: 8658
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060021D3 RID: 8659
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				// Token: 0x060021D4 RID: 8660
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				// Token: 0x060021D5 RID: 8661
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				// Token: 0x060021D6 RID: 8662
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				// Token: 0x060021D7 RID: 8663
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				// Token: 0x060021D8 RID: 8664
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				// Token: 0x060021D9 RID: 8665
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				// Token: 0x060021DA RID: 8666
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				// Token: 0x060021DB RID: 8667
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				// Token: 0x060021DC RID: 8668
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021DD RID: 8669
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				// Token: 0x060021DE RID: 8670
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				// Token: 0x060021DF RID: 8671
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021E0 RID: 8672
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021E1 RID: 8673
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021E2 RID: 8674
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021E3 RID: 8675
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				// Token: 0x060021E4 RID: 8676
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				// Token: 0x060021E5 RID: 8677
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x060021E6 RID: 8678
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x060021E7 RID: 8679
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x060021E8 RID: 8680
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x060021E9 RID: 8681
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				// Token: 0x060021EA RID: 8682
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x060021EB RID: 8683
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x060021EC RID: 8684
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x060021ED RID: 8685
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x060021EE RID: 8686
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x060021EF RID: 8687
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

				// Token: 0x060021F0 RID: 8688
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021F1 RID: 8689
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021F2 RID: 8690
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021F3 RID: 8691
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

				// Token: 0x060021F4 RID: 8692
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060021F5 RID: 8693
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x060021F6 RID: 8694
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

				// Token: 0x060021F7 RID: 8695
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				// Token: 0x060021F8 RID: 8696
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

				// Token: 0x060021F9 RID: 8697
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				// Token: 0x060021FA RID: 8698
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

				// Token: 0x060021FB RID: 8699
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

				// Token: 0x060021FC RID: 8700
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x060021FD RID: 8701
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				// Token: 0x060021FE RID: 8702
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x060021FF RID: 8703
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002200 RID: 8704
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				// Token: 0x06002201 RID: 8705
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002202 RID: 8706
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002203 RID: 8707
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				// Token: 0x06002204 RID: 8708
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				// Token: 0x06002205 RID: 8709
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

				// Token: 0x06002206 RID: 8710
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002207 RID: 8711
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002208 RID: 8712
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				// Token: 0x06002209 RID: 8713
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				// Token: 0x0600220A RID: 8714
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				// Token: 0x0600220B RID: 8715
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				// Token: 0x0600220C RID: 8716
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				// Token: 0x0600220D RID: 8717
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				// Token: 0x0600220E RID: 8718
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				// Token: 0x0600220F RID: 8719
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				// Token: 0x06002210 RID: 8720
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				// Token: 0x06002211 RID: 8721
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x06002212 RID: 8722
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x06002213 RID: 8723
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				// Token: 0x06002214 RID: 8724
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x06002215 RID: 8725
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002216 RID: 8726
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				// Token: 0x06002217 RID: 8727
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				// Token: 0x06002218 RID: 8728
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				// Token: 0x06002219 RID: 8729
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				// Token: 0x0600221A RID: 8730
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				// Token: 0x0600221B RID: 8731
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				// Token: 0x0600221C RID: 8732
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				// Token: 0x0600221D RID: 8733
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600221E RID: 8734
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				// Token: 0x0600221F RID: 8735
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				// Token: 0x06002220 RID: 8736
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				// Token: 0x06002221 RID: 8737
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x06002222 RID: 8738
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				// Token: 0x06002223 RID: 8739
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x06002224 RID: 8740
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				// Token: 0x06002225 RID: 8741
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				// Token: 0x06002226 RID: 8742
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				// Token: 0x06002227 RID: 8743
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x06002228 RID: 8744
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x06002229 RID: 8745
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x0600222A RID: 8746
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x0600222B RID: 8747
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				// Token: 0x0600222C RID: 8748
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				// Token: 0x0600222D RID: 8749
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				// Token: 0x0600222E RID: 8750
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				// Token: 0x0600222F RID: 8751
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bDedicated);

				// Token: 0x06002230 RID: 8752
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				// Token: 0x06002231 RID: 8753
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				// Token: 0x06002232 RID: 8754
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				// Token: 0x06002233 RID: 8755
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				// Token: 0x06002234 RID: 8756
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				// Token: 0x06002235 RID: 8757
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				// Token: 0x06002236 RID: 8758
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				// Token: 0x06002237 RID: 8759
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				// Token: 0x06002238 RID: 8760
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				// Token: 0x06002239 RID: 8761
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				// Token: 0x0600223A RID: 8762
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				// Token: 0x0600223B RID: 8763
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

				// Token: 0x0600223C RID: 8764
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				// Token: 0x0600223D RID: 8765
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				// Token: 0x0600223E RID: 8766
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				// Token: 0x0600223F RID: 8767
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				// Token: 0x06002240 RID: 8768
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				// Token: 0x06002241 RID: 8769
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				// Token: 0x06002242 RID: 8770
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				// Token: 0x06002243 RID: 8771
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				// Token: 0x06002244 RID: 8772
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				// Token: 0x06002245 RID: 8773
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				// Token: 0x06002246 RID: 8774
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				// Token: 0x06002247 RID: 8775
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002248 RID: 8776
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x06002249 RID: 8777
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				// Token: 0x0600224A RID: 8778
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				// Token: 0x0600224B RID: 8779
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				// Token: 0x0600224C RID: 8780
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				// Token: 0x0600224D RID: 8781
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				// Token: 0x0600224E RID: 8782
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				// Token: 0x0600224F RID: 8783
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				// Token: 0x06002250 RID: 8784
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				// Token: 0x06002251 RID: 8785
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				// Token: 0x06002252 RID: 8786
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bActive);

				// Token: 0x06002253 RID: 8787
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				// Token: 0x06002254 RID: 8788
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				// Token: 0x06002255 RID: 8789
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				// Token: 0x06002256 RID: 8790
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				// Token: 0x06002257 RID: 8791
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002258 RID: 8792
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002259 RID: 8793
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x0600225A RID: 8794
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x0600225B RID: 8795
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				// Token: 0x0600225C RID: 8796
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				// Token: 0x0600225D RID: 8797
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x0600225E RID: 8798
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x0600225F RID: 8799
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x06002260 RID: 8800
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002261 RID: 8801
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_Init();

				// Token: 0x06002262 RID: 8802
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_RunCallbacks();

				// Token: 0x06002263 RID: 8803
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamGameServer_RunCallbacks();

				// Token: 0x06002264 RID: 8804
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				// Token: 0x06002265 RID: 8805
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				// Token: 0x06002266 RID: 8806
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002267 RID: 8807
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002268 RID: 8808
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

				// Token: 0x06002269 RID: 8809
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_Shutdown();

				// Token: 0x0600226A RID: 8810
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamGameServer_Shutdown();

				// Token: 0x0600226B RID: 8811
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				// Token: 0x0600226C RID: 8812
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				// Token: 0x0600226D RID: 8813
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				// Token: 0x0600226E RID: 8814
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				// Token: 0x0600226F RID: 8815
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				// Token: 0x06002270 RID: 8816
				[DllImport("libsteam_api.so", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
			}
		}

		// Token: 0x0200018F RID: 399
		internal class Linux64 : Platform.Interface, IDisposable
		{
			// Token: 0x170000B4 RID: 180
			// (get) Token: 0x060011C6 RID: 4550 RVA: 0x00043117 File Offset: 0x00041317
			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			// Token: 0x060011C7 RID: 4551 RVA: 0x00043129 File Offset: 0x00041329
			internal Linux64(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			// Token: 0x060011C8 RID: 4552 RVA: 0x00043138 File Offset: 0x00041338
			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			// Token: 0x060011C9 RID: 4553 RVA: 0x00043145 File Offset: 0x00041345
			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			// Token: 0x060011CA RID: 4554 RVA: 0x0004316F File Offset: 0x0004136F
			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			// Token: 0x060011CB RID: 4555 RVA: 0x0004319A File Offset: 0x0004139A
			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			// Token: 0x060011CC RID: 4556 RVA: 0x000431C5 File Offset: 0x000413C5
			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			// Token: 0x060011CD RID: 4557 RVA: 0x000431F1 File Offset: 0x000413F1
			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			// Token: 0x060011CE RID: 4558 RVA: 0x0004321D File Offset: 0x0004141D
			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011CF RID: 4559 RVA: 0x0004324A File Offset: 0x0004144A
			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D0 RID: 4560 RVA: 0x00043277 File Offset: 0x00041477
			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			// Token: 0x060011D1 RID: 4561 RVA: 0x000432A3 File Offset: 0x000414A3
			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D2 RID: 4562 RVA: 0x000432D0 File Offset: 0x000414D0
			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D3 RID: 4563 RVA: 0x000432FC File Offset: 0x000414FC
			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D4 RID: 4564 RVA: 0x00043329 File Offset: 0x00041529
			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D5 RID: 4565 RVA: 0x00043356 File Offset: 0x00041556
			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D6 RID: 4566 RVA: 0x00043383 File Offset: 0x00041583
			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D7 RID: 4567 RVA: 0x000433B0 File Offset: 0x000415B0
			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D8 RID: 4568 RVA: 0x000433DD File Offset: 0x000415DD
			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011D9 RID: 4569 RVA: 0x0004340A File Offset: 0x0004160A
			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011DA RID: 4570 RVA: 0x00043437 File Offset: 0x00041637
			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011DB RID: 4571 RVA: 0x00043464 File Offset: 0x00041664
			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011DC RID: 4572 RVA: 0x00043491 File Offset: 0x00041691
			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			// Token: 0x060011DD RID: 4573 RVA: 0x000434BB File Offset: 0x000416BB
			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x060011DE RID: 4574 RVA: 0x000434E6 File Offset: 0x000416E6
			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			// Token: 0x060011DF RID: 4575 RVA: 0x00043510 File Offset: 0x00041710
			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E0 RID: 4576 RVA: 0x0004353D File Offset: 0x0004173D
			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E1 RID: 4577 RVA: 0x0004356A File Offset: 0x0004176A
			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E2 RID: 4578 RVA: 0x00043597 File Offset: 0x00041797
			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E3 RID: 4579 RVA: 0x000435C4 File Offset: 0x000417C4
			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E4 RID: 4580 RVA: 0x000435F1 File Offset: 0x000417F1
			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E5 RID: 4581 RVA: 0x0004361E File Offset: 0x0004181E
			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E6 RID: 4582 RVA: 0x0004364B File Offset: 0x0004184B
			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E7 RID: 4583 RVA: 0x00043678 File Offset: 0x00041878
			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E8 RID: 4584 RVA: 0x000436A5 File Offset: 0x000418A5
			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060011E9 RID: 4585 RVA: 0x000436D2 File Offset: 0x000418D2
			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			// Token: 0x060011EA RID: 4586 RVA: 0x000436FC File Offset: 0x000418FC
			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			// Token: 0x060011EB RID: 4587 RVA: 0x00043726 File Offset: 0x00041926
			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			// Token: 0x060011EC RID: 4588 RVA: 0x00043750 File Offset: 0x00041950
			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			// Token: 0x060011ED RID: 4589 RVA: 0x00043783 File Offset: 0x00041983
			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			// Token: 0x060011EE RID: 4590 RVA: 0x000437AF File Offset: 0x000419AF
			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			// Token: 0x060011EF RID: 4591 RVA: 0x000437DC File Offset: 0x000419DC
			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			// Token: 0x060011F0 RID: 4592 RVA: 0x00043808 File Offset: 0x00041A08
			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			// Token: 0x060011F1 RID: 4593 RVA: 0x00043832 File Offset: 0x00041A32
			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			// Token: 0x060011F2 RID: 4594 RVA: 0x0004385C File Offset: 0x00041A5C
			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x060011F3 RID: 4595 RVA: 0x0004388C File Offset: 0x00041A8C
			public virtual VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x060011F4 RID: 4596 RVA: 0x000438D0 File Offset: 0x00041AD0
			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			// Token: 0x060011F5 RID: 4597 RVA: 0x00043903 File Offset: 0x00041B03
			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			// Token: 0x060011F6 RID: 4598 RVA: 0x0004392D File Offset: 0x00041B2D
			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x060011F7 RID: 4599 RVA: 0x0004395A File Offset: 0x00041B5A
			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x060011F8 RID: 4600 RVA: 0x00043987 File Offset: 0x00041B87
			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x060011F9 RID: 4601 RVA: 0x000439B2 File Offset: 0x00041BB2
			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x060011FA RID: 4602 RVA: 0x000439DD File Offset: 0x00041BDD
			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x060011FB RID: 4603 RVA: 0x00043A09 File Offset: 0x00041C09
			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			// Token: 0x060011FC RID: 4604 RVA: 0x00043A33 File Offset: 0x00041C33
			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			// Token: 0x060011FD RID: 4605 RVA: 0x00043A60 File Offset: 0x00041C60
			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			// Token: 0x060011FE RID: 4606 RVA: 0x00043A8C File Offset: 0x00041C8C
			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x060011FF RID: 4607 RVA: 0x00043AB9 File Offset: 0x00041CB9
			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			// Token: 0x06001200 RID: 4608 RVA: 0x00043AE5 File Offset: 0x00041CE5
			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			// Token: 0x06001201 RID: 4609 RVA: 0x00043B0F File Offset: 0x00041D0F
			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			// Token: 0x06001202 RID: 4610 RVA: 0x00043B3A File Offset: 0x00041D3A
			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			// Token: 0x06001203 RID: 4611 RVA: 0x00043B64 File Offset: 0x00041D64
			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			// Token: 0x06001204 RID: 4612 RVA: 0x00043B8E File Offset: 0x00041D8E
			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			// Token: 0x06001205 RID: 4613 RVA: 0x00043BB8 File Offset: 0x00041DB8
			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			// Token: 0x06001206 RID: 4614 RVA: 0x00043BE2 File Offset: 0x00041DE2
			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			// Token: 0x06001207 RID: 4615 RVA: 0x00043C0C File Offset: 0x00041E0C
			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			// Token: 0x06001208 RID: 4616 RVA: 0x00043C37 File Offset: 0x00041E37
			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			// Token: 0x06001209 RID: 4617 RVA: 0x00043C61 File Offset: 0x00041E61
			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			// Token: 0x0600120A RID: 4618 RVA: 0x00043C8C File Offset: 0x00041E8C
			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			// Token: 0x0600120B RID: 4619 RVA: 0x00043CB8 File Offset: 0x00041EB8
			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			// Token: 0x0600120C RID: 4620 RVA: 0x00043CE3 File Offset: 0x00041EE3
			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			// Token: 0x0600120D RID: 4621 RVA: 0x00043D0E File Offset: 0x00041F0E
			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			// Token: 0x0600120E RID: 4622 RVA: 0x00043D3C File Offset: 0x00041F3C
			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				FriendGameInfo_t.PackSmall d = default(FriendGameInfo_t.PackSmall);
				bool result = Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref d);
				pFriendGameInfo = d;
				return result;
			}

			// Token: 0x0600120F RID: 4623 RVA: 0x00043D88 File Offset: 0x00041F88
			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			// Token: 0x06001210 RID: 4624 RVA: 0x00043DB4 File Offset: 0x00041FB4
			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			// Token: 0x06001211 RID: 4625 RVA: 0x00043DDF File Offset: 0x00041FDF
			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			// Token: 0x06001212 RID: 4626 RVA: 0x00043E0A File Offset: 0x0004200A
			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			// Token: 0x06001213 RID: 4627 RVA: 0x00043E34 File Offset: 0x00042034
			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			// Token: 0x06001214 RID: 4628 RVA: 0x00043E5F File Offset: 0x0004205F
			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			// Token: 0x06001215 RID: 4629 RVA: 0x00043E8A File Offset: 0x0004208A
			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			// Token: 0x06001216 RID: 4630 RVA: 0x00043EB5 File Offset: 0x000420B5
			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			// Token: 0x06001217 RID: 4631 RVA: 0x00043EE2 File Offset: 0x000420E2
			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			// Token: 0x06001218 RID: 4632 RVA: 0x00043F0E File Offset: 0x0004210E
			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			// Token: 0x06001219 RID: 4633 RVA: 0x00043F38 File Offset: 0x00042138
			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			// Token: 0x0600121A RID: 4634 RVA: 0x00043F63 File Offset: 0x00042163
			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			// Token: 0x0600121B RID: 4635 RVA: 0x00043F8E File Offset: 0x0004218E
			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			// Token: 0x0600121C RID: 4636 RVA: 0x00043FB9 File Offset: 0x000421B9
			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			// Token: 0x0600121D RID: 4637 RVA: 0x00043FE8 File Offset: 0x000421E8
			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			// Token: 0x0600121E RID: 4638 RVA: 0x00044014 File Offset: 0x00042214
			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			// Token: 0x0600121F RID: 4639 RVA: 0x0004403F File Offset: 0x0004223F
			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			// Token: 0x06001220 RID: 4640 RVA: 0x0004406B File Offset: 0x0004226B
			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			// Token: 0x06001221 RID: 4641 RVA: 0x00044097 File Offset: 0x00042297
			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			// Token: 0x06001222 RID: 4642 RVA: 0x000440C3 File Offset: 0x000422C3
			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			// Token: 0x06001223 RID: 4643 RVA: 0x000440EE File Offset: 0x000422EE
			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			// Token: 0x06001224 RID: 4644 RVA: 0x0004411A File Offset: 0x0004231A
			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			// Token: 0x06001225 RID: 4645 RVA: 0x00044145 File Offset: 0x00042345
			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			// Token: 0x06001226 RID: 4646 RVA: 0x00044171 File Offset: 0x00042371
			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			// Token: 0x06001227 RID: 4647 RVA: 0x0004419C File Offset: 0x0004239C
			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			// Token: 0x06001228 RID: 4648 RVA: 0x000441C7 File Offset: 0x000423C7
			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06001229 RID: 4649 RVA: 0x000441F2 File Offset: 0x000423F2
			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x0600122A RID: 4650 RVA: 0x0004421D File Offset: 0x0004241D
			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x0600122B RID: 4651 RVA: 0x00044248 File Offset: 0x00042448
			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			// Token: 0x0600122C RID: 4652 RVA: 0x00044274 File Offset: 0x00042474
			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			// Token: 0x0600122D RID: 4653 RVA: 0x0004429F File Offset: 0x0004249F
			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			// Token: 0x0600122E RID: 4654 RVA: 0x000442CA File Offset: 0x000424CA
			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			// Token: 0x0600122F RID: 4655 RVA: 0x000442F5 File Offset: 0x000424F5
			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			// Token: 0x06001230 RID: 4656 RVA: 0x00044321 File Offset: 0x00042521
			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			// Token: 0x06001231 RID: 4657 RVA: 0x0004434B File Offset: 0x0004254B
			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			// Token: 0x06001232 RID: 4658 RVA: 0x00044377 File Offset: 0x00042577
			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			// Token: 0x06001233 RID: 4659 RVA: 0x000443A1 File Offset: 0x000425A1
			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			// Token: 0x06001234 RID: 4660 RVA: 0x000443CD File Offset: 0x000425CD
			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			// Token: 0x06001235 RID: 4661 RVA: 0x000443F8 File Offset: 0x000425F8
			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			// Token: 0x06001236 RID: 4662 RVA: 0x00044424 File Offset: 0x00042624
			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			// Token: 0x06001237 RID: 4663 RVA: 0x0004444F File Offset: 0x0004264F
			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			// Token: 0x06001238 RID: 4664 RVA: 0x0004447B File Offset: 0x0004267B
			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			// Token: 0x06001239 RID: 4665 RVA: 0x000444A5 File Offset: 0x000426A5
			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			// Token: 0x0600123A RID: 4666 RVA: 0x000444D0 File Offset: 0x000426D0
			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			// Token: 0x0600123B RID: 4667 RVA: 0x000444FB File Offset: 0x000426FB
			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			// Token: 0x0600123C RID: 4668 RVA: 0x00044526 File Offset: 0x00042726
			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x0600123D RID: 4669 RVA: 0x00044551 File Offset: 0x00042751
			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x0600123E RID: 4670 RVA: 0x0004457C File Offset: 0x0004277C
			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			// Token: 0x0600123F RID: 4671 RVA: 0x000445A7 File Offset: 0x000427A7
			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			// Token: 0x06001240 RID: 4672 RVA: 0x000445D3 File Offset: 0x000427D3
			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			// Token: 0x06001241 RID: 4673 RVA: 0x000445FF File Offset: 0x000427FF
			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			// Token: 0x06001242 RID: 4674 RVA: 0x00044632 File Offset: 0x00042832
			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			// Token: 0x06001243 RID: 4675 RVA: 0x0004465E File Offset: 0x0004285E
			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001244 RID: 4676 RVA: 0x00044689 File Offset: 0x00042889
			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001245 RID: 4677 RVA: 0x000446B4 File Offset: 0x000428B4
			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001246 RID: 4678 RVA: 0x000446DF File Offset: 0x000428DF
			public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			// Token: 0x06001247 RID: 4679 RVA: 0x0004470A File Offset: 0x0004290A
			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			// Token: 0x06001248 RID: 4680 RVA: 0x00044736 File Offset: 0x00042936
			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001249 RID: 4681 RVA: 0x00044767 File Offset: 0x00042967
			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			// Token: 0x0600124A RID: 4682 RVA: 0x00044792 File Offset: 0x00042992
			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			// Token: 0x0600124B RID: 4683 RVA: 0x000447BD File Offset: 0x000429BD
			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			// Token: 0x0600124C RID: 4684 RVA: 0x000447E8 File Offset: 0x000429E8
			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			// Token: 0x0600124D RID: 4685 RVA: 0x00044813 File Offset: 0x00042A13
			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			// Token: 0x0600124E RID: 4686 RVA: 0x0004483E File Offset: 0x00042A3E
			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			// Token: 0x0600124F RID: 4687 RVA: 0x00044868 File Offset: 0x00042A68
			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			// Token: 0x06001250 RID: 4688 RVA: 0x00044892 File Offset: 0x00042A92
			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			// Token: 0x06001251 RID: 4689 RVA: 0x000448BC File Offset: 0x00042ABC
			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			// Token: 0x06001252 RID: 4690 RVA: 0x000448E6 File Offset: 0x00042AE6
			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			// Token: 0x06001253 RID: 4691 RVA: 0x00044910 File Offset: 0x00042B10
			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			// Token: 0x06001254 RID: 4692 RVA: 0x0004493D File Offset: 0x00042B3D
			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			// Token: 0x06001255 RID: 4693 RVA: 0x0004496A File Offset: 0x00042B6A
			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			// Token: 0x06001256 RID: 4694 RVA: 0x00044996 File Offset: 0x00042B96
			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			// Token: 0x06001257 RID: 4695 RVA: 0x000449C0 File Offset: 0x00042BC0
			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			// Token: 0x06001258 RID: 4696 RVA: 0x000449EA File Offset: 0x00042BEA
			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			// Token: 0x06001259 RID: 4697 RVA: 0x00044A15 File Offset: 0x00042C15
			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			// Token: 0x0600125A RID: 4698 RVA: 0x00044A41 File Offset: 0x00042C41
			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			// Token: 0x0600125B RID: 4699 RVA: 0x00044A6C File Offset: 0x00042C6C
			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			// Token: 0x0600125C RID: 4700 RVA: 0x00044A9D File Offset: 0x00042C9D
			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			// Token: 0x0600125D RID: 4701 RVA: 0x00044AC7 File Offset: 0x00042CC7
			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x0600125E RID: 4702 RVA: 0x00044AF2 File Offset: 0x00042CF2
			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			// Token: 0x0600125F RID: 4703 RVA: 0x00044B1C File Offset: 0x00042D1C
			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			// Token: 0x06001260 RID: 4704 RVA: 0x00044B46 File Offset: 0x00042D46
			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			// Token: 0x06001261 RID: 4705 RVA: 0x00044B71 File Offset: 0x00042D71
			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			// Token: 0x06001262 RID: 4706 RVA: 0x00044BA2 File Offset: 0x00042DA2
			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			// Token: 0x06001263 RID: 4707 RVA: 0x00044BCC File Offset: 0x00042DCC
			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			// Token: 0x06001264 RID: 4708 RVA: 0x00044BF8 File Offset: 0x00042DF8
			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			// Token: 0x06001265 RID: 4709 RVA: 0x00044C22 File Offset: 0x00042E22
			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			// Token: 0x06001266 RID: 4710 RVA: 0x00044C4C File Offset: 0x00042E4C
			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			// Token: 0x06001267 RID: 4711 RVA: 0x00044C78 File Offset: 0x00042E78
			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			// Token: 0x06001268 RID: 4712 RVA: 0x00044CA2 File Offset: 0x00042EA2
			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			// Token: 0x06001269 RID: 4713 RVA: 0x00044CCC File Offset: 0x00042ECC
			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			// Token: 0x0600126A RID: 4714 RVA: 0x00044CF6 File Offset: 0x00042EF6
			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			// Token: 0x0600126B RID: 4715 RVA: 0x00044D21 File Offset: 0x00042F21
			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			// Token: 0x0600126C RID: 4716 RVA: 0x00044D4B File Offset: 0x00042F4B
			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			// Token: 0x0600126D RID: 4717 RVA: 0x00044D80 File Offset: 0x00042F80
			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			// Token: 0x0600126E RID: 4718 RVA: 0x00044DB3 File Offset: 0x00042FB3
			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			// Token: 0x0600126F RID: 4719 RVA: 0x00044DE4 File Offset: 0x00042FE4
			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			// Token: 0x06001270 RID: 4720 RVA: 0x00044E0E File Offset: 0x0004300E
			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			// Token: 0x06001271 RID: 4721 RVA: 0x00044E3B File Offset: 0x0004303B
			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			// Token: 0x06001272 RID: 4722 RVA: 0x00044E68 File Offset: 0x00043068
			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			// Token: 0x06001273 RID: 4723 RVA: 0x00044E94 File Offset: 0x00043094
			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			// Token: 0x06001274 RID: 4724 RVA: 0x00044EBF File Offset: 0x000430BF
			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			// Token: 0x06001275 RID: 4725 RVA: 0x00044EEA File Offset: 0x000430EA
			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			// Token: 0x06001276 RID: 4726 RVA: 0x00044F15 File Offset: 0x00043115
			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			// Token: 0x06001277 RID: 4727 RVA: 0x00044F40 File Offset: 0x00043140
			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			// Token: 0x06001278 RID: 4728 RVA: 0x00044F6B File Offset: 0x0004316B
			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			// Token: 0x06001279 RID: 4729 RVA: 0x00044F97 File Offset: 0x00043197
			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x0600127A RID: 4730 RVA: 0x00044FC2 File Offset: 0x000431C2
			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x0600127B RID: 4731 RVA: 0x00044FED File Offset: 0x000431ED
			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			// Token: 0x0600127C RID: 4732 RVA: 0x00045019 File Offset: 0x00043219
			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			// Token: 0x0600127D RID: 4733 RVA: 0x00045044 File Offset: 0x00043244
			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			// Token: 0x0600127E RID: 4734 RVA: 0x00045070 File Offset: 0x00043270
			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x0600127F RID: 4735 RVA: 0x0004509C File Offset: 0x0004329C
			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001280 RID: 4736 RVA: 0x000450C9 File Offset: 0x000432C9
			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			// Token: 0x06001281 RID: 4737 RVA: 0x000450F4 File Offset: 0x000432F4
			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			// Token: 0x06001282 RID: 4738 RVA: 0x00045127 File Offset: 0x00043327
			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06001283 RID: 4739 RVA: 0x00045153 File Offset: 0x00043353
			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			// Token: 0x06001284 RID: 4740 RVA: 0x00045180 File Offset: 0x00043380
			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001285 RID: 4741 RVA: 0x000451AD File Offset: 0x000433AD
			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			// Token: 0x06001286 RID: 4742 RVA: 0x000451DA File Offset: 0x000433DA
			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001287 RID: 4743 RVA: 0x0004520D File Offset: 0x0004340D
			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			// Token: 0x06001288 RID: 4744 RVA: 0x00045238 File Offset: 0x00043438
			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			// Token: 0x06001289 RID: 4745 RVA: 0x00045267 File Offset: 0x00043467
			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			// Token: 0x0600128A RID: 4746 RVA: 0x00045296 File Offset: 0x00043496
			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			// Token: 0x0600128B RID: 4747 RVA: 0x000452C2 File Offset: 0x000434C2
			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			// Token: 0x0600128C RID: 4748 RVA: 0x000452ED File Offset: 0x000434ED
			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			// Token: 0x0600128D RID: 4749 RVA: 0x00045319 File Offset: 0x00043519
			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			// Token: 0x0600128E RID: 4750 RVA: 0x00045345 File Offset: 0x00043545
			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			// Token: 0x0600128F RID: 4751 RVA: 0x00045370 File Offset: 0x00043570
			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			// Token: 0x06001290 RID: 4752 RVA: 0x0004539C File Offset: 0x0004359C
			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			// Token: 0x06001291 RID: 4753 RVA: 0x000453C8 File Offset: 0x000435C8
			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001292 RID: 4754 RVA: 0x000453F7 File Offset: 0x000435F7
			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			// Token: 0x06001293 RID: 4755 RVA: 0x00045423 File Offset: 0x00043623
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001294 RID: 4756 RVA: 0x00045452 File Offset: 0x00043652
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001295 RID: 4757 RVA: 0x00045481 File Offset: 0x00043681
			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001296 RID: 4758 RVA: 0x000454B0 File Offset: 0x000436B0
			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001297 RID: 4759 RVA: 0x000454DF File Offset: 0x000436DF
			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			// Token: 0x06001298 RID: 4760 RVA: 0x0004550A File Offset: 0x0004370A
			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			// Token: 0x06001299 RID: 4761 RVA: 0x00045536 File Offset: 0x00043736
			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			// Token: 0x0600129A RID: 4762 RVA: 0x00045561 File Offset: 0x00043761
			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			// Token: 0x0600129B RID: 4763 RVA: 0x0004558C File Offset: 0x0004378C
			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			// Token: 0x0600129C RID: 4764 RVA: 0x000455B7 File Offset: 0x000437B7
			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			// Token: 0x0600129D RID: 4765 RVA: 0x000455E2 File Offset: 0x000437E2
			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			// Token: 0x0600129E RID: 4766 RVA: 0x0004560E File Offset: 0x0004380E
			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x0600129F RID: 4767 RVA: 0x0004563B File Offset: 0x0004383B
			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x060012A0 RID: 4768 RVA: 0x00045668 File Offset: 0x00043868
			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x060012A1 RID: 4769 RVA: 0x00045695 File Offset: 0x00043895
			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			// Token: 0x060012A2 RID: 4770 RVA: 0x000456C0 File Offset: 0x000438C0
			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x060012A3 RID: 4771 RVA: 0x000456ED File Offset: 0x000438ED
			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			// Token: 0x060012A4 RID: 4772 RVA: 0x0004571A File Offset: 0x0004391A
			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x060012A5 RID: 4773 RVA: 0x00045747 File Offset: 0x00043947
			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			// Token: 0x060012A6 RID: 4774 RVA: 0x00045774 File Offset: 0x00043974
			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			// Token: 0x060012A7 RID: 4775 RVA: 0x000457A1 File Offset: 0x000439A1
			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			// Token: 0x060012A8 RID: 4776 RVA: 0x000457CC File Offset: 0x000439CC
			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			// Token: 0x060012A9 RID: 4777 RVA: 0x000457F7 File Offset: 0x000439F7
			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			// Token: 0x060012AA RID: 4778 RVA: 0x00045822 File Offset: 0x00043A22
			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			// Token: 0x060012AB RID: 4779 RVA: 0x0004584E File Offset: 0x00043A4E
			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			// Token: 0x060012AC RID: 4780 RVA: 0x00045879 File Offset: 0x00043A79
			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			// Token: 0x060012AD RID: 4781 RVA: 0x000458A6 File Offset: 0x00043AA6
			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			// Token: 0x060012AE RID: 4782 RVA: 0x000458D1 File Offset: 0x00043AD1
			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			// Token: 0x060012AF RID: 4783 RVA: 0x000458FC File Offset: 0x00043AFC
			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			// Token: 0x060012B0 RID: 4784 RVA: 0x00045927 File Offset: 0x00043B27
			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			// Token: 0x060012B1 RID: 4785 RVA: 0x00045952 File Offset: 0x00043B52
			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			// Token: 0x060012B2 RID: 4786 RVA: 0x0004597D File Offset: 0x00043B7D
			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			// Token: 0x060012B3 RID: 4787 RVA: 0x000459A8 File Offset: 0x00043BA8
			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			// Token: 0x060012B4 RID: 4788 RVA: 0x000459D3 File Offset: 0x00043BD3
			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			// Token: 0x060012B5 RID: 4789 RVA: 0x000459FD File Offset: 0x00043BFD
			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			// Token: 0x060012B6 RID: 4790 RVA: 0x00045A29 File Offset: 0x00043C29
			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			// Token: 0x060012B7 RID: 4791 RVA: 0x00045A55 File Offset: 0x00043C55
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			// Token: 0x060012B8 RID: 4792 RVA: 0x00045A7F File Offset: 0x00043C7F
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			// Token: 0x060012B9 RID: 4793 RVA: 0x00045AA9 File Offset: 0x00043CA9
			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			// Token: 0x060012BA RID: 4794 RVA: 0x00045AD4 File Offset: 0x00043CD4
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			// Token: 0x060012BB RID: 4795 RVA: 0x00045B00 File Offset: 0x00043D00
			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			// Token: 0x060012BC RID: 4796 RVA: 0x00045B2D File Offset: 0x00043D2D
			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			// Token: 0x060012BD RID: 4797 RVA: 0x00045B5E File Offset: 0x00043D5E
			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			// Token: 0x060012BE RID: 4798 RVA: 0x00045B8F File Offset: 0x00043D8F
			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			// Token: 0x060012BF RID: 4799 RVA: 0x00045BB9 File Offset: 0x00043DB9
			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			// Token: 0x060012C0 RID: 4800 RVA: 0x00045BE4 File Offset: 0x00043DE4
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref d, eWorkshopFileType);
				pTags = d;
				return result;
			}

			// Token: 0x060012C1 RID: 4801 RVA: 0x00045C3B File Offset: 0x00043E3B
			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			// Token: 0x060012C2 RID: 4802 RVA: 0x00045C66 File Offset: 0x00043E66
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			// Token: 0x060012C3 RID: 4803 RVA: 0x00045C92 File Offset: 0x00043E92
			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			// Token: 0x060012C4 RID: 4804 RVA: 0x00045CBE File Offset: 0x00043EBE
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			// Token: 0x060012C5 RID: 4805 RVA: 0x00045CEA File Offset: 0x00043EEA
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			// Token: 0x060012C6 RID: 4806 RVA: 0x00045D16 File Offset: 0x00043F16
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			// Token: 0x060012C7 RID: 4807 RVA: 0x00045D44 File Offset: 0x00043F44
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				bool result = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x060012C8 RID: 4808 RVA: 0x00045D90 File Offset: 0x00043F90
			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			// Token: 0x060012C9 RID: 4809 RVA: 0x00045DBB File Offset: 0x00043FBB
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			// Token: 0x060012CA RID: 4810 RVA: 0x00045DE7 File Offset: 0x00043FE7
			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x060012CB RID: 4811 RVA: 0x00045E12 File Offset: 0x00044012
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x060012CC RID: 4812 RVA: 0x00045E3D File Offset: 0x0004403D
			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x060012CD RID: 4813 RVA: 0x00045E68 File Offset: 0x00044068
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x060012CE RID: 4814 RVA: 0x00045E93 File Offset: 0x00044093
			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x060012CF RID: 4815 RVA: 0x00045EBE File Offset: 0x000440BE
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			// Token: 0x060012D0 RID: 4816 RVA: 0x00045EEA File Offset: 0x000440EA
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x060012D1 RID: 4817 RVA: 0x00045F15 File Offset: 0x00044115
			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			// Token: 0x060012D2 RID: 4818 RVA: 0x00045F41 File Offset: 0x00044141
			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x060012D3 RID: 4819 RVA: 0x00045F6C File Offset: 0x0004416C
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamParamStringArray_t.PackSmall d2 = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref d, ref d2);
				pRequiredTags = d;
				pExcludedTags = d2;
				return result;
			}

			// Token: 0x060012D4 RID: 4820 RVA: 0x00045FD0 File Offset: 0x000441D0
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x060012D5 RID: 4821 RVA: 0x00046029 File Offset: 0x00044229
			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			// Token: 0x060012D6 RID: 4822 RVA: 0x00046055 File Offset: 0x00044255
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			// Token: 0x060012D7 RID: 4823 RVA: 0x00046084 File Offset: 0x00044284
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamParamStringArray_t.PackSmall d2 = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref d, ref d2);
				pTags = d;
				pUserTags = d2;
				return result;
			}

			// Token: 0x060012D8 RID: 4824 RVA: 0x000460EC File Offset: 0x000442EC
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			// Token: 0x060012D9 RID: 4825 RVA: 0x00046119 File Offset: 0x00044319
			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			// Token: 0x060012DA RID: 4826 RVA: 0x00046143 File Offset: 0x00044343
			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			// Token: 0x060012DB RID: 4827 RVA: 0x0004616F File Offset: 0x0004436F
			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			// Token: 0x060012DC RID: 4828 RVA: 0x0004619B File Offset: 0x0004439B
			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			// Token: 0x060012DD RID: 4829 RVA: 0x000461C7 File Offset: 0x000443C7
			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			// Token: 0x060012DE RID: 4830 RVA: 0x000461F3 File Offset: 0x000443F3
			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x060012DF RID: 4831 RVA: 0x00046220 File Offset: 0x00044420
			public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			// Token: 0x060012E0 RID: 4832 RVA: 0x0004624C File Offset: 0x0004444C
			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			// Token: 0x060012E1 RID: 4833 RVA: 0x00046277 File Offset: 0x00044477
			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			// Token: 0x060012E2 RID: 4834 RVA: 0x000462A2 File Offset: 0x000444A2
			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x060012E3 RID: 4835 RVA: 0x000462CF File Offset: 0x000444CF
			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			// Token: 0x060012E4 RID: 4836 RVA: 0x000462F9 File Offset: 0x000444F9
			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			// Token: 0x060012E5 RID: 4837 RVA: 0x00046324 File Offset: 0x00044524
			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			// Token: 0x060012E6 RID: 4838 RVA: 0x00046350 File Offset: 0x00044550
			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			// Token: 0x060012E7 RID: 4839 RVA: 0x0004637D File Offset: 0x0004457D
			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			// Token: 0x060012E8 RID: 4840 RVA: 0x000463A7 File Offset: 0x000445A7
			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			// Token: 0x060012E9 RID: 4841 RVA: 0x000463D2 File Offset: 0x000445D2
			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x060012EA RID: 4842 RVA: 0x000463FD File Offset: 0x000445FD
			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060012EB RID: 4843 RVA: 0x0004642A File Offset: 0x0004462A
			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060012EC RID: 4844 RVA: 0x00046457 File Offset: 0x00044657
			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x060012ED RID: 4845 RVA: 0x00046484 File Offset: 0x00044684
			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x060012EE RID: 4846 RVA: 0x000464B3 File Offset: 0x000446B3
			public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			// Token: 0x060012EF RID: 4847 RVA: 0x000464DE File Offset: 0x000446DE
			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			// Token: 0x060012F0 RID: 4848 RVA: 0x0004650B File Offset: 0x0004470B
			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			// Token: 0x060012F1 RID: 4849 RVA: 0x00046536 File Offset: 0x00044736
			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060012F2 RID: 4850 RVA: 0x00046561 File Offset: 0x00044761
			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060012F3 RID: 4851 RVA: 0x0004658C File Offset: 0x0004478C
			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060012F4 RID: 4852 RVA: 0x000465B7 File Offset: 0x000447B7
			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060012F5 RID: 4853 RVA: 0x000465E2 File Offset: 0x000447E2
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			// Token: 0x060012F6 RID: 4854 RVA: 0x00046611 File Offset: 0x00044811
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			// Token: 0x060012F7 RID: 4855 RVA: 0x00046640 File Offset: 0x00044840
			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				LeaderboardEntry_t.PackSmall d = default(LeaderboardEntry_t.PackSmall);
				bool result = Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref d, pDetails, cDetailsMax);
				pLeaderboardEntry = d;
				return result;
			}

			// Token: 0x060012F8 RID: 4856 RVA: 0x00046691 File Offset: 0x00044891
			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			// Token: 0x060012F9 RID: 4857 RVA: 0x000466C2 File Offset: 0x000448C2
			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			// Token: 0x060012FA RID: 4858 RVA: 0x000466EE File Offset: 0x000448EE
			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			// Token: 0x060012FB RID: 4859 RVA: 0x00046718 File Offset: 0x00044918
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			// Token: 0x060012FC RID: 4860 RVA: 0x00046742 File Offset: 0x00044942
			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x060012FD RID: 4861 RVA: 0x00046771 File Offset: 0x00044971
			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x060012FE RID: 4862 RVA: 0x000467A2 File Offset: 0x000449A2
			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			// Token: 0x060012FF RID: 4863 RVA: 0x000467CE File Offset: 0x000449CE
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			// Token: 0x06001300 RID: 4864 RVA: 0x000467F9 File Offset: 0x000449F9
			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001301 RID: 4865 RVA: 0x00046825 File Offset: 0x00044A25
			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001302 RID: 4866 RVA: 0x00046851 File Offset: 0x00044A51
			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001303 RID: 4867 RVA: 0x0004687E File Offset: 0x00044A7E
			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001304 RID: 4868 RVA: 0x000468AB File Offset: 0x00044AAB
			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			// Token: 0x06001305 RID: 4869 RVA: 0x000468D5 File Offset: 0x00044AD5
			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			// Token: 0x06001306 RID: 4870 RVA: 0x000468FF File Offset: 0x00044AFF
			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			// Token: 0x06001307 RID: 4871 RVA: 0x00046929 File Offset: 0x00044B29
			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			// Token: 0x06001308 RID: 4872 RVA: 0x00046953 File Offset: 0x00044B53
			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			// Token: 0x06001309 RID: 4873 RVA: 0x0004697D File Offset: 0x00044B7D
			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			// Token: 0x0600130A RID: 4874 RVA: 0x000469A7 File Offset: 0x00044BA7
			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			// Token: 0x0600130B RID: 4875 RVA: 0x000469D2 File Offset: 0x00044BD2
			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			// Token: 0x0600130C RID: 4876 RVA: 0x000469FD File Offset: 0x00044BFD
			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			// Token: 0x0600130D RID: 4877 RVA: 0x00046A28 File Offset: 0x00044C28
			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			// Token: 0x0600130E RID: 4878 RVA: 0x00046A52 File Offset: 0x00044C52
			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			// Token: 0x0600130F RID: 4879 RVA: 0x00046A7C File Offset: 0x00044C7C
			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			// Token: 0x06001310 RID: 4880 RVA: 0x00046AAD File Offset: 0x00044CAD
			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001311 RID: 4881 RVA: 0x00046AD8 File Offset: 0x00044CD8
			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001312 RID: 4882 RVA: 0x00046B03 File Offset: 0x00044D03
			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			// Token: 0x06001313 RID: 4883 RVA: 0x00046B2E File Offset: 0x00044D2E
			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			// Token: 0x06001314 RID: 4884 RVA: 0x00046B5A File Offset: 0x00044D5A
			public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			// Token: 0x06001315 RID: 4885 RVA: 0x00046B85 File Offset: 0x00044D85
			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			// Token: 0x06001316 RID: 4886 RVA: 0x00046BB2 File Offset: 0x00044DB2
			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			// Token: 0x06001317 RID: 4887 RVA: 0x00046BDF File Offset: 0x00044DDF
			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			// Token: 0x06001318 RID: 4888 RVA: 0x00046C0A File Offset: 0x00044E0A
			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			// Token: 0x06001319 RID: 4889 RVA: 0x00046C34 File Offset: 0x00044E34
			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			// Token: 0x0600131A RID: 4890 RVA: 0x00046C5F File Offset: 0x00044E5F
			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x0600131B RID: 4891 RVA: 0x00046C8C File Offset: 0x00044E8C
			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			// Token: 0x0600131C RID: 4892 RVA: 0x00046CB6 File Offset: 0x00044EB6
			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			// Token: 0x0600131D RID: 4893 RVA: 0x00046CE0 File Offset: 0x00044EE0
			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			// Token: 0x0600131E RID: 4894 RVA: 0x00046D0B File Offset: 0x00044F0B
			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			// Token: 0x0600131F RID: 4895 RVA: 0x00046D3C File Offset: 0x00044F3C
			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			// Token: 0x06001320 RID: 4896 RVA: 0x00046D68 File Offset: 0x00044F68
			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			// Token: 0x06001321 RID: 4897 RVA: 0x00046D99 File Offset: 0x00044F99
			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x06001322 RID: 4898 RVA: 0x00046DC4 File Offset: 0x00044FC4
			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x06001323 RID: 4899 RVA: 0x00046DEF File Offset: 0x00044FEF
			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			// Token: 0x06001324 RID: 4900 RVA: 0x00046E1C File Offset: 0x0004501C
			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				P2PSessionState_t.PackSmall d = default(P2PSessionState_t.PackSmall);
				bool result = Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref d);
				pConnectionState = d;
				return result;
			}

			// Token: 0x06001325 RID: 4901 RVA: 0x00046E68 File Offset: 0x00045068
			public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			// Token: 0x06001326 RID: 4902 RVA: 0x00046E93 File Offset: 0x00045093
			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			// Token: 0x06001327 RID: 4903 RVA: 0x00046EC2 File Offset: 0x000450C2
			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			// Token: 0x06001328 RID: 4904 RVA: 0x00046EF1 File Offset: 0x000450F1
			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			// Token: 0x06001329 RID: 4905 RVA: 0x00046F1E File Offset: 0x0004511E
			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x0600132A RID: 4906 RVA: 0x00046F4A File Offset: 0x0004514A
			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x0600132B RID: 4907 RVA: 0x00046F76 File Offset: 0x00045176
			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			// Token: 0x0600132C RID: 4908 RVA: 0x00046FA5 File Offset: 0x000451A5
			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			// Token: 0x0600132D RID: 4909 RVA: 0x00046FD1 File Offset: 0x000451D1
			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			// Token: 0x0600132E RID: 4910 RVA: 0x00047000 File Offset: 0x00045200
			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x0600132F RID: 4911 RVA: 0x0004702D File Offset: 0x0004522D
			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x06001330 RID: 4912 RVA: 0x0004705E File Offset: 0x0004525E
			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			// Token: 0x06001331 RID: 4913 RVA: 0x0004708F File Offset: 0x0004528F
			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			// Token: 0x06001332 RID: 4914 RVA: 0x000470BC File Offset: 0x000452BC
			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			// Token: 0x06001333 RID: 4915 RVA: 0x000470E7 File Offset: 0x000452E7
			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			// Token: 0x06001334 RID: 4916 RVA: 0x00047112 File Offset: 0x00045312
			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			// Token: 0x06001335 RID: 4917 RVA: 0x00047141 File Offset: 0x00045341
			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			// Token: 0x06001336 RID: 4918 RVA: 0x00047170 File Offset: 0x00045370
			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			// Token: 0x06001337 RID: 4919 RVA: 0x0004719A File Offset: 0x0004539A
			public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			// Token: 0x06001338 RID: 4920 RVA: 0x000471C5 File Offset: 0x000453C5
			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			// Token: 0x06001339 RID: 4921 RVA: 0x000471F1 File Offset: 0x000453F1
			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			// Token: 0x0600133A RID: 4922 RVA: 0x0004721D File Offset: 0x0004541D
			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			// Token: 0x0600133B RID: 4923 RVA: 0x00047249 File Offset: 0x00045449
			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			// Token: 0x0600133C RID: 4924 RVA: 0x00047273 File Offset: 0x00045473
			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			// Token: 0x0600133D RID: 4925 RVA: 0x000472A0 File Offset: 0x000454A0
			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			// Token: 0x0600133E RID: 4926 RVA: 0x000472CA File Offset: 0x000454CA
			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			// Token: 0x0600133F RID: 4927 RVA: 0x000472F4 File Offset: 0x000454F4
			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			// Token: 0x06001340 RID: 4928 RVA: 0x0004731E File Offset: 0x0004551E
			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			// Token: 0x06001341 RID: 4929 RVA: 0x00047348 File Offset: 0x00045548
			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			// Token: 0x06001342 RID: 4930 RVA: 0x00047372 File Offset: 0x00045572
			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			// Token: 0x06001343 RID: 4931 RVA: 0x0004739C File Offset: 0x0004559C
			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			// Token: 0x06001344 RID: 4932 RVA: 0x000473C6 File Offset: 0x000455C6
			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			// Token: 0x06001345 RID: 4933 RVA: 0x000473F1 File Offset: 0x000455F1
			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			// Token: 0x06001346 RID: 4934 RVA: 0x0004741B File Offset: 0x0004561B
			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			// Token: 0x06001347 RID: 4935 RVA: 0x00047446 File Offset: 0x00045646
			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			// Token: 0x06001348 RID: 4936 RVA: 0x00047470 File Offset: 0x00045670
			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			// Token: 0x06001349 RID: 4937 RVA: 0x0004749A File Offset: 0x0004569A
			public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			// Token: 0x0600134A RID: 4938 RVA: 0x000474C5 File Offset: 0x000456C5
			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			// Token: 0x0600134B RID: 4939 RVA: 0x000474F0 File Offset: 0x000456F0
			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x0600134C RID: 4940 RVA: 0x0004751C File Offset: 0x0004571C
			public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			// Token: 0x0600134D RID: 4941 RVA: 0x00047547 File Offset: 0x00045747
			public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			// Token: 0x0600134E RID: 4942 RVA: 0x00047572 File Offset: 0x00045772
			public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			// Token: 0x0600134F RID: 4943 RVA: 0x0004759D File Offset: 0x0004579D
			public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			// Token: 0x06001350 RID: 4944 RVA: 0x000475C8 File Offset: 0x000457C8
			public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			// Token: 0x06001351 RID: 4945 RVA: 0x000475F3 File Offset: 0x000457F3
			public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			// Token: 0x06001352 RID: 4946 RVA: 0x0004761E File Offset: 0x0004581E
			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			// Token: 0x06001353 RID: 4947 RVA: 0x00047649 File Offset: 0x00045849
			public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			// Token: 0x06001354 RID: 4948 RVA: 0x00047674 File Offset: 0x00045874
			public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			// Token: 0x06001355 RID: 4949 RVA: 0x0004769F File Offset: 0x0004589F
			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			// Token: 0x06001356 RID: 4950 RVA: 0x000476CA File Offset: 0x000458CA
			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			// Token: 0x06001357 RID: 4951 RVA: 0x000476F4 File Offset: 0x000458F4
			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			// Token: 0x06001358 RID: 4952 RVA: 0x0004771F File Offset: 0x0004591F
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			// Token: 0x06001359 RID: 4953 RVA: 0x0004774A File Offset: 0x0004594A
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			// Token: 0x0600135A RID: 4954 RVA: 0x00047775 File Offset: 0x00045975
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x0600135B RID: 4955 RVA: 0x000477A1 File Offset: 0x000459A1
			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			// Token: 0x0600135C RID: 4956 RVA: 0x000477CB File Offset: 0x000459CB
			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			// Token: 0x0600135D RID: 4957 RVA: 0x000477F5 File Offset: 0x000459F5
			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			// Token: 0x0600135E RID: 4958 RVA: 0x0004781F File Offset: 0x00045A1F
			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x0600135F RID: 4959 RVA: 0x0004784C File Offset: 0x00045A4C
			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			// Token: 0x06001360 RID: 4960 RVA: 0x00047877 File Offset: 0x00045A77
			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			// Token: 0x06001361 RID: 4961 RVA: 0x000478A1 File Offset: 0x00045AA1
			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			// Token: 0x06001362 RID: 4962 RVA: 0x000478CB File Offset: 0x00045ACB
			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			// Token: 0x06001363 RID: 4963 RVA: 0x000478F5 File Offset: 0x00045AF5
			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x06001364 RID: 4964 RVA: 0x00047922 File Offset: 0x00045B22
			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			// Token: 0x06001365 RID: 4965 RVA: 0x0004794D File Offset: 0x00045B4D
			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			// Token: 0x06001366 RID: 4966 RVA: 0x00047977 File Offset: 0x00045B77
			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			// Token: 0x06001367 RID: 4967 RVA: 0x000479A3 File Offset: 0x00045BA3
			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			// Token: 0x06001368 RID: 4968 RVA: 0x000479CF File Offset: 0x00045BCF
			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			// Token: 0x06001369 RID: 4969 RVA: 0x000479FB File Offset: 0x00045BFB
			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			// Token: 0x0600136A RID: 4970 RVA: 0x00047A28 File Offset: 0x00045C28
			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			// Token: 0x0600136B RID: 4971 RVA: 0x00047A55 File Offset: 0x00045C55
			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x0600136C RID: 4972 RVA: 0x00047A81 File Offset: 0x00045C81
			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x0600136D RID: 4973 RVA: 0x00047AAD File Offset: 0x00045CAD
			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x0600136E RID: 4974 RVA: 0x00047AD8 File Offset: 0x00045CD8
			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x0600136F RID: 4975 RVA: 0x00047B03 File Offset: 0x00045D03
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			// Token: 0x06001370 RID: 4976 RVA: 0x00047B30 File Offset: 0x00045D30
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			// Token: 0x06001371 RID: 4977 RVA: 0x00047B5F File Offset: 0x00045D5F
			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			// Token: 0x06001372 RID: 4978 RVA: 0x00047B8B File Offset: 0x00045D8B
			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x06001373 RID: 4979 RVA: 0x00047BB8 File Offset: 0x00045DB8
			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x06001374 RID: 4980 RVA: 0x00047BE7 File Offset: 0x00045DE7
			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x06001375 RID: 4981 RVA: 0x00047C12 File Offset: 0x00045E12
			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			// Token: 0x06001376 RID: 4982 RVA: 0x00047C3E File Offset: 0x00045E3E
			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			// Token: 0x06001377 RID: 4983 RVA: 0x00047C6D File Offset: 0x00045E6D
			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			// Token: 0x06001378 RID: 4984 RVA: 0x00047C98 File Offset: 0x00045E98
			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			// Token: 0x06001379 RID: 4985 RVA: 0x00047CC3 File Offset: 0x00045EC3
			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			// Token: 0x0600137A RID: 4986 RVA: 0x00047CF2 File Offset: 0x00045EF2
			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			// Token: 0x0600137B RID: 4987 RVA: 0x00047D1E File Offset: 0x00045F1E
			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			// Token: 0x0600137C RID: 4988 RVA: 0x00047D4A File Offset: 0x00045F4A
			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			// Token: 0x0600137D RID: 4989 RVA: 0x00047D76 File Offset: 0x00045F76
			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			// Token: 0x0600137E RID: 4990 RVA: 0x00047DA2 File Offset: 0x00045FA2
			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			// Token: 0x0600137F RID: 4991 RVA: 0x00047DCE File Offset: 0x00045FCE
			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			// Token: 0x06001380 RID: 4992 RVA: 0x00047DF8 File Offset: 0x00045FF8
			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			// Token: 0x06001381 RID: 4993 RVA: 0x00047E22 File Offset: 0x00046022
			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			// Token: 0x06001382 RID: 4994 RVA: 0x00047E4C File Offset: 0x0004604C
			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			// Token: 0x06001383 RID: 4995 RVA: 0x00047E77 File Offset: 0x00046077
			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			// Token: 0x06001384 RID: 4996 RVA: 0x00047EA2 File Offset: 0x000460A2
			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			// Token: 0x06001385 RID: 4997 RVA: 0x00047ECD File Offset: 0x000460CD
			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			// Token: 0x06001386 RID: 4998 RVA: 0x00047EF9 File Offset: 0x000460F9
			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			// Token: 0x06001387 RID: 4999 RVA: 0x00047F24 File Offset: 0x00046124
			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001388 RID: 5000 RVA: 0x00047F50 File Offset: 0x00046150
			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001389 RID: 5001 RVA: 0x00047F7C File Offset: 0x0004617C
			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			// Token: 0x0600138A RID: 5002 RVA: 0x00047FA7 File Offset: 0x000461A7
			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			// Token: 0x0600138B RID: 5003 RVA: 0x00047FD3 File Offset: 0x000461D3
			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x0600138C RID: 5004 RVA: 0x00047FFE File Offset: 0x000461FE
			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			// Token: 0x0600138D RID: 5005 RVA: 0x0004802A File Offset: 0x0004622A
			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			// Token: 0x0600138E RID: 5006 RVA: 0x00048059 File Offset: 0x00046259
			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x0600138F RID: 5007 RVA: 0x00048084 File Offset: 0x00046284
			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			// Token: 0x06001390 RID: 5008 RVA: 0x000480B0 File Offset: 0x000462B0
			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			// Token: 0x06001391 RID: 5009 RVA: 0x000480DF File Offset: 0x000462DF
			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			// Token: 0x06001392 RID: 5010 RVA: 0x0004810B File Offset: 0x0004630B
			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			// Token: 0x06001393 RID: 5011 RVA: 0x00048138 File Offset: 0x00046338
			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			// Token: 0x06001394 RID: 5012 RVA: 0x0004816B File Offset: 0x0004636B
			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			// Token: 0x06001395 RID: 5013 RVA: 0x00048198 File Offset: 0x00046398
			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			// Token: 0x06001396 RID: 5014 RVA: 0x000481C9 File Offset: 0x000463C9
			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			// Token: 0x06001397 RID: 5015 RVA: 0x000481F4 File Offset: 0x000463F4
			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			// Token: 0x06001398 RID: 5016 RVA: 0x0004821F File Offset: 0x0004641F
			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			// Token: 0x06001399 RID: 5017 RVA: 0x0004824A File Offset: 0x0004644A
			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x0600139A RID: 5018 RVA: 0x0004827B File Offset: 0x0004647B
			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x0600139B RID: 5019 RVA: 0x000482AC File Offset: 0x000464AC
			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x0600139C RID: 5020 RVA: 0x000482D7 File Offset: 0x000464D7
			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x0600139D RID: 5021 RVA: 0x00048302 File Offset: 0x00046502
			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			// Token: 0x0600139E RID: 5022 RVA: 0x0004832D File Offset: 0x0004652D
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x0600139F RID: 5023 RVA: 0x00048362 File Offset: 0x00046562
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x060013A0 RID: 5024 RVA: 0x00048393 File Offset: 0x00046593
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x060013A1 RID: 5025 RVA: 0x000483BF File Offset: 0x000465BF
			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x060013A2 RID: 5026 RVA: 0x000483EC File Offset: 0x000465EC
			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamUGCDetails_t.PackSmall d = default(SteamUGCDetails_t.PackSmall);
				bool result = Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref d);
				pDetails = d;
				return result;
			}

			// Token: 0x060013A3 RID: 5027 RVA: 0x00048439 File Offset: 0x00046639
			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			// Token: 0x060013A4 RID: 5028 RVA: 0x00048468 File Offset: 0x00046668
			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			// Token: 0x060013A5 RID: 5029 RVA: 0x00048497 File Offset: 0x00046697
			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x060013A6 RID: 5030 RVA: 0x000484C6 File Offset: 0x000466C6
			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			// Token: 0x060013A7 RID: 5031 RVA: 0x000484F5 File Offset: 0x000466F5
			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			// Token: 0x060013A8 RID: 5032 RVA: 0x00048524 File Offset: 0x00046724
			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			// Token: 0x060013A9 RID: 5033 RVA: 0x00048566 File Offset: 0x00046766
			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			// Token: 0x060013AA RID: 5034 RVA: 0x00048592 File Offset: 0x00046792
			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			// Token: 0x060013AB RID: 5035 RVA: 0x000485C7 File Offset: 0x000467C7
			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x060013AC RID: 5036 RVA: 0x000485F2 File Offset: 0x000467F2
			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			// Token: 0x060013AD RID: 5037 RVA: 0x0004861E File Offset: 0x0004681E
			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			// Token: 0x060013AE RID: 5038 RVA: 0x0004864A File Offset: 0x0004684A
			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			// Token: 0x060013AF RID: 5039 RVA: 0x00048676 File Offset: 0x00046876
			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			// Token: 0x060013B0 RID: 5040 RVA: 0x000486A2 File Offset: 0x000468A2
			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			// Token: 0x060013B1 RID: 5041 RVA: 0x000486CE File Offset: 0x000468CE
			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			// Token: 0x060013B2 RID: 5042 RVA: 0x000486FA File Offset: 0x000468FA
			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			// Token: 0x060013B3 RID: 5043 RVA: 0x00048726 File Offset: 0x00046926
			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			// Token: 0x060013B4 RID: 5044 RVA: 0x00048752 File Offset: 0x00046952
			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			// Token: 0x060013B5 RID: 5045 RVA: 0x0004877E File Offset: 0x0004697E
			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			// Token: 0x060013B6 RID: 5046 RVA: 0x000487AA File Offset: 0x000469AA
			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x060013B7 RID: 5047 RVA: 0x000487D6 File Offset: 0x000469D6
			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			// Token: 0x060013B8 RID: 5048 RVA: 0x00048802 File Offset: 0x00046A02
			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			// Token: 0x060013B9 RID: 5049 RVA: 0x0004882E File Offset: 0x00046A2E
			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			// Token: 0x060013BA RID: 5050 RVA: 0x0004885A File Offset: 0x00046A5A
			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			// Token: 0x060013BB RID: 5051 RVA: 0x00048886 File Offset: 0x00046A86
			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			// Token: 0x060013BC RID: 5052 RVA: 0x000488B2 File Offset: 0x00046AB2
			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			// Token: 0x060013BD RID: 5053 RVA: 0x000488DF File Offset: 0x00046ADF
			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			// Token: 0x060013BE RID: 5054 RVA: 0x0004890B File Offset: 0x00046B0B
			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			// Token: 0x060013BF RID: 5055 RVA: 0x00048937 File Offset: 0x00046B37
			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			// Token: 0x060013C0 RID: 5056 RVA: 0x00048963 File Offset: 0x00046B63
			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			// Token: 0x060013C1 RID: 5057 RVA: 0x0004898F File Offset: 0x00046B8F
			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			// Token: 0x060013C2 RID: 5058 RVA: 0x000489BB File Offset: 0x00046BBB
			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x060013C3 RID: 5059 RVA: 0x000489E7 File Offset: 0x00046BE7
			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			// Token: 0x060013C4 RID: 5060 RVA: 0x00048A13 File Offset: 0x00046C13
			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			// Token: 0x060013C5 RID: 5061 RVA: 0x00048A40 File Offset: 0x00046C40
			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				bool result = Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x060013C6 RID: 5062 RVA: 0x00048A8C File Offset: 0x00046C8C
			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			// Token: 0x060013C7 RID: 5063 RVA: 0x00048AB8 File Offset: 0x00046CB8
			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			// Token: 0x060013C8 RID: 5064 RVA: 0x00048AE4 File Offset: 0x00046CE4
			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			// Token: 0x060013C9 RID: 5065 RVA: 0x00048B10 File Offset: 0x00046D10
			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			// Token: 0x060013CA RID: 5066 RVA: 0x00048B3D File Offset: 0x00046D3D
			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			// Token: 0x060013CB RID: 5067 RVA: 0x00048B6A File Offset: 0x00046D6A
			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			// Token: 0x060013CC RID: 5068 RVA: 0x00048B96 File Offset: 0x00046D96
			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			// Token: 0x060013CD RID: 5069 RVA: 0x00048BC3 File Offset: 0x00046DC3
			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			// Token: 0x060013CE RID: 5070 RVA: 0x00048BF0 File Offset: 0x00046DF0
			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			// Token: 0x060013CF RID: 5071 RVA: 0x00048C1C File Offset: 0x00046E1C
			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			// Token: 0x060013D0 RID: 5072 RVA: 0x00048C48 File Offset: 0x00046E48
			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			// Token: 0x060013D1 RID: 5073 RVA: 0x00048C75 File Offset: 0x00046E75
			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			// Token: 0x060013D2 RID: 5074 RVA: 0x00048CA1 File Offset: 0x00046EA1
			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			// Token: 0x060013D3 RID: 5075 RVA: 0x00048CCC File Offset: 0x00046ECC
			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x060013D4 RID: 5076 RVA: 0x00048CF8 File Offset: 0x00046EF8
			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x060013D5 RID: 5077 RVA: 0x00048D24 File Offset: 0x00046F24
			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x060013D6 RID: 5078 RVA: 0x00048D4F File Offset: 0x00046F4F
			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x060013D7 RID: 5079 RVA: 0x00048D7A File Offset: 0x00046F7A
			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			// Token: 0x060013D8 RID: 5080 RVA: 0x00048DA4 File Offset: 0x00046FA4
			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x060013D9 RID: 5081 RVA: 0x00048DD0 File Offset: 0x00046FD0
			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			// Token: 0x060013DA RID: 5082 RVA: 0x00048DFB File Offset: 0x00046FFB
			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			// Token: 0x060013DB RID: 5083 RVA: 0x00048E2C File Offset: 0x0004702C
			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x060013DC RID: 5084 RVA: 0x00048E59 File Offset: 0x00047059
			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			// Token: 0x060013DD RID: 5085 RVA: 0x00048E85 File Offset: 0x00047085
			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			// Token: 0x060013DE RID: 5086 RVA: 0x00048EB1 File Offset: 0x000470B1
			public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			// Token: 0x060013DF RID: 5087 RVA: 0x00048EDC File Offset: 0x000470DC
			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x060013E0 RID: 5088 RVA: 0x00048F08 File Offset: 0x00047108
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x060013E1 RID: 5089 RVA: 0x00048F34 File Offset: 0x00047134
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			// Token: 0x060013E2 RID: 5090 RVA: 0x00048F5E File Offset: 0x0004715E
			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x060013E3 RID: 5091 RVA: 0x00048F8A File Offset: 0x0004718A
			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x060013E4 RID: 5092 RVA: 0x00048FB6 File Offset: 0x000471B6
			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x060013E5 RID: 5093 RVA: 0x00048FE2 File Offset: 0x000471E2
			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x060013E6 RID: 5094 RVA: 0x0004900E File Offset: 0x0004720E
			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			// Token: 0x060013E7 RID: 5095 RVA: 0x00049039 File Offset: 0x00047239
			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x060013E8 RID: 5096 RVA: 0x00049064 File Offset: 0x00047264
			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			// Token: 0x060013E9 RID: 5097 RVA: 0x0004908E File Offset: 0x0004728E
			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			// Token: 0x060013EA RID: 5098 RVA: 0x000490BA File Offset: 0x000472BA
			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			// Token: 0x060013EB RID: 5099 RVA: 0x000490E7 File Offset: 0x000472E7
			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			// Token: 0x060013EC RID: 5100 RVA: 0x00049114 File Offset: 0x00047314
			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			// Token: 0x060013ED RID: 5101 RVA: 0x0004913F File Offset: 0x0004733F
			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			// Token: 0x060013EE RID: 5102 RVA: 0x00049169 File Offset: 0x00047369
			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			// Token: 0x060013EF RID: 5103 RVA: 0x00049193 File Offset: 0x00047393
			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			// Token: 0x060013F0 RID: 5104 RVA: 0x000491BD File Offset: 0x000473BD
			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			// Token: 0x060013F1 RID: 5105 RVA: 0x000491E9 File Offset: 0x000473E9
			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			// Token: 0x060013F2 RID: 5106 RVA: 0x00049214 File Offset: 0x00047414
			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			// Token: 0x060013F3 RID: 5107 RVA: 0x00049241 File Offset: 0x00047441
			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			// Token: 0x060013F4 RID: 5108 RVA: 0x0004926E File Offset: 0x0004746E
			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			// Token: 0x060013F5 RID: 5109 RVA: 0x00049299 File Offset: 0x00047499
			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			// Token: 0x060013F6 RID: 5110 RVA: 0x000492C4 File Offset: 0x000474C4
			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			// Token: 0x060013F7 RID: 5111 RVA: 0x000492EF File Offset: 0x000474EF
			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			// Token: 0x060013F8 RID: 5112 RVA: 0x0004931A File Offset: 0x0004751A
			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			// Token: 0x060013F9 RID: 5113 RVA: 0x00049347 File Offset: 0x00047547
			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			// Token: 0x060013FA RID: 5114 RVA: 0x00049373 File Offset: 0x00047573
			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x060013FB RID: 5115 RVA: 0x0004939F File Offset: 0x0004759F
			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x060013FC RID: 5116 RVA: 0x000493CB File Offset: 0x000475CB
			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x060013FD RID: 5117 RVA: 0x000493F7 File Offset: 0x000475F7
			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x060013FE RID: 5118 RVA: 0x00049424 File Offset: 0x00047624
			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			// Token: 0x060013FF RID: 5119 RVA: 0x00049450 File Offset: 0x00047650
			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001400 RID: 5120 RVA: 0x0004947D File Offset: 0x0004767D
			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001401 RID: 5121 RVA: 0x000494AA File Offset: 0x000476AA
			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			// Token: 0x06001402 RID: 5122 RVA: 0x000494D7 File Offset: 0x000476D7
			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001403 RID: 5123 RVA: 0x00049503 File Offset: 0x00047703
			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001404 RID: 5124 RVA: 0x0004952F File Offset: 0x0004772F
			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			// Token: 0x06001405 RID: 5125 RVA: 0x0004955B File Offset: 0x0004775B
			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001406 RID: 5126 RVA: 0x00049586 File Offset: 0x00047786
			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001407 RID: 5127 RVA: 0x000495B1 File Offset: 0x000477B1
			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001408 RID: 5128 RVA: 0x000495DC File Offset: 0x000477DC
			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			// Token: 0x06001409 RID: 5129 RVA: 0x0004960B File Offset: 0x0004780B
			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			// Token: 0x0600140A RID: 5130 RVA: 0x00049636 File Offset: 0x00047836
			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x0600140B RID: 5131 RVA: 0x00049663 File Offset: 0x00047863
			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			// Token: 0x0600140C RID: 5132 RVA: 0x00049698 File Offset: 0x00047898
			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			// Token: 0x0600140D RID: 5133 RVA: 0x000496C7 File Offset: 0x000478C7
			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			// Token: 0x0600140E RID: 5134 RVA: 0x000496F3 File Offset: 0x000478F3
			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			// Token: 0x0600140F RID: 5135 RVA: 0x0004971F File Offset: 0x0004791F
			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			// Token: 0x06001410 RID: 5136 RVA: 0x0004974B File Offset: 0x0004794B
			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			// Token: 0x06001411 RID: 5137 RVA: 0x00049777 File Offset: 0x00047977
			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			// Token: 0x06001412 RID: 5138 RVA: 0x000497A2 File Offset: 0x000479A2
			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			// Token: 0x06001413 RID: 5139 RVA: 0x000497CF File Offset: 0x000479CF
			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001414 RID: 5140 RVA: 0x00049800 File Offset: 0x00047A00
			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			// Token: 0x06001415 RID: 5141 RVA: 0x0004982B File Offset: 0x00047A2B
			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			// Token: 0x06001416 RID: 5142 RVA: 0x00049857 File Offset: 0x00047A57
			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			// Token: 0x06001417 RID: 5143 RVA: 0x00049882 File Offset: 0x00047A82
			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x06001418 RID: 5144 RVA: 0x000498AD File Offset: 0x00047AAD
			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			// Token: 0x06001419 RID: 5145 RVA: 0x000498DA File Offset: 0x00047ADA
			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			// Token: 0x0600141A RID: 5146 RVA: 0x00049907 File Offset: 0x00047B07
			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			// Token: 0x0600141B RID: 5147 RVA: 0x00049936 File Offset: 0x00047B36
			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x0600141C RID: 5148 RVA: 0x00049965 File Offset: 0x00047B65
			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x0600141D RID: 5149 RVA: 0x00049990 File Offset: 0x00047B90
			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			// Token: 0x0600141E RID: 5150 RVA: 0x000499BC File Offset: 0x00047BBC
			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			// Token: 0x0600141F RID: 5151 RVA: 0x000499E9 File Offset: 0x00047BE9
			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			// Token: 0x06001420 RID: 5152 RVA: 0x00049A16 File Offset: 0x00047C16
			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			// Token: 0x06001421 RID: 5153 RVA: 0x00049A4B File Offset: 0x00047C4B
			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			// Token: 0x06001422 RID: 5154 RVA: 0x00049A7A File Offset: 0x00047C7A
			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			// Token: 0x06001423 RID: 5155 RVA: 0x00049AA4 File Offset: 0x00047CA4
			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			// Token: 0x06001424 RID: 5156 RVA: 0x00049AD0 File Offset: 0x00047CD0
			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			// Token: 0x06001425 RID: 5157 RVA: 0x00049B12 File Offset: 0x00047D12
			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			// Token: 0x06001426 RID: 5158 RVA: 0x00049B3C File Offset: 0x00047D3C
			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x06001427 RID: 5159 RVA: 0x00049B68 File Offset: 0x00047D68
			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001428 RID: 5160 RVA: 0x00049B97 File Offset: 0x00047D97
			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			// Token: 0x06001429 RID: 5161 RVA: 0x00049BC2 File Offset: 0x00047DC2
			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x0600142A RID: 5162 RVA: 0x00049BEF File Offset: 0x00047DEF
			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x0600142B RID: 5163 RVA: 0x00049C1C File Offset: 0x00047E1C
			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			// Token: 0x0600142C RID: 5164 RVA: 0x00049C46 File Offset: 0x00047E46
			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			// Token: 0x0600142D RID: 5165 RVA: 0x00049C70 File Offset: 0x00047E70
			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			// Token: 0x0600142E RID: 5166 RVA: 0x00049C9D File Offset: 0x00047E9D
			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			// Token: 0x0600142F RID: 5167 RVA: 0x00049CC9 File Offset: 0x00047EC9
			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			// Token: 0x06001430 RID: 5168 RVA: 0x00049CF3 File Offset: 0x00047EF3
			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			// Token: 0x06001431 RID: 5169 RVA: 0x00049D20 File Offset: 0x00047F20
			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			// Token: 0x06001432 RID: 5170 RVA: 0x00049D4F File Offset: 0x00047F4F
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			// Token: 0x06001433 RID: 5171 RVA: 0x00049D7E File Offset: 0x00047F7E
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			// Token: 0x06001434 RID: 5172 RVA: 0x00049DAD File Offset: 0x00047FAD
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			// Token: 0x06001435 RID: 5173 RVA: 0x00049DDC File Offset: 0x00047FDC
			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			// Token: 0x06001436 RID: 5174 RVA: 0x00049E08 File Offset: 0x00048008
			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			// Token: 0x06001437 RID: 5175 RVA: 0x00049E33 File Offset: 0x00048033
			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			// Token: 0x06001438 RID: 5176 RVA: 0x00049E5E File Offset: 0x0004805E
			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			// Token: 0x06001439 RID: 5177 RVA: 0x00049E89 File Offset: 0x00048089
			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			// Token: 0x0600143A RID: 5178 RVA: 0x00049EB6 File Offset: 0x000480B6
			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			// Token: 0x0600143B RID: 5179 RVA: 0x00049EE0 File Offset: 0x000480E0
			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			// Token: 0x0600143C RID: 5180 RVA: 0x00049F0A File Offset: 0x0004810A
			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			// Token: 0x0600143D RID: 5181 RVA: 0x00049F35 File Offset: 0x00048135
			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			// Token: 0x0600143E RID: 5182 RVA: 0x00049F60 File Offset: 0x00048160
			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			// Token: 0x0600143F RID: 5183 RVA: 0x00049F8B File Offset: 0x0004818B
			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			// Token: 0x06001440 RID: 5184 RVA: 0x00049FB6 File Offset: 0x000481B6
			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			// Token: 0x06001441 RID: 5185 RVA: 0x00049FE9 File Offset: 0x000481E9
			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			// Token: 0x06001442 RID: 5186 RVA: 0x0004A014 File Offset: 0x00048214
			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			// Token: 0x06001443 RID: 5187 RVA: 0x0004A03F File Offset: 0x0004823F
			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			// Token: 0x06001444 RID: 5188 RVA: 0x0004A06A File Offset: 0x0004826A
			public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			// Token: 0x06001445 RID: 5189 RVA: 0x0004A095 File Offset: 0x00048295
			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			// Token: 0x06001446 RID: 5190 RVA: 0x0004A0C0 File Offset: 0x000482C0
			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			// Token: 0x06001447 RID: 5191 RVA: 0x0004A0EA File Offset: 0x000482EA
			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			// Token: 0x06001448 RID: 5192 RVA: 0x0004A114 File Offset: 0x00048314
			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			// Token: 0x06001449 RID: 5193 RVA: 0x0004A13E File Offset: 0x0004833E
			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			// Token: 0x0600144A RID: 5194 RVA: 0x0004A168 File Offset: 0x00048368
			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			// Token: 0x0600144B RID: 5195 RVA: 0x0004A192 File Offset: 0x00048392
			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			// Token: 0x0600144C RID: 5196 RVA: 0x0004A1BC File Offset: 0x000483BC
			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			// Token: 0x0600144D RID: 5197 RVA: 0x0004A1E7 File Offset: 0x000483E7
			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			// Token: 0x0600144E RID: 5198 RVA: 0x0004A212 File Offset: 0x00048412
			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			// Token: 0x0600144F RID: 5199 RVA: 0x0004A23D File Offset: 0x0004843D
			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			// Token: 0x06001450 RID: 5200 RVA: 0x0004A268 File Offset: 0x00048468
			public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			// Token: 0x06001451 RID: 5201 RVA: 0x0004A293 File Offset: 0x00048493
			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			// Token: 0x06001452 RID: 5202 RVA: 0x0004A2BE File Offset: 0x000484BE
			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			// Token: 0x06001453 RID: 5203 RVA: 0x0004A2E9 File Offset: 0x000484E9
			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			// Token: 0x06001454 RID: 5204 RVA: 0x0004A313 File Offset: 0x00048513
			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			// Token: 0x06001455 RID: 5205 RVA: 0x0004A33F File Offset: 0x0004853F
			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			// Token: 0x06001456 RID: 5206 RVA: 0x0004A36A File Offset: 0x0004856A
			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			// Token: 0x06001457 RID: 5207 RVA: 0x0004A395 File Offset: 0x00048595
			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			// Token: 0x06001458 RID: 5208 RVA: 0x0004A3C0 File Offset: 0x000485C0
			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			// Token: 0x06001459 RID: 5209 RVA: 0x0004A3EF File Offset: 0x000485EF
			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			// Token: 0x0600145A RID: 5210 RVA: 0x0004A419 File Offset: 0x00048619
			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			// Token: 0x0600145B RID: 5211 RVA: 0x0004A444 File Offset: 0x00048644
			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			// Token: 0x0600145C RID: 5212 RVA: 0x0004A471 File Offset: 0x00048671
			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x0600145D RID: 5213 RVA: 0x0004A49E File Offset: 0x0004869E
			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x0600145E RID: 5214 RVA: 0x0004A4CB File Offset: 0x000486CB
			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x0600145F RID: 5215 RVA: 0x0004A4F6 File Offset: 0x000486F6
			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x06001460 RID: 5216 RVA: 0x0004A521 File Offset: 0x00048721
			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x06001461 RID: 5217 RVA: 0x0004A54D File Offset: 0x0004874D
			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			// Token: 0x06001462 RID: 5218 RVA: 0x0004A579 File Offset: 0x00048779
			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			// Token: 0x06001463 RID: 5219 RVA: 0x0004A5A3 File Offset: 0x000487A3
			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			// Token: 0x06001464 RID: 5220 RVA: 0x0004A5CD File Offset: 0x000487CD
			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			// Token: 0x06001465 RID: 5221 RVA: 0x0004A5F7 File Offset: 0x000487F7
			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			// Token: 0x06001466 RID: 5222 RVA: 0x0004A626 File Offset: 0x00048826
			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			// Token: 0x06001467 RID: 5223 RVA: 0x0004A655 File Offset: 0x00048855
			public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			// Token: 0x06001468 RID: 5224 RVA: 0x0004A680 File Offset: 0x00048880
			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			// Token: 0x06001469 RID: 5225 RVA: 0x0004A6AB File Offset: 0x000488AB
			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Linux64.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			// Token: 0x0600146A RID: 5226 RVA: 0x0004A6D5 File Offset: 0x000488D5
			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			// Token: 0x0600146B RID: 5227 RVA: 0x0004A700 File Offset: 0x00048900
			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			// Token: 0x0600146C RID: 5228 RVA: 0x0004A72B File Offset: 0x0004892B
			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x0600146D RID: 5229 RVA: 0x0004A756 File Offset: 0x00048956
			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600146E RID: 5230 RVA: 0x0004A783 File Offset: 0x00048983
			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600146F RID: 5231 RVA: 0x0004A7B0 File Offset: 0x000489B0
			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x06001470 RID: 5232 RVA: 0x0004A7DD File Offset: 0x000489DD
			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			// Token: 0x06001471 RID: 5233 RVA: 0x0004A80A File Offset: 0x00048A0A
			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			// Token: 0x06001472 RID: 5234 RVA: 0x0004A837 File Offset: 0x00048A37
			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x06001473 RID: 5235 RVA: 0x0004A866 File Offset: 0x00048A66
			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x06001474 RID: 5236 RVA: 0x0004A892 File Offset: 0x00048A92
			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x06001475 RID: 5237 RVA: 0x0004A8BE File Offset: 0x00048ABE
			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Linux64.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x06001476 RID: 5238 RVA: 0x0004A8E9 File Offset: 0x00048AE9
			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Linux64.Native.SteamAPI_Init();
			}

			// Token: 0x06001477 RID: 5239 RVA: 0x0004A8F0 File Offset: 0x00048AF0
			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Linux64.Native.SteamAPI_RunCallbacks();
			}

			// Token: 0x06001478 RID: 5240 RVA: 0x0004A8F7 File Offset: 0x00048AF7
			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Linux64.Native.SteamGameServer_RunCallbacks();
			}

			// Token: 0x06001479 RID: 5241 RVA: 0x0004A8FE File Offset: 0x00048AFE
			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Linux64.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			// Token: 0x0600147A RID: 5242 RVA: 0x0004A907 File Offset: 0x00048B07
			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Linux64.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			// Token: 0x0600147B RID: 5243 RVA: 0x0004A90F File Offset: 0x00048B0F
			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux64.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			// Token: 0x0600147C RID: 5244 RVA: 0x0004A918 File Offset: 0x00048B18
			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Linux64.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			// Token: 0x0600147D RID: 5245 RVA: 0x0004A921 File Offset: 0x00048B21
			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Linux64.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			// Token: 0x0600147E RID: 5246 RVA: 0x0004A931 File Offset: 0x00048B31
			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Linux64.Native.SteamAPI_Shutdown();
			}

			// Token: 0x0600147F RID: 5247 RVA: 0x0004A938 File Offset: 0x00048B38
			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Linux64.Native.SteamGameServer_Shutdown();
			}

			// Token: 0x06001480 RID: 5248 RVA: 0x0004A93F File Offset: 0x00048B3F
			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Linux64.Native.SteamAPI_GetHSteamUser();
			}

			// Token: 0x06001481 RID: 5249 RVA: 0x0004A946 File Offset: 0x00048B46
			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Linux64.Native.SteamAPI_GetHSteamPipe();
			}

			// Token: 0x06001482 RID: 5250 RVA: 0x0004A94D File Offset: 0x00048B4D
			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Linux64.Native.SteamGameServer_GetHSteamUser();
			}

			// Token: 0x06001483 RID: 5251 RVA: 0x0004A954 File Offset: 0x00048B54
			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Linux64.Native.SteamGameServer_GetHSteamPipe();
			}

			// Token: 0x06001484 RID: 5252 RVA: 0x0004A95B File Offset: 0x00048B5B
			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Linux64.Native.SteamInternal_CreateInterface(version);
			}

			// Token: 0x06001485 RID: 5253 RVA: 0x0004A963 File Offset: 0x00048B63
			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Linux64.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			// Token: 0x04000931 RID: 2353
			internal IntPtr _ptr;

			// Token: 0x020002B5 RID: 693
			internal static class Native
			{
				// Token: 0x06002271 RID: 8817
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				// Token: 0x06002272 RID: 8818
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06002273 RID: 8819
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06002274 RID: 8820
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				// Token: 0x06002275 RID: 8821
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				// Token: 0x06002276 RID: 8822
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002277 RID: 8823
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002278 RID: 8824
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				// Token: 0x06002279 RID: 8825
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600227A RID: 8826
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				// Token: 0x0600227B RID: 8827
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600227C RID: 8828
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600227D RID: 8829
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600227E RID: 8830
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600227F RID: 8831
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002280 RID: 8832
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002281 RID: 8833
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002282 RID: 8834
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002283 RID: 8835
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002284 RID: 8836
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				// Token: 0x06002285 RID: 8837
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				// Token: 0x06002286 RID: 8838
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				// Token: 0x06002287 RID: 8839
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002288 RID: 8840
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002289 RID: 8841
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600228A RID: 8842
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600228B RID: 8843
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600228C RID: 8844
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600228D RID: 8845
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600228E RID: 8846
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600228F RID: 8847
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002290 RID: 8848
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002291 RID: 8849
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				// Token: 0x06002292 RID: 8850
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				// Token: 0x06002293 RID: 8851
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				// Token: 0x06002294 RID: 8852
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

				// Token: 0x06002295 RID: 8853
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				// Token: 0x06002296 RID: 8854
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				// Token: 0x06002297 RID: 8855
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				// Token: 0x06002298 RID: 8856
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002299 RID: 8857
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				// Token: 0x0600229A RID: 8858
				[DllImport("libsteam_api64.so")]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x0600229B RID: 8859
				[DllImport("libsteam_api64.so")]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, [MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x0600229C RID: 8860
				[DllImport("libsteam_api64.so")]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				// Token: 0x0600229D RID: 8861
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				// Token: 0x0600229E RID: 8862
				[DllImport("libsteam_api64.so")]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x0600229F RID: 8863
				[DllImport("libsteam_api64.so")]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x060022A0 RID: 8864
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				// Token: 0x060022A1 RID: 8865
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				// Token: 0x060022A2 RID: 8866
				[DllImport("libsteam_api64.so")]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				// Token: 0x060022A3 RID: 8867
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				// Token: 0x060022A4 RID: 8868
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				// Token: 0x060022A5 RID: 8869
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				// Token: 0x060022A6 RID: 8870
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x060022A7 RID: 8871
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

				// Token: 0x060022A8 RID: 8872
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				// Token: 0x060022A9 RID: 8873
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				// Token: 0x060022AA RID: 8874
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				// Token: 0x060022AB RID: 8875
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				// Token: 0x060022AC RID: 8876
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				// Token: 0x060022AD RID: 8877
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				// Token: 0x060022AE RID: 8878
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				// Token: 0x060022AF RID: 8879
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				// Token: 0x060022B0 RID: 8880
				[DllImport("libsteam_api64.so")]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				// Token: 0x060022B1 RID: 8881
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				// Token: 0x060022B2 RID: 8882
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				// Token: 0x060022B3 RID: 8883
				[DllImport("libsteam_api64.so")]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022B4 RID: 8884
				[DllImport("libsteam_api64.so")]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022B5 RID: 8885
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022B6 RID: 8886
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t.PackSmall pFriendGameInfo);

				// Token: 0x060022B7 RID: 8887
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				// Token: 0x060022B8 RID: 8888
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022B9 RID: 8889
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				// Token: 0x060022BA RID: 8890
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				// Token: 0x060022BB RID: 8891
				[DllImport("libsteam_api64.so")]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				// Token: 0x060022BC RID: 8892
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x060022BD RID: 8893
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x060022BE RID: 8894
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				// Token: 0x060022BF RID: 8895
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				// Token: 0x060022C0 RID: 8896
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				// Token: 0x060022C1 RID: 8897
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				// Token: 0x060022C2 RID: 8898
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022C3 RID: 8899
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022C4 RID: 8900
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				// Token: 0x060022C5 RID: 8901
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				// Token: 0x060022C6 RID: 8902
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				// Token: 0x060022C7 RID: 8903
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				// Token: 0x060022C8 RID: 8904
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				// Token: 0x060022C9 RID: 8905
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

				// Token: 0x060022CA RID: 8906
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				// Token: 0x060022CB RID: 8907
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				// Token: 0x060022CC RID: 8908
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				// Token: 0x060022CD RID: 8909
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				// Token: 0x060022CE RID: 8910
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				// Token: 0x060022CF RID: 8911
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				// Token: 0x060022D0 RID: 8912
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022D1 RID: 8913
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022D2 RID: 8914
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022D3 RID: 8915
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

				// Token: 0x060022D4 RID: 8916
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022D5 RID: 8917
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022D6 RID: 8918
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022D7 RID: 8919
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				// Token: 0x060022D8 RID: 8920
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				// Token: 0x060022D9 RID: 8921
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				// Token: 0x060022DA RID: 8922
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				// Token: 0x060022DB RID: 8923
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				// Token: 0x060022DC RID: 8924
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022DD RID: 8925
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				// Token: 0x060022DE RID: 8926
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022DF RID: 8927
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				// Token: 0x060022E0 RID: 8928
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				// Token: 0x060022E1 RID: 8929
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				// Token: 0x060022E2 RID: 8930
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022E3 RID: 8931
				[DllImport("libsteam_api64.so")]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060022E4 RID: 8932
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022E5 RID: 8933
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022E6 RID: 8934
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022E7 RID: 8935
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				// Token: 0x060022E8 RID: 8936
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				// Token: 0x060022E9 RID: 8937
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				// Token: 0x060022EA RID: 8938
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				// Token: 0x060022EB RID: 8939
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x060022EC RID: 8940
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x060022ED RID: 8941
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x060022EE RID: 8942
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

				// Token: 0x060022EF RID: 8943
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				// Token: 0x060022F0 RID: 8944
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x060022F1 RID: 8945
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x060022F2 RID: 8946
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x060022F3 RID: 8947
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				// Token: 0x060022F4 RID: 8948
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022F5 RID: 8949
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060022F6 RID: 8950
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				// Token: 0x060022F7 RID: 8951
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				// Token: 0x060022F8 RID: 8952
				[DllImport("libsteam_api64.so")]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				// Token: 0x060022F9 RID: 8953
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				// Token: 0x060022FA RID: 8954
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				// Token: 0x060022FB RID: 8955
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				// Token: 0x060022FC RID: 8956
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				// Token: 0x060022FD RID: 8957
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				// Token: 0x060022FE RID: 8958
				[DllImport("libsteam_api64.so")]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				// Token: 0x060022FF RID: 8959
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				// Token: 0x06002300 RID: 8960
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				// Token: 0x06002301 RID: 8961
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x06002302 RID: 8962
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				// Token: 0x06002303 RID: 8963
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x06002304 RID: 8964
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				// Token: 0x06002305 RID: 8965
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				// Token: 0x06002306 RID: 8966
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				// Token: 0x06002307 RID: 8967
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				// Token: 0x06002308 RID: 8968
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				// Token: 0x06002309 RID: 8969
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				// Token: 0x0600230A RID: 8970
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				// Token: 0x0600230B RID: 8971
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				// Token: 0x0600230C RID: 8972
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				// Token: 0x0600230D RID: 8973
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				// Token: 0x0600230E RID: 8974
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				// Token: 0x0600230F RID: 8975
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				// Token: 0x06002310 RID: 8976
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				// Token: 0x06002311 RID: 8977
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				// Token: 0x06002312 RID: 8978
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x06002313 RID: 8979
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				// Token: 0x06002314 RID: 8980
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				// Token: 0x06002315 RID: 8981
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				// Token: 0x06002316 RID: 8982
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				// Token: 0x06002317 RID: 8983
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				// Token: 0x06002318 RID: 8984
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x06002319 RID: 8985
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x0600231A RID: 8986
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				// Token: 0x0600231B RID: 8987
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				// Token: 0x0600231C RID: 8988
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				// Token: 0x0600231D RID: 8989
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				// Token: 0x0600231E RID: 8990
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x0600231F RID: 8991
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				// Token: 0x06002320 RID: 8992
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				// Token: 0x06002321 RID: 8993
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002322 RID: 8994
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002323 RID: 8995
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				// Token: 0x06002324 RID: 8996
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002325 RID: 8997
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				// Token: 0x06002326 RID: 8998
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x06002327 RID: 8999
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x06002328 RID: 9000
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002329 RID: 9001
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				// Token: 0x0600232A RID: 9002
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x0600232B RID: 9003
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				// Token: 0x0600232C RID: 9004
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x0600232D RID: 9005
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				// Token: 0x0600232E RID: 9006
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x0600232F RID: 9007
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002330 RID: 9008
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				// Token: 0x06002331 RID: 9009
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				// Token: 0x06002332 RID: 9010
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				// Token: 0x06002333 RID: 9011
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002334 RID: 9012
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				// Token: 0x06002335 RID: 9013
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

				// Token: 0x06002336 RID: 9014
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002337 RID: 9015
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				// Token: 0x06002338 RID: 9016
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				// Token: 0x06002339 RID: 9017
				[DllImport("libsteam_api64.so")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600233A RID: 9018
				[DllImport("libsteam_api64.so")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				// Token: 0x0600233B RID: 9019
				[DllImport("libsteam_api64.so")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600233C RID: 9020
				[DllImport("libsteam_api64.so")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600233D RID: 9021
				[DllImport("libsteam_api64.so")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600233E RID: 9022
				[DllImport("libsteam_api64.so")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x0600233F RID: 9023
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				// Token: 0x06002340 RID: 9024
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002341 RID: 9025
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002342 RID: 9026
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002343 RID: 9027
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002344 RID: 9028
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002345 RID: 9029
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002346 RID: 9030
				[DllImport("libsteam_api64.so")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002347 RID: 9031
				[DllImport("libsteam_api64.so")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002348 RID: 9032
				[DllImport("libsteam_api64.so")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002349 RID: 9033
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				// Token: 0x0600234A RID: 9034
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				// Token: 0x0600234B RID: 9035
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				// Token: 0x0600234C RID: 9036
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				// Token: 0x0600234D RID: 9037
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				// Token: 0x0600234E RID: 9038
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				// Token: 0x0600234F RID: 9039
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002350 RID: 9040
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002351 RID: 9041
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002352 RID: 9042
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				// Token: 0x06002353 RID: 9043
				[DllImport("libsteam_api64.so")]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002354 RID: 9044
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				// Token: 0x06002355 RID: 9045
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002356 RID: 9046
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002357 RID: 9047
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002358 RID: 9048
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002359 RID: 9049
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600235A RID: 9050
				[DllImport("libsteam_api64.so")]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600235B RID: 9051
				[DllImport("libsteam_api64.so")]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600235C RID: 9052
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				// Token: 0x0600235D RID: 9053
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				// Token: 0x0600235E RID: 9054
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				// Token: 0x0600235F RID: 9055
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				// Token: 0x06002360 RID: 9056
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				// Token: 0x06002361 RID: 9057
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x06002362 RID: 9058
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				// Token: 0x06002363 RID: 9059
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				// Token: 0x06002364 RID: 9060
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				// Token: 0x06002365 RID: 9061
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				// Token: 0x06002366 RID: 9062
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				// Token: 0x06002367 RID: 9063
				[DllImport("libsteam_api64.so")]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				// Token: 0x06002368 RID: 9064
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags, WorkshopFileType eWorkshopFileType);

				// Token: 0x06002369 RID: 9065
				[DllImport("libsteam_api64.so")]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x0600236A RID: 9066
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				// Token: 0x0600236B RID: 9067
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				// Token: 0x0600236C RID: 9068
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				// Token: 0x0600236D RID: 9069
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				// Token: 0x0600236E RID: 9070
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x0600236F RID: 9071
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x06002370 RID: 9072
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				// Token: 0x06002371 RID: 9073
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				// Token: 0x06002372 RID: 9074
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002373 RID: 9075
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x06002374 RID: 9076
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002375 RID: 9077
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x06002376 RID: 9078
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002377 RID: 9079
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				// Token: 0x06002378 RID: 9080
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002379 RID: 9081
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x0600237A RID: 9082
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x0600237B RID: 9083
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t.PackSmall pRequiredTags, ref SteamParamStringArray_t.PackSmall pExcludedTags);

				// Token: 0x0600237C RID: 9084
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x0600237D RID: 9085
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				// Token: 0x0600237E RID: 9086
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				// Token: 0x0600237F RID: 9087
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t.PackSmall pTags, ref SteamParamStringArray_t.PackSmall pUserTags);

				// Token: 0x06002380 RID: 9088
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				// Token: 0x06002381 RID: 9089
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				// Token: 0x06002382 RID: 9090
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				// Token: 0x06002383 RID: 9091
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				// Token: 0x06002384 RID: 9092
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				// Token: 0x06002385 RID: 9093
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				// Token: 0x06002386 RID: 9094
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x06002387 RID: 9095
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002388 RID: 9096
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002389 RID: 9097
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x0600238A RID: 9098
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x0600238B RID: 9099
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				// Token: 0x0600238C RID: 9100
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				// Token: 0x0600238D RID: 9101
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				// Token: 0x0600238E RID: 9102
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				// Token: 0x0600238F RID: 9103
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				// Token: 0x06002390 RID: 9104
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				// Token: 0x06002391 RID: 9105
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				// Token: 0x06002392 RID: 9106
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002393 RID: 9107
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x06002394 RID: 9108
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002395 RID: 9109
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002396 RID: 9110
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

				// Token: 0x06002397 RID: 9111
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				// Token: 0x06002398 RID: 9112
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				// Token: 0x06002399 RID: 9113
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x0600239A RID: 9114
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x0600239B RID: 9115
				[DllImport("libsteam_api64.so")]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x0600239C RID: 9116
				[DllImport("libsteam_api64.so")]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x0600239D RID: 9117
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				// Token: 0x0600239E RID: 9118
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				// Token: 0x0600239F RID: 9119
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t.PackSmall pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				// Token: 0x060023A0 RID: 9120
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				// Token: 0x060023A1 RID: 9121
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				// Token: 0x060023A2 RID: 9122
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				// Token: 0x060023A3 RID: 9123
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				// Token: 0x060023A4 RID: 9124
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060023A5 RID: 9125
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060023A6 RID: 9126
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				// Token: 0x060023A7 RID: 9127
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				// Token: 0x060023A8 RID: 9128
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				// Token: 0x060023A9 RID: 9129
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				// Token: 0x060023AA RID: 9130
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				// Token: 0x060023AB RID: 9131
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				// Token: 0x060023AC RID: 9132
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				// Token: 0x060023AD RID: 9133
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				// Token: 0x060023AE RID: 9134
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				// Token: 0x060023AF RID: 9135
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				// Token: 0x060023B0 RID: 9136
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				// Token: 0x060023B1 RID: 9137
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				// Token: 0x060023B2 RID: 9138
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				// Token: 0x060023B3 RID: 9139
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x060023B4 RID: 9140
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060023B5 RID: 9141
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				// Token: 0x060023B6 RID: 9142
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				// Token: 0x060023B7 RID: 9143
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x060023B8 RID: 9144
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060023B9 RID: 9145
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060023BA RID: 9146
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				// Token: 0x060023BB RID: 9147
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x060023BC RID: 9148
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

				// Token: 0x060023BD RID: 9149
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				// Token: 0x060023BE RID: 9150
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				// Token: 0x060023BF RID: 9151
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x060023C0 RID: 9152
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				// Token: 0x060023C1 RID: 9153
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				// Token: 0x060023C2 RID: 9154
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x060023C3 RID: 9155
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				// Token: 0x060023C4 RID: 9156
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				// Token: 0x060023C5 RID: 9157
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				// Token: 0x060023C6 RID: 9158
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				// Token: 0x060023C7 RID: 9159
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				// Token: 0x060023C8 RID: 9160
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				// Token: 0x060023C9 RID: 9161
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x060023CA RID: 9162
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x060023CB RID: 9163
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				// Token: 0x060023CC RID: 9164
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t.PackSmall pConnectionState);

				// Token: 0x060023CD RID: 9165
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, [MarshalAs(UnmanagedType.U1)] bool bAllow);

				// Token: 0x060023CE RID: 9166
				[DllImport("libsteam_api64.so")]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x060023CF RID: 9167
				[DllImport("libsteam_api64.so")]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x060023D0 RID: 9168
				[DllImport("libsteam_api64.so")]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				// Token: 0x060023D1 RID: 9169
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x060023D2 RID: 9170
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x060023D3 RID: 9171
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

				// Token: 0x060023D4 RID: 9172
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				// Token: 0x060023D5 RID: 9173
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				// Token: 0x060023D6 RID: 9174
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x060023D7 RID: 9175
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x060023D8 RID: 9176
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				// Token: 0x060023D9 RID: 9177
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				// Token: 0x060023DA RID: 9178
				[DllImport("libsteam_api64.so")]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x060023DB RID: 9179
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x060023DC RID: 9180
				[DllImport("libsteam_api64.so")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				// Token: 0x060023DD RID: 9181
				[DllImport("libsteam_api64.so")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				// Token: 0x060023DE RID: 9182
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				// Token: 0x060023DF RID: 9183
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, [MarshalAs(UnmanagedType.U1)] bool bHook);

				// Token: 0x060023E0 RID: 9184
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				// Token: 0x060023E1 RID: 9185
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				// Token: 0x060023E2 RID: 9186
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				// Token: 0x060023E3 RID: 9187
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				// Token: 0x060023E4 RID: 9188
				[DllImport("libsteam_api64.so")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				// Token: 0x060023E5 RID: 9189
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				// Token: 0x060023E6 RID: 9190
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				// Token: 0x060023E7 RID: 9191
				[DllImport("libsteam_api64.so")]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				// Token: 0x060023E8 RID: 9192
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				// Token: 0x060023E9 RID: 9193
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				// Token: 0x060023EA RID: 9194
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				// Token: 0x060023EB RID: 9195
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				// Token: 0x060023EC RID: 9196
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				// Token: 0x060023ED RID: 9197
				[DllImport("libsteam_api64.so")]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				// Token: 0x060023EE RID: 9198
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				// Token: 0x060023EF RID: 9199
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x060023F0 RID: 9200
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x060023F1 RID: 9201
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023F2 RID: 9202
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				// Token: 0x060023F3 RID: 9203
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x060023F4 RID: 9204
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023F5 RID: 9205
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023F6 RID: 9206
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023F7 RID: 9207
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023F8 RID: 9208
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023F9 RID: 9209
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023FA RID: 9210
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				// Token: 0x060023FB RID: 9211
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023FC RID: 9212
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060023FD RID: 9213
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				// Token: 0x060023FE RID: 9214
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x060023FF RID: 9215
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bAvailable);

				// Token: 0x06002400 RID: 9216
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				// Token: 0x06002401 RID: 9217
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				// Token: 0x06002402 RID: 9218
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x06002403 RID: 9219
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002404 RID: 9220
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002405 RID: 9221
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				// Token: 0x06002406 RID: 9222
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x06002407 RID: 9223
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x06002408 RID: 9224
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002409 RID: 9225
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x0600240A RID: 9226
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				// Token: 0x0600240B RID: 9227
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x0600240C RID: 9228
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x0600240D RID: 9229
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x0600240E RID: 9230
				[DllImport("libsteam_api64.so")]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				// Token: 0x0600240F RID: 9231
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				// Token: 0x06002410 RID: 9232
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				// Token: 0x06002411 RID: 9233
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				// Token: 0x06002412 RID: 9234
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				// Token: 0x06002413 RID: 9235
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x06002414 RID: 9236
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x06002415 RID: 9237
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002416 RID: 9238
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002417 RID: 9239
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				// Token: 0x06002418 RID: 9240
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				// Token: 0x06002419 RID: 9241
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				// Token: 0x0600241A RID: 9242
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x0600241B RID: 9243
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x0600241C RID: 9244
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x0600241D RID: 9245
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				// Token: 0x0600241E RID: 9246
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				// Token: 0x0600241F RID: 9247
				[DllImport("libsteam_api64.so")]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

				// Token: 0x06002420 RID: 9248
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				// Token: 0x06002421 RID: 9249
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				// Token: 0x06002422 RID: 9250
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				// Token: 0x06002423 RID: 9251
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				// Token: 0x06002424 RID: 9252
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

				// Token: 0x06002425 RID: 9253
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				// Token: 0x06002426 RID: 9254
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

				// Token: 0x06002427 RID: 9255
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				// Token: 0x06002428 RID: 9256
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				// Token: 0x06002429 RID: 9257
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				// Token: 0x0600242A RID: 9258
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				// Token: 0x0600242B RID: 9259
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x0600242C RID: 9260
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				// Token: 0x0600242D RID: 9261
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				// Token: 0x0600242E RID: 9262
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x0600242F RID: 9263
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x06002430 RID: 9264
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x06002431 RID: 9265
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002432 RID: 9266
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				// Token: 0x06002433 RID: 9267
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x06002434 RID: 9268
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				// Token: 0x06002435 RID: 9269
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x06002436 RID: 9270
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x06002437 RID: 9271
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				// Token: 0x06002438 RID: 9272
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x06002439 RID: 9273
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				// Token: 0x0600243A RID: 9274
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				// Token: 0x0600243B RID: 9275
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				// Token: 0x0600243C RID: 9276
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				// Token: 0x0600243D RID: 9277
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				// Token: 0x0600243E RID: 9278
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				// Token: 0x0600243F RID: 9279
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				// Token: 0x06002440 RID: 9280
				[DllImport("libsteam_api64.so")]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002441 RID: 9281
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002442 RID: 9282
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002443 RID: 9283
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002444 RID: 9284
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002445 RID: 9285
				[DllImport("libsteam_api64.so")]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002446 RID: 9286
				[DllImport("libsteam_api64.so")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x06002447 RID: 9287
				[DllImport("libsteam_api64.so")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x06002448 RID: 9288
				[DllImport("libsteam_api64.so")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002449 RID: 9289
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x0600244A RID: 9290
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t.PackSmall pDetails);

				// Token: 0x0600244B RID: 9291
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				// Token: 0x0600244C RID: 9292
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				// Token: 0x0600244D RID: 9293
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x0600244E RID: 9294
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				// Token: 0x0600244F RID: 9295
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002450 RID: 9296
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				// Token: 0x06002451 RID: 9297
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002452 RID: 9298
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				// Token: 0x06002453 RID: 9299
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x06002454 RID: 9300
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002455 RID: 9301
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002456 RID: 9302
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

				// Token: 0x06002457 RID: 9303
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

				// Token: 0x06002458 RID: 9304
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

				// Token: 0x06002459 RID: 9305
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

				// Token: 0x0600245A RID: 9306
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

				// Token: 0x0600245B RID: 9307
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

				// Token: 0x0600245C RID: 9308
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

				// Token: 0x0600245D RID: 9309
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x0600245E RID: 9310
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x0600245F RID: 9311
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				// Token: 0x06002460 RID: 9312
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				// Token: 0x06002461 RID: 9313
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

				// Token: 0x06002462 RID: 9314
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				// Token: 0x06002463 RID: 9315
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x06002464 RID: 9316
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				// Token: 0x06002465 RID: 9317
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				// Token: 0x06002466 RID: 9318
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				// Token: 0x06002467 RID: 9319
				[DllImport("libsteam_api64.so")]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				// Token: 0x06002468 RID: 9320
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				// Token: 0x06002469 RID: 9321
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				// Token: 0x0600246A RID: 9322
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x0600246B RID: 9323
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				// Token: 0x0600246C RID: 9324
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x0600246D RID: 9325
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x0600246E RID: 9326
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				// Token: 0x0600246F RID: 9327
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				// Token: 0x06002470 RID: 9328
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				// Token: 0x06002471 RID: 9329
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				// Token: 0x06002472 RID: 9330
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				// Token: 0x06002473 RID: 9331
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				// Token: 0x06002474 RID: 9332
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				// Token: 0x06002475 RID: 9333
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				// Token: 0x06002476 RID: 9334
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002477 RID: 9335
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				// Token: 0x06002478 RID: 9336
				[DllImport("libsteam_api64.so")]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				// Token: 0x06002479 RID: 9337
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x0600247A RID: 9338
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600247B RID: 9339
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x0600247C RID: 9340
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x0600247D RID: 9341
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600247E RID: 9342
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600247F RID: 9343
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				// Token: 0x06002480 RID: 9344
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x06002481 RID: 9345
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002482 RID: 9346
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				// Token: 0x06002483 RID: 9347
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x06002484 RID: 9348
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

				// Token: 0x06002485 RID: 9349
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				// Token: 0x06002486 RID: 9350
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, [MarshalAs(UnmanagedType.U1)] bool bSuspend);

				// Token: 0x06002487 RID: 9351
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002488 RID: 9352
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002489 RID: 9353
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				// Token: 0x0600248A RID: 9354
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x0600248B RID: 9355
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x0600248C RID: 9356
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x0600248D RID: 9357
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x0600248E RID: 9358
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600248F RID: 9359
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002490 RID: 9360
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				// Token: 0x06002491 RID: 9361
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				// Token: 0x06002492 RID: 9362
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				// Token: 0x06002493 RID: 9363
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				// Token: 0x06002494 RID: 9364
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				// Token: 0x06002495 RID: 9365
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				// Token: 0x06002496 RID: 9366
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				// Token: 0x06002497 RID: 9367
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				// Token: 0x06002498 RID: 9368
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				// Token: 0x06002499 RID: 9369
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600249A RID: 9370
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				// Token: 0x0600249B RID: 9371
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				// Token: 0x0600249C RID: 9372
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600249D RID: 9373
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600249E RID: 9374
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600249F RID: 9375
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060024A0 RID: 9376
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				// Token: 0x060024A1 RID: 9377
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				// Token: 0x060024A2 RID: 9378
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x060024A3 RID: 9379
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x060024A4 RID: 9380
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x060024A5 RID: 9381
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x060024A6 RID: 9382
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				// Token: 0x060024A7 RID: 9383
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x060024A8 RID: 9384
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x060024A9 RID: 9385
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x060024AA RID: 9386
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x060024AB RID: 9387
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x060024AC RID: 9388
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

				// Token: 0x060024AD RID: 9389
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060024AE RID: 9390
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060024AF RID: 9391
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060024B0 RID: 9392
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

				// Token: 0x060024B1 RID: 9393
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x060024B2 RID: 9394
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x060024B3 RID: 9395
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

				// Token: 0x060024B4 RID: 9396
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				// Token: 0x060024B5 RID: 9397
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

				// Token: 0x060024B6 RID: 9398
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				// Token: 0x060024B7 RID: 9399
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

				// Token: 0x060024B8 RID: 9400
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

				// Token: 0x060024B9 RID: 9401
				[DllImport("libsteam_api64.so")]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x060024BA RID: 9402
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				// Token: 0x060024BB RID: 9403
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x060024BC RID: 9404
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x060024BD RID: 9405
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				// Token: 0x060024BE RID: 9406
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x060024BF RID: 9407
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x060024C0 RID: 9408
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				// Token: 0x060024C1 RID: 9409
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				// Token: 0x060024C2 RID: 9410
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

				// Token: 0x060024C3 RID: 9411
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x060024C4 RID: 9412
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x060024C5 RID: 9413
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				// Token: 0x060024C6 RID: 9414
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				// Token: 0x060024C7 RID: 9415
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				// Token: 0x060024C8 RID: 9416
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				// Token: 0x060024C9 RID: 9417
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				// Token: 0x060024CA RID: 9418
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				// Token: 0x060024CB RID: 9419
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				// Token: 0x060024CC RID: 9420
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				// Token: 0x060024CD RID: 9421
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				// Token: 0x060024CE RID: 9422
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x060024CF RID: 9423
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x060024D0 RID: 9424
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				// Token: 0x060024D1 RID: 9425
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x060024D2 RID: 9426
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x060024D3 RID: 9427
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				// Token: 0x060024D4 RID: 9428
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				// Token: 0x060024D5 RID: 9429
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				// Token: 0x060024D6 RID: 9430
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				// Token: 0x060024D7 RID: 9431
				[DllImport("libsteam_api64.so")]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				// Token: 0x060024D8 RID: 9432
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				// Token: 0x060024D9 RID: 9433
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				// Token: 0x060024DA RID: 9434
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060024DB RID: 9435
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				// Token: 0x060024DC RID: 9436
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				// Token: 0x060024DD RID: 9437
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				// Token: 0x060024DE RID: 9438
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x060024DF RID: 9439
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				// Token: 0x060024E0 RID: 9440
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x060024E1 RID: 9441
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				// Token: 0x060024E2 RID: 9442
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				// Token: 0x060024E3 RID: 9443
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				// Token: 0x060024E4 RID: 9444
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x060024E5 RID: 9445
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x060024E6 RID: 9446
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x060024E7 RID: 9447
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x060024E8 RID: 9448
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				// Token: 0x060024E9 RID: 9449
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				// Token: 0x060024EA RID: 9450
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				// Token: 0x060024EB RID: 9451
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				// Token: 0x060024EC RID: 9452
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bDedicated);

				// Token: 0x060024ED RID: 9453
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				// Token: 0x060024EE RID: 9454
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				// Token: 0x060024EF RID: 9455
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				// Token: 0x060024F0 RID: 9456
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				// Token: 0x060024F1 RID: 9457
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				// Token: 0x060024F2 RID: 9458
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				// Token: 0x060024F3 RID: 9459
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				// Token: 0x060024F4 RID: 9460
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				// Token: 0x060024F5 RID: 9461
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				// Token: 0x060024F6 RID: 9462
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				// Token: 0x060024F7 RID: 9463
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				// Token: 0x060024F8 RID: 9464
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

				// Token: 0x060024F9 RID: 9465
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				// Token: 0x060024FA RID: 9466
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				// Token: 0x060024FB RID: 9467
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				// Token: 0x060024FC RID: 9468
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				// Token: 0x060024FD RID: 9469
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				// Token: 0x060024FE RID: 9470
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				// Token: 0x060024FF RID: 9471
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				// Token: 0x06002500 RID: 9472
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				// Token: 0x06002501 RID: 9473
				[DllImport("libsteam_api64.so")]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				// Token: 0x06002502 RID: 9474
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				// Token: 0x06002503 RID: 9475
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				// Token: 0x06002504 RID: 9476
				[DllImport("libsteam_api64.so")]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002505 RID: 9477
				[DllImport("libsteam_api64.so")]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x06002506 RID: 9478
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				// Token: 0x06002507 RID: 9479
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				// Token: 0x06002508 RID: 9480
				[DllImport("libsteam_api64.so")]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				// Token: 0x06002509 RID: 9481
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				// Token: 0x0600250A RID: 9482
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				// Token: 0x0600250B RID: 9483
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				// Token: 0x0600250C RID: 9484
				[DllImport("libsteam_api64.so")]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				// Token: 0x0600250D RID: 9485
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				// Token: 0x0600250E RID: 9486
				[DllImport("libsteam_api64.so")]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				// Token: 0x0600250F RID: 9487
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bActive);

				// Token: 0x06002510 RID: 9488
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				// Token: 0x06002511 RID: 9489
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				// Token: 0x06002512 RID: 9490
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				// Token: 0x06002513 RID: 9491
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				// Token: 0x06002514 RID: 9492
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002515 RID: 9493
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002516 RID: 9494
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x06002517 RID: 9495
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002518 RID: 9496
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				// Token: 0x06002519 RID: 9497
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				// Token: 0x0600251A RID: 9498
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x0600251B RID: 9499
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x0600251C RID: 9500
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x0600251D RID: 9501
				[DllImport("libsteam_api64.so")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x0600251E RID: 9502
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_Init();

				// Token: 0x0600251F RID: 9503
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_RunCallbacks();

				// Token: 0x06002520 RID: 9504
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamGameServer_RunCallbacks();

				// Token: 0x06002521 RID: 9505
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				// Token: 0x06002522 RID: 9506
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				// Token: 0x06002523 RID: 9507
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002524 RID: 9508
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002525 RID: 9509
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

				// Token: 0x06002526 RID: 9510
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamAPI_Shutdown();

				// Token: 0x06002527 RID: 9511
				[DllImport("libsteam_api64.so")]
				internal static extern void SteamGameServer_Shutdown();

				// Token: 0x06002528 RID: 9512
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				// Token: 0x06002529 RID: 9513
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				// Token: 0x0600252A RID: 9514
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				// Token: 0x0600252B RID: 9515
				[DllImport("libsteam_api64.so")]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				// Token: 0x0600252C RID: 9516
				[DllImport("libsteam_api64.so")]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				// Token: 0x0600252D RID: 9517
				[DllImport("libsteam_api64.so")]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
			}
		}

		// Token: 0x02000190 RID: 400
		internal class Mac : Platform.Interface, IDisposable
		{
			// Token: 0x170000B5 RID: 181
			// (get) Token: 0x06001486 RID: 5254 RVA: 0x0004A96B File Offset: 0x00048B6B
			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			// Token: 0x06001487 RID: 5255 RVA: 0x0004A97D File Offset: 0x00048B7D
			internal Mac(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			// Token: 0x06001488 RID: 5256 RVA: 0x0004A98C File Offset: 0x00048B8C
			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			// Token: 0x06001489 RID: 5257 RVA: 0x0004A999 File Offset: 0x00048B99
			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			// Token: 0x0600148A RID: 5258 RVA: 0x0004A9C3 File Offset: 0x00048BC3
			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			// Token: 0x0600148B RID: 5259 RVA: 0x0004A9EE File Offset: 0x00048BEE
			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			// Token: 0x0600148C RID: 5260 RVA: 0x0004AA19 File Offset: 0x00048C19
			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			// Token: 0x0600148D RID: 5261 RVA: 0x0004AA45 File Offset: 0x00048C45
			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			// Token: 0x0600148E RID: 5262 RVA: 0x0004AA71 File Offset: 0x00048C71
			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600148F RID: 5263 RVA: 0x0004AA9E File Offset: 0x00048C9E
			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001490 RID: 5264 RVA: 0x0004AACB File Offset: 0x00048CCB
			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			// Token: 0x06001491 RID: 5265 RVA: 0x0004AAF7 File Offset: 0x00048CF7
			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001492 RID: 5266 RVA: 0x0004AB24 File Offset: 0x00048D24
			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			// Token: 0x06001493 RID: 5267 RVA: 0x0004AB50 File Offset: 0x00048D50
			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001494 RID: 5268 RVA: 0x0004AB7D File Offset: 0x00048D7D
			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001495 RID: 5269 RVA: 0x0004ABAA File Offset: 0x00048DAA
			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001496 RID: 5270 RVA: 0x0004ABD7 File Offset: 0x00048DD7
			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001497 RID: 5271 RVA: 0x0004AC04 File Offset: 0x00048E04
			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001498 RID: 5272 RVA: 0x0004AC31 File Offset: 0x00048E31
			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001499 RID: 5273 RVA: 0x0004AC5E File Offset: 0x00048E5E
			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600149A RID: 5274 RVA: 0x0004AC8B File Offset: 0x00048E8B
			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600149B RID: 5275 RVA: 0x0004ACB8 File Offset: 0x00048EB8
			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600149C RID: 5276 RVA: 0x0004ACE5 File Offset: 0x00048EE5
			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			// Token: 0x0600149D RID: 5277 RVA: 0x0004AD0F File Offset: 0x00048F0F
			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x0600149E RID: 5278 RVA: 0x0004AD3A File Offset: 0x00048F3A
			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			// Token: 0x0600149F RID: 5279 RVA: 0x0004AD64 File Offset: 0x00048F64
			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A0 RID: 5280 RVA: 0x0004AD91 File Offset: 0x00048F91
			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A1 RID: 5281 RVA: 0x0004ADBE File Offset: 0x00048FBE
			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A2 RID: 5282 RVA: 0x0004ADEB File Offset: 0x00048FEB
			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A3 RID: 5283 RVA: 0x0004AE18 File Offset: 0x00049018
			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A4 RID: 5284 RVA: 0x0004AE45 File Offset: 0x00049045
			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A5 RID: 5285 RVA: 0x0004AE72 File Offset: 0x00049072
			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A6 RID: 5286 RVA: 0x0004AE9F File Offset: 0x0004909F
			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A7 RID: 5287 RVA: 0x0004AECC File Offset: 0x000490CC
			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A8 RID: 5288 RVA: 0x0004AEF9 File Offset: 0x000490F9
			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x060014A9 RID: 5289 RVA: 0x0004AF26 File Offset: 0x00049126
			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			// Token: 0x060014AA RID: 5290 RVA: 0x0004AF50 File Offset: 0x00049150
			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			// Token: 0x060014AB RID: 5291 RVA: 0x0004AF7A File Offset: 0x0004917A
			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			// Token: 0x060014AC RID: 5292 RVA: 0x0004AFA4 File Offset: 0x000491A4
			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			// Token: 0x060014AD RID: 5293 RVA: 0x0004AFD7 File Offset: 0x000491D7
			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			// Token: 0x060014AE RID: 5294 RVA: 0x0004B003 File Offset: 0x00049203
			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			// Token: 0x060014AF RID: 5295 RVA: 0x0004B030 File Offset: 0x00049230
			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			// Token: 0x060014B0 RID: 5296 RVA: 0x0004B05C File Offset: 0x0004925C
			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			// Token: 0x060014B1 RID: 5297 RVA: 0x0004B086 File Offset: 0x00049286
			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			// Token: 0x060014B2 RID: 5298 RVA: 0x0004B0B0 File Offset: 0x000492B0
			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x060014B3 RID: 5299 RVA: 0x0004B0E0 File Offset: 0x000492E0
			public virtual VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x060014B4 RID: 5300 RVA: 0x0004B124 File Offset: 0x00049324
			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			// Token: 0x060014B5 RID: 5301 RVA: 0x0004B157 File Offset: 0x00049357
			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			// Token: 0x060014B6 RID: 5302 RVA: 0x0004B181 File Offset: 0x00049381
			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x060014B7 RID: 5303 RVA: 0x0004B1AE File Offset: 0x000493AE
			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x060014B8 RID: 5304 RVA: 0x0004B1DB File Offset: 0x000493DB
			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x060014B9 RID: 5305 RVA: 0x0004B206 File Offset: 0x00049406
			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x060014BA RID: 5306 RVA: 0x0004B231 File Offset: 0x00049431
			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x060014BB RID: 5307 RVA: 0x0004B25D File Offset: 0x0004945D
			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			// Token: 0x060014BC RID: 5308 RVA: 0x0004B287 File Offset: 0x00049487
			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			// Token: 0x060014BD RID: 5309 RVA: 0x0004B2B4 File Offset: 0x000494B4
			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			// Token: 0x060014BE RID: 5310 RVA: 0x0004B2E0 File Offset: 0x000494E0
			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x060014BF RID: 5311 RVA: 0x0004B30D File Offset: 0x0004950D
			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			// Token: 0x060014C0 RID: 5312 RVA: 0x0004B339 File Offset: 0x00049539
			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			// Token: 0x060014C1 RID: 5313 RVA: 0x0004B363 File Offset: 0x00049563
			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			// Token: 0x060014C2 RID: 5314 RVA: 0x0004B38E File Offset: 0x0004958E
			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			// Token: 0x060014C3 RID: 5315 RVA: 0x0004B3B8 File Offset: 0x000495B8
			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			// Token: 0x060014C4 RID: 5316 RVA: 0x0004B3E2 File Offset: 0x000495E2
			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			// Token: 0x060014C5 RID: 5317 RVA: 0x0004B40C File Offset: 0x0004960C
			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			// Token: 0x060014C6 RID: 5318 RVA: 0x0004B436 File Offset: 0x00049636
			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			// Token: 0x060014C7 RID: 5319 RVA: 0x0004B460 File Offset: 0x00049660
			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			// Token: 0x060014C8 RID: 5320 RVA: 0x0004B48B File Offset: 0x0004968B
			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			// Token: 0x060014C9 RID: 5321 RVA: 0x0004B4B5 File Offset: 0x000496B5
			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			// Token: 0x060014CA RID: 5322 RVA: 0x0004B4E0 File Offset: 0x000496E0
			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			// Token: 0x060014CB RID: 5323 RVA: 0x0004B50C File Offset: 0x0004970C
			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			// Token: 0x060014CC RID: 5324 RVA: 0x0004B537 File Offset: 0x00049737
			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			// Token: 0x060014CD RID: 5325 RVA: 0x0004B562 File Offset: 0x00049762
			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			// Token: 0x060014CE RID: 5326 RVA: 0x0004B590 File Offset: 0x00049790
			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				FriendGameInfo_t.PackSmall d = default(FriendGameInfo_t.PackSmall);
				bool result = Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref d);
				pFriendGameInfo = d;
				return result;
			}

			// Token: 0x060014CF RID: 5327 RVA: 0x0004B5DC File Offset: 0x000497DC
			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			// Token: 0x060014D0 RID: 5328 RVA: 0x0004B608 File Offset: 0x00049808
			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			// Token: 0x060014D1 RID: 5329 RVA: 0x0004B633 File Offset: 0x00049833
			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			// Token: 0x060014D2 RID: 5330 RVA: 0x0004B65E File Offset: 0x0004985E
			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			// Token: 0x060014D3 RID: 5331 RVA: 0x0004B688 File Offset: 0x00049888
			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			// Token: 0x060014D4 RID: 5332 RVA: 0x0004B6B3 File Offset: 0x000498B3
			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			// Token: 0x060014D5 RID: 5333 RVA: 0x0004B6DE File Offset: 0x000498DE
			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			// Token: 0x060014D6 RID: 5334 RVA: 0x0004B709 File Offset: 0x00049909
			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			// Token: 0x060014D7 RID: 5335 RVA: 0x0004B736 File Offset: 0x00049936
			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			// Token: 0x060014D8 RID: 5336 RVA: 0x0004B762 File Offset: 0x00049962
			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			// Token: 0x060014D9 RID: 5337 RVA: 0x0004B78C File Offset: 0x0004998C
			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			// Token: 0x060014DA RID: 5338 RVA: 0x0004B7B7 File Offset: 0x000499B7
			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			// Token: 0x060014DB RID: 5339 RVA: 0x0004B7E2 File Offset: 0x000499E2
			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			// Token: 0x060014DC RID: 5340 RVA: 0x0004B80D File Offset: 0x00049A0D
			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			// Token: 0x060014DD RID: 5341 RVA: 0x0004B83C File Offset: 0x00049A3C
			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			// Token: 0x060014DE RID: 5342 RVA: 0x0004B868 File Offset: 0x00049A68
			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			// Token: 0x060014DF RID: 5343 RVA: 0x0004B893 File Offset: 0x00049A93
			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			// Token: 0x060014E0 RID: 5344 RVA: 0x0004B8BF File Offset: 0x00049ABF
			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			// Token: 0x060014E1 RID: 5345 RVA: 0x0004B8EB File Offset: 0x00049AEB
			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			// Token: 0x060014E2 RID: 5346 RVA: 0x0004B917 File Offset: 0x00049B17
			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			// Token: 0x060014E3 RID: 5347 RVA: 0x0004B942 File Offset: 0x00049B42
			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			// Token: 0x060014E4 RID: 5348 RVA: 0x0004B96E File Offset: 0x00049B6E
			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			// Token: 0x060014E5 RID: 5349 RVA: 0x0004B999 File Offset: 0x00049B99
			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			// Token: 0x060014E6 RID: 5350 RVA: 0x0004B9C5 File Offset: 0x00049BC5
			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			// Token: 0x060014E7 RID: 5351 RVA: 0x0004B9F0 File Offset: 0x00049BF0
			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			// Token: 0x060014E8 RID: 5352 RVA: 0x0004BA1B File Offset: 0x00049C1B
			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x060014E9 RID: 5353 RVA: 0x0004BA46 File Offset: 0x00049C46
			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x060014EA RID: 5354 RVA: 0x0004BA71 File Offset: 0x00049C71
			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x060014EB RID: 5355 RVA: 0x0004BA9C File Offset: 0x00049C9C
			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			// Token: 0x060014EC RID: 5356 RVA: 0x0004BAC8 File Offset: 0x00049CC8
			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			// Token: 0x060014ED RID: 5357 RVA: 0x0004BAF3 File Offset: 0x00049CF3
			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			// Token: 0x060014EE RID: 5358 RVA: 0x0004BB1E File Offset: 0x00049D1E
			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			// Token: 0x060014EF RID: 5359 RVA: 0x0004BB49 File Offset: 0x00049D49
			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			// Token: 0x060014F0 RID: 5360 RVA: 0x0004BB75 File Offset: 0x00049D75
			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			// Token: 0x060014F1 RID: 5361 RVA: 0x0004BB9F File Offset: 0x00049D9F
			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			// Token: 0x060014F2 RID: 5362 RVA: 0x0004BBCB File Offset: 0x00049DCB
			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			// Token: 0x060014F3 RID: 5363 RVA: 0x0004BBF5 File Offset: 0x00049DF5
			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			// Token: 0x060014F4 RID: 5364 RVA: 0x0004BC21 File Offset: 0x00049E21
			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			// Token: 0x060014F5 RID: 5365 RVA: 0x0004BC4C File Offset: 0x00049E4C
			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			// Token: 0x060014F6 RID: 5366 RVA: 0x0004BC78 File Offset: 0x00049E78
			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			// Token: 0x060014F7 RID: 5367 RVA: 0x0004BCA3 File Offset: 0x00049EA3
			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			// Token: 0x060014F8 RID: 5368 RVA: 0x0004BCCF File Offset: 0x00049ECF
			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			// Token: 0x060014F9 RID: 5369 RVA: 0x0004BCF9 File Offset: 0x00049EF9
			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			// Token: 0x060014FA RID: 5370 RVA: 0x0004BD24 File Offset: 0x00049F24
			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			// Token: 0x060014FB RID: 5371 RVA: 0x0004BD4F File Offset: 0x00049F4F
			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			// Token: 0x060014FC RID: 5372 RVA: 0x0004BD7A File Offset: 0x00049F7A
			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x060014FD RID: 5373 RVA: 0x0004BDA5 File Offset: 0x00049FA5
			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x060014FE RID: 5374 RVA: 0x0004BDD0 File Offset: 0x00049FD0
			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			// Token: 0x060014FF RID: 5375 RVA: 0x0004BDFB File Offset: 0x00049FFB
			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			// Token: 0x06001500 RID: 5376 RVA: 0x0004BE27 File Offset: 0x0004A027
			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			// Token: 0x06001501 RID: 5377 RVA: 0x0004BE53 File Offset: 0x0004A053
			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			// Token: 0x06001502 RID: 5378 RVA: 0x0004BE86 File Offset: 0x0004A086
			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			// Token: 0x06001503 RID: 5379 RVA: 0x0004BEB2 File Offset: 0x0004A0B2
			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001504 RID: 5380 RVA: 0x0004BEDD File Offset: 0x0004A0DD
			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001505 RID: 5381 RVA: 0x0004BF08 File Offset: 0x0004A108
			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001506 RID: 5382 RVA: 0x0004BF33 File Offset: 0x0004A133
			public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			// Token: 0x06001507 RID: 5383 RVA: 0x0004BF5E File Offset: 0x0004A15E
			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			// Token: 0x06001508 RID: 5384 RVA: 0x0004BF8A File Offset: 0x0004A18A
			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001509 RID: 5385 RVA: 0x0004BFBB File Offset: 0x0004A1BB
			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			// Token: 0x0600150A RID: 5386 RVA: 0x0004BFE6 File Offset: 0x0004A1E6
			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			// Token: 0x0600150B RID: 5387 RVA: 0x0004C011 File Offset: 0x0004A211
			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			// Token: 0x0600150C RID: 5388 RVA: 0x0004C03C File Offset: 0x0004A23C
			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			// Token: 0x0600150D RID: 5389 RVA: 0x0004C067 File Offset: 0x0004A267
			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			// Token: 0x0600150E RID: 5390 RVA: 0x0004C092 File Offset: 0x0004A292
			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			// Token: 0x0600150F RID: 5391 RVA: 0x0004C0BC File Offset: 0x0004A2BC
			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			// Token: 0x06001510 RID: 5392 RVA: 0x0004C0E6 File Offset: 0x0004A2E6
			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			// Token: 0x06001511 RID: 5393 RVA: 0x0004C110 File Offset: 0x0004A310
			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			// Token: 0x06001512 RID: 5394 RVA: 0x0004C13A File Offset: 0x0004A33A
			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			// Token: 0x06001513 RID: 5395 RVA: 0x0004C164 File Offset: 0x0004A364
			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			// Token: 0x06001514 RID: 5396 RVA: 0x0004C191 File Offset: 0x0004A391
			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			// Token: 0x06001515 RID: 5397 RVA: 0x0004C1BE File Offset: 0x0004A3BE
			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			// Token: 0x06001516 RID: 5398 RVA: 0x0004C1EA File Offset: 0x0004A3EA
			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			// Token: 0x06001517 RID: 5399 RVA: 0x0004C214 File Offset: 0x0004A414
			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			// Token: 0x06001518 RID: 5400 RVA: 0x0004C23E File Offset: 0x0004A43E
			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			// Token: 0x06001519 RID: 5401 RVA: 0x0004C269 File Offset: 0x0004A469
			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			// Token: 0x0600151A RID: 5402 RVA: 0x0004C295 File Offset: 0x0004A495
			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			// Token: 0x0600151B RID: 5403 RVA: 0x0004C2C0 File Offset: 0x0004A4C0
			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			// Token: 0x0600151C RID: 5404 RVA: 0x0004C2F1 File Offset: 0x0004A4F1
			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			// Token: 0x0600151D RID: 5405 RVA: 0x0004C31B File Offset: 0x0004A51B
			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x0600151E RID: 5406 RVA: 0x0004C346 File Offset: 0x0004A546
			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			// Token: 0x0600151F RID: 5407 RVA: 0x0004C370 File Offset: 0x0004A570
			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			// Token: 0x06001520 RID: 5408 RVA: 0x0004C39A File Offset: 0x0004A59A
			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			// Token: 0x06001521 RID: 5409 RVA: 0x0004C3C5 File Offset: 0x0004A5C5
			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			// Token: 0x06001522 RID: 5410 RVA: 0x0004C3F6 File Offset: 0x0004A5F6
			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			// Token: 0x06001523 RID: 5411 RVA: 0x0004C420 File Offset: 0x0004A620
			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			// Token: 0x06001524 RID: 5412 RVA: 0x0004C44C File Offset: 0x0004A64C
			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			// Token: 0x06001525 RID: 5413 RVA: 0x0004C476 File Offset: 0x0004A676
			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			// Token: 0x06001526 RID: 5414 RVA: 0x0004C4A0 File Offset: 0x0004A6A0
			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			// Token: 0x06001527 RID: 5415 RVA: 0x0004C4CC File Offset: 0x0004A6CC
			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			// Token: 0x06001528 RID: 5416 RVA: 0x0004C4F6 File Offset: 0x0004A6F6
			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			// Token: 0x06001529 RID: 5417 RVA: 0x0004C520 File Offset: 0x0004A720
			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			// Token: 0x0600152A RID: 5418 RVA: 0x0004C54A File Offset: 0x0004A74A
			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			// Token: 0x0600152B RID: 5419 RVA: 0x0004C575 File Offset: 0x0004A775
			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			// Token: 0x0600152C RID: 5420 RVA: 0x0004C59F File Offset: 0x0004A79F
			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			// Token: 0x0600152D RID: 5421 RVA: 0x0004C5D4 File Offset: 0x0004A7D4
			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			// Token: 0x0600152E RID: 5422 RVA: 0x0004C607 File Offset: 0x0004A807
			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			// Token: 0x0600152F RID: 5423 RVA: 0x0004C638 File Offset: 0x0004A838
			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			// Token: 0x06001530 RID: 5424 RVA: 0x0004C662 File Offset: 0x0004A862
			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			// Token: 0x06001531 RID: 5425 RVA: 0x0004C68F File Offset: 0x0004A88F
			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			// Token: 0x06001532 RID: 5426 RVA: 0x0004C6BC File Offset: 0x0004A8BC
			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			// Token: 0x06001533 RID: 5427 RVA: 0x0004C6E8 File Offset: 0x0004A8E8
			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			// Token: 0x06001534 RID: 5428 RVA: 0x0004C713 File Offset: 0x0004A913
			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			// Token: 0x06001535 RID: 5429 RVA: 0x0004C73E File Offset: 0x0004A93E
			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			// Token: 0x06001536 RID: 5430 RVA: 0x0004C769 File Offset: 0x0004A969
			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			// Token: 0x06001537 RID: 5431 RVA: 0x0004C794 File Offset: 0x0004A994
			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			// Token: 0x06001538 RID: 5432 RVA: 0x0004C7BF File Offset: 0x0004A9BF
			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			// Token: 0x06001539 RID: 5433 RVA: 0x0004C7EB File Offset: 0x0004A9EB
			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x0600153A RID: 5434 RVA: 0x0004C816 File Offset: 0x0004AA16
			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x0600153B RID: 5435 RVA: 0x0004C841 File Offset: 0x0004AA41
			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			// Token: 0x0600153C RID: 5436 RVA: 0x0004C86D File Offset: 0x0004AA6D
			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			// Token: 0x0600153D RID: 5437 RVA: 0x0004C898 File Offset: 0x0004AA98
			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			// Token: 0x0600153E RID: 5438 RVA: 0x0004C8C4 File Offset: 0x0004AAC4
			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x0600153F RID: 5439 RVA: 0x0004C8F0 File Offset: 0x0004AAF0
			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001540 RID: 5440 RVA: 0x0004C91D File Offset: 0x0004AB1D
			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			// Token: 0x06001541 RID: 5441 RVA: 0x0004C948 File Offset: 0x0004AB48
			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			// Token: 0x06001542 RID: 5442 RVA: 0x0004C97B File Offset: 0x0004AB7B
			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06001543 RID: 5443 RVA: 0x0004C9A7 File Offset: 0x0004ABA7
			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			// Token: 0x06001544 RID: 5444 RVA: 0x0004C9D4 File Offset: 0x0004ABD4
			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001545 RID: 5445 RVA: 0x0004CA01 File Offset: 0x0004AC01
			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			// Token: 0x06001546 RID: 5446 RVA: 0x0004CA2E File Offset: 0x0004AC2E
			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001547 RID: 5447 RVA: 0x0004CA61 File Offset: 0x0004AC61
			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			// Token: 0x06001548 RID: 5448 RVA: 0x0004CA8C File Offset: 0x0004AC8C
			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			// Token: 0x06001549 RID: 5449 RVA: 0x0004CABB File Offset: 0x0004ACBB
			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			// Token: 0x0600154A RID: 5450 RVA: 0x0004CAEA File Offset: 0x0004ACEA
			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			// Token: 0x0600154B RID: 5451 RVA: 0x0004CB16 File Offset: 0x0004AD16
			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			// Token: 0x0600154C RID: 5452 RVA: 0x0004CB41 File Offset: 0x0004AD41
			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			// Token: 0x0600154D RID: 5453 RVA: 0x0004CB6D File Offset: 0x0004AD6D
			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			// Token: 0x0600154E RID: 5454 RVA: 0x0004CB99 File Offset: 0x0004AD99
			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			// Token: 0x0600154F RID: 5455 RVA: 0x0004CBC4 File Offset: 0x0004ADC4
			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			// Token: 0x06001550 RID: 5456 RVA: 0x0004CBF0 File Offset: 0x0004ADF0
			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			// Token: 0x06001551 RID: 5457 RVA: 0x0004CC1C File Offset: 0x0004AE1C
			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001552 RID: 5458 RVA: 0x0004CC4B File Offset: 0x0004AE4B
			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			// Token: 0x06001553 RID: 5459 RVA: 0x0004CC77 File Offset: 0x0004AE77
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001554 RID: 5460 RVA: 0x0004CCA6 File Offset: 0x0004AEA6
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001555 RID: 5461 RVA: 0x0004CCD5 File Offset: 0x0004AED5
			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001556 RID: 5462 RVA: 0x0004CD04 File Offset: 0x0004AF04
			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001557 RID: 5463 RVA: 0x0004CD33 File Offset: 0x0004AF33
			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			// Token: 0x06001558 RID: 5464 RVA: 0x0004CD5E File Offset: 0x0004AF5E
			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			// Token: 0x06001559 RID: 5465 RVA: 0x0004CD8A File Offset: 0x0004AF8A
			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			// Token: 0x0600155A RID: 5466 RVA: 0x0004CDB5 File Offset: 0x0004AFB5
			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			// Token: 0x0600155B RID: 5467 RVA: 0x0004CDE0 File Offset: 0x0004AFE0
			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			// Token: 0x0600155C RID: 5468 RVA: 0x0004CE0B File Offset: 0x0004B00B
			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			// Token: 0x0600155D RID: 5469 RVA: 0x0004CE36 File Offset: 0x0004B036
			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			// Token: 0x0600155E RID: 5470 RVA: 0x0004CE62 File Offset: 0x0004B062
			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x0600155F RID: 5471 RVA: 0x0004CE8F File Offset: 0x0004B08F
			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001560 RID: 5472 RVA: 0x0004CEBC File Offset: 0x0004B0BC
			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001561 RID: 5473 RVA: 0x0004CEE9 File Offset: 0x0004B0E9
			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			// Token: 0x06001562 RID: 5474 RVA: 0x0004CF14 File Offset: 0x0004B114
			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06001563 RID: 5475 RVA: 0x0004CF41 File Offset: 0x0004B141
			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			// Token: 0x06001564 RID: 5476 RVA: 0x0004CF6E File Offset: 0x0004B16E
			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06001565 RID: 5477 RVA: 0x0004CF9B File Offset: 0x0004B19B
			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			// Token: 0x06001566 RID: 5478 RVA: 0x0004CFC8 File Offset: 0x0004B1C8
			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			// Token: 0x06001567 RID: 5479 RVA: 0x0004CFF5 File Offset: 0x0004B1F5
			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			// Token: 0x06001568 RID: 5480 RVA: 0x0004D020 File Offset: 0x0004B220
			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			// Token: 0x06001569 RID: 5481 RVA: 0x0004D04B File Offset: 0x0004B24B
			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			// Token: 0x0600156A RID: 5482 RVA: 0x0004D076 File Offset: 0x0004B276
			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			// Token: 0x0600156B RID: 5483 RVA: 0x0004D0A2 File Offset: 0x0004B2A2
			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			// Token: 0x0600156C RID: 5484 RVA: 0x0004D0CD File Offset: 0x0004B2CD
			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			// Token: 0x0600156D RID: 5485 RVA: 0x0004D0FA File Offset: 0x0004B2FA
			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			// Token: 0x0600156E RID: 5486 RVA: 0x0004D125 File Offset: 0x0004B325
			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			// Token: 0x0600156F RID: 5487 RVA: 0x0004D150 File Offset: 0x0004B350
			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			// Token: 0x06001570 RID: 5488 RVA: 0x0004D17B File Offset: 0x0004B37B
			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			// Token: 0x06001571 RID: 5489 RVA: 0x0004D1A6 File Offset: 0x0004B3A6
			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			// Token: 0x06001572 RID: 5490 RVA: 0x0004D1D1 File Offset: 0x0004B3D1
			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			// Token: 0x06001573 RID: 5491 RVA: 0x0004D1FC File Offset: 0x0004B3FC
			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			// Token: 0x06001574 RID: 5492 RVA: 0x0004D227 File Offset: 0x0004B427
			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			// Token: 0x06001575 RID: 5493 RVA: 0x0004D251 File Offset: 0x0004B451
			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			// Token: 0x06001576 RID: 5494 RVA: 0x0004D27D File Offset: 0x0004B47D
			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			// Token: 0x06001577 RID: 5495 RVA: 0x0004D2A9 File Offset: 0x0004B4A9
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			// Token: 0x06001578 RID: 5496 RVA: 0x0004D2D3 File Offset: 0x0004B4D3
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			// Token: 0x06001579 RID: 5497 RVA: 0x0004D2FD File Offset: 0x0004B4FD
			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			// Token: 0x0600157A RID: 5498 RVA: 0x0004D328 File Offset: 0x0004B528
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			// Token: 0x0600157B RID: 5499 RVA: 0x0004D354 File Offset: 0x0004B554
			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			// Token: 0x0600157C RID: 5500 RVA: 0x0004D381 File Offset: 0x0004B581
			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			// Token: 0x0600157D RID: 5501 RVA: 0x0004D3B2 File Offset: 0x0004B5B2
			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			// Token: 0x0600157E RID: 5502 RVA: 0x0004D3E3 File Offset: 0x0004B5E3
			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			// Token: 0x0600157F RID: 5503 RVA: 0x0004D40D File Offset: 0x0004B60D
			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			// Token: 0x06001580 RID: 5504 RVA: 0x0004D438 File Offset: 0x0004B638
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref d, eWorkshopFileType);
				pTags = d;
				return result;
			}

			// Token: 0x06001581 RID: 5505 RVA: 0x0004D48F File Offset: 0x0004B68F
			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001582 RID: 5506 RVA: 0x0004D4BA File Offset: 0x0004B6BA
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			// Token: 0x06001583 RID: 5507 RVA: 0x0004D4E6 File Offset: 0x0004B6E6
			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			// Token: 0x06001584 RID: 5508 RVA: 0x0004D512 File Offset: 0x0004B712
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			// Token: 0x06001585 RID: 5509 RVA: 0x0004D53E File Offset: 0x0004B73E
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			// Token: 0x06001586 RID: 5510 RVA: 0x0004D56A File Offset: 0x0004B76A
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			// Token: 0x06001587 RID: 5511 RVA: 0x0004D598 File Offset: 0x0004B798
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				bool result = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x06001588 RID: 5512 RVA: 0x0004D5E4 File Offset: 0x0004B7E4
			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			// Token: 0x06001589 RID: 5513 RVA: 0x0004D60F File Offset: 0x0004B80F
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			// Token: 0x0600158A RID: 5514 RVA: 0x0004D63B File Offset: 0x0004B83B
			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600158B RID: 5515 RVA: 0x0004D666 File Offset: 0x0004B866
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x0600158C RID: 5516 RVA: 0x0004D691 File Offset: 0x0004B891
			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600158D RID: 5517 RVA: 0x0004D6BC File Offset: 0x0004B8BC
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x0600158E RID: 5518 RVA: 0x0004D6E7 File Offset: 0x0004B8E7
			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600158F RID: 5519 RVA: 0x0004D712 File Offset: 0x0004B912
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			// Token: 0x06001590 RID: 5520 RVA: 0x0004D73E File Offset: 0x0004B93E
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001591 RID: 5521 RVA: 0x0004D769 File Offset: 0x0004B969
			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			// Token: 0x06001592 RID: 5522 RVA: 0x0004D795 File Offset: 0x0004B995
			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001593 RID: 5523 RVA: 0x0004D7C0 File Offset: 0x0004B9C0
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamParamStringArray_t.PackSmall d2 = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref d, ref d2);
				pRequiredTags = d;
				pExcludedTags = d2;
				return result;
			}

			// Token: 0x06001594 RID: 5524 RVA: 0x0004D824 File Offset: 0x0004BA24
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x06001595 RID: 5525 RVA: 0x0004D87D File Offset: 0x0004BA7D
			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			// Token: 0x06001596 RID: 5526 RVA: 0x0004D8A9 File Offset: 0x0004BAA9
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			// Token: 0x06001597 RID: 5527 RVA: 0x0004D8D8 File Offset: 0x0004BAD8
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				SteamParamStringArray_t.PackSmall d2 = default(SteamParamStringArray_t.PackSmall);
				SteamAPICall_t result = Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref d, ref d2);
				pTags = d;
				pUserTags = d2;
				return result;
			}

			// Token: 0x06001598 RID: 5528 RVA: 0x0004D940 File Offset: 0x0004BB40
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			// Token: 0x06001599 RID: 5529 RVA: 0x0004D96D File Offset: 0x0004BB6D
			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			// Token: 0x0600159A RID: 5530 RVA: 0x0004D997 File Offset: 0x0004BB97
			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			// Token: 0x0600159B RID: 5531 RVA: 0x0004D9C3 File Offset: 0x0004BBC3
			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			// Token: 0x0600159C RID: 5532 RVA: 0x0004D9EF File Offset: 0x0004BBEF
			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			// Token: 0x0600159D RID: 5533 RVA: 0x0004DA1B File Offset: 0x0004BC1B
			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			// Token: 0x0600159E RID: 5534 RVA: 0x0004DA47 File Offset: 0x0004BC47
			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x0600159F RID: 5535 RVA: 0x0004DA74 File Offset: 0x0004BC74
			public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			// Token: 0x060015A0 RID: 5536 RVA: 0x0004DAA0 File Offset: 0x0004BCA0
			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			// Token: 0x060015A1 RID: 5537 RVA: 0x0004DACB File Offset: 0x0004BCCB
			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			// Token: 0x060015A2 RID: 5538 RVA: 0x0004DAF6 File Offset: 0x0004BCF6
			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x060015A3 RID: 5539 RVA: 0x0004DB23 File Offset: 0x0004BD23
			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			// Token: 0x060015A4 RID: 5540 RVA: 0x0004DB4D File Offset: 0x0004BD4D
			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			// Token: 0x060015A5 RID: 5541 RVA: 0x0004DB78 File Offset: 0x0004BD78
			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			// Token: 0x060015A6 RID: 5542 RVA: 0x0004DBA4 File Offset: 0x0004BDA4
			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			// Token: 0x060015A7 RID: 5543 RVA: 0x0004DBD1 File Offset: 0x0004BDD1
			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			// Token: 0x060015A8 RID: 5544 RVA: 0x0004DBFB File Offset: 0x0004BDFB
			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			// Token: 0x060015A9 RID: 5545 RVA: 0x0004DC26 File Offset: 0x0004BE26
			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x060015AA RID: 5546 RVA: 0x0004DC51 File Offset: 0x0004BE51
			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060015AB RID: 5547 RVA: 0x0004DC7E File Offset: 0x0004BE7E
			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060015AC RID: 5548 RVA: 0x0004DCAB File Offset: 0x0004BEAB
			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x060015AD RID: 5549 RVA: 0x0004DCD8 File Offset: 0x0004BED8
			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x060015AE RID: 5550 RVA: 0x0004DD07 File Offset: 0x0004BF07
			public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			// Token: 0x060015AF RID: 5551 RVA: 0x0004DD32 File Offset: 0x0004BF32
			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			// Token: 0x060015B0 RID: 5552 RVA: 0x0004DD5F File Offset: 0x0004BF5F
			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			// Token: 0x060015B1 RID: 5553 RVA: 0x0004DD8A File Offset: 0x0004BF8A
			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060015B2 RID: 5554 RVA: 0x0004DDB5 File Offset: 0x0004BFB5
			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060015B3 RID: 5555 RVA: 0x0004DDE0 File Offset: 0x0004BFE0
			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060015B4 RID: 5556 RVA: 0x0004DE0B File Offset: 0x0004C00B
			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x060015B5 RID: 5557 RVA: 0x0004DE36 File Offset: 0x0004C036
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			// Token: 0x060015B6 RID: 5558 RVA: 0x0004DE65 File Offset: 0x0004C065
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			// Token: 0x060015B7 RID: 5559 RVA: 0x0004DE94 File Offset: 0x0004C094
			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				LeaderboardEntry_t.PackSmall d = default(LeaderboardEntry_t.PackSmall);
				bool result = Platform.Mac.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref d, pDetails, cDetailsMax);
				pLeaderboardEntry = d;
				return result;
			}

			// Token: 0x060015B8 RID: 5560 RVA: 0x0004DEE5 File Offset: 0x0004C0E5
			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			// Token: 0x060015B9 RID: 5561 RVA: 0x0004DF16 File Offset: 0x0004C116
			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			// Token: 0x060015BA RID: 5562 RVA: 0x0004DF42 File Offset: 0x0004C142
			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			// Token: 0x060015BB RID: 5563 RVA: 0x0004DF6C File Offset: 0x0004C16C
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			// Token: 0x060015BC RID: 5564 RVA: 0x0004DF96 File Offset: 0x0004C196
			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x060015BD RID: 5565 RVA: 0x0004DFC5 File Offset: 0x0004C1C5
			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x060015BE RID: 5566 RVA: 0x0004DFF6 File Offset: 0x0004C1F6
			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			// Token: 0x060015BF RID: 5567 RVA: 0x0004E022 File Offset: 0x0004C222
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			// Token: 0x060015C0 RID: 5568 RVA: 0x0004E04D File Offset: 0x0004C24D
			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			// Token: 0x060015C1 RID: 5569 RVA: 0x0004E079 File Offset: 0x0004C279
			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			// Token: 0x060015C2 RID: 5570 RVA: 0x0004E0A5 File Offset: 0x0004C2A5
			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x060015C3 RID: 5571 RVA: 0x0004E0D2 File Offset: 0x0004C2D2
			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x060015C4 RID: 5572 RVA: 0x0004E0FF File Offset: 0x0004C2FF
			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			// Token: 0x060015C5 RID: 5573 RVA: 0x0004E129 File Offset: 0x0004C329
			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			// Token: 0x060015C6 RID: 5574 RVA: 0x0004E153 File Offset: 0x0004C353
			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			// Token: 0x060015C7 RID: 5575 RVA: 0x0004E17D File Offset: 0x0004C37D
			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			// Token: 0x060015C8 RID: 5576 RVA: 0x0004E1A7 File Offset: 0x0004C3A7
			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			// Token: 0x060015C9 RID: 5577 RVA: 0x0004E1D1 File Offset: 0x0004C3D1
			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			// Token: 0x060015CA RID: 5578 RVA: 0x0004E1FB File Offset: 0x0004C3FB
			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			// Token: 0x060015CB RID: 5579 RVA: 0x0004E226 File Offset: 0x0004C426
			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			// Token: 0x060015CC RID: 5580 RVA: 0x0004E251 File Offset: 0x0004C451
			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			// Token: 0x060015CD RID: 5581 RVA: 0x0004E27C File Offset: 0x0004C47C
			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			// Token: 0x060015CE RID: 5582 RVA: 0x0004E2A6 File Offset: 0x0004C4A6
			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			// Token: 0x060015CF RID: 5583 RVA: 0x0004E2D0 File Offset: 0x0004C4D0
			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			// Token: 0x060015D0 RID: 5584 RVA: 0x0004E301 File Offset: 0x0004C501
			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			// Token: 0x060015D1 RID: 5585 RVA: 0x0004E32C File Offset: 0x0004C52C
			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			// Token: 0x060015D2 RID: 5586 RVA: 0x0004E357 File Offset: 0x0004C557
			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			// Token: 0x060015D3 RID: 5587 RVA: 0x0004E382 File Offset: 0x0004C582
			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			// Token: 0x060015D4 RID: 5588 RVA: 0x0004E3AE File Offset: 0x0004C5AE
			public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			// Token: 0x060015D5 RID: 5589 RVA: 0x0004E3D9 File Offset: 0x0004C5D9
			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			// Token: 0x060015D6 RID: 5590 RVA: 0x0004E406 File Offset: 0x0004C606
			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			// Token: 0x060015D7 RID: 5591 RVA: 0x0004E433 File Offset: 0x0004C633
			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			// Token: 0x060015D8 RID: 5592 RVA: 0x0004E45E File Offset: 0x0004C65E
			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			// Token: 0x060015D9 RID: 5593 RVA: 0x0004E488 File Offset: 0x0004C688
			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			// Token: 0x060015DA RID: 5594 RVA: 0x0004E4B3 File Offset: 0x0004C6B3
			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x060015DB RID: 5595 RVA: 0x0004E4E0 File Offset: 0x0004C6E0
			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			// Token: 0x060015DC RID: 5596 RVA: 0x0004E50A File Offset: 0x0004C70A
			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			// Token: 0x060015DD RID: 5597 RVA: 0x0004E534 File Offset: 0x0004C734
			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			// Token: 0x060015DE RID: 5598 RVA: 0x0004E55F File Offset: 0x0004C75F
			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			// Token: 0x060015DF RID: 5599 RVA: 0x0004E590 File Offset: 0x0004C790
			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			// Token: 0x060015E0 RID: 5600 RVA: 0x0004E5BC File Offset: 0x0004C7BC
			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			// Token: 0x060015E1 RID: 5601 RVA: 0x0004E5ED File Offset: 0x0004C7ED
			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x060015E2 RID: 5602 RVA: 0x0004E618 File Offset: 0x0004C818
			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x060015E3 RID: 5603 RVA: 0x0004E643 File Offset: 0x0004C843
			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			// Token: 0x060015E4 RID: 5604 RVA: 0x0004E670 File Offset: 0x0004C870
			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				P2PSessionState_t.PackSmall d = default(P2PSessionState_t.PackSmall);
				bool result = Platform.Mac.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref d);
				pConnectionState = d;
				return result;
			}

			// Token: 0x060015E5 RID: 5605 RVA: 0x0004E6BC File Offset: 0x0004C8BC
			public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			// Token: 0x060015E6 RID: 5606 RVA: 0x0004E6E7 File Offset: 0x0004C8E7
			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			// Token: 0x060015E7 RID: 5607 RVA: 0x0004E716 File Offset: 0x0004C916
			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			// Token: 0x060015E8 RID: 5608 RVA: 0x0004E745 File Offset: 0x0004C945
			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			// Token: 0x060015E9 RID: 5609 RVA: 0x0004E772 File Offset: 0x0004C972
			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x060015EA RID: 5610 RVA: 0x0004E79E File Offset: 0x0004C99E
			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x060015EB RID: 5611 RVA: 0x0004E7CA File Offset: 0x0004C9CA
			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			// Token: 0x060015EC RID: 5612 RVA: 0x0004E7F9 File Offset: 0x0004C9F9
			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			// Token: 0x060015ED RID: 5613 RVA: 0x0004E825 File Offset: 0x0004CA25
			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			// Token: 0x060015EE RID: 5614 RVA: 0x0004E854 File Offset: 0x0004CA54
			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x060015EF RID: 5615 RVA: 0x0004E881 File Offset: 0x0004CA81
			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x060015F0 RID: 5616 RVA: 0x0004E8B2 File Offset: 0x0004CAB2
			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			// Token: 0x060015F1 RID: 5617 RVA: 0x0004E8E3 File Offset: 0x0004CAE3
			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			// Token: 0x060015F2 RID: 5618 RVA: 0x0004E910 File Offset: 0x0004CB10
			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			// Token: 0x060015F3 RID: 5619 RVA: 0x0004E93B File Offset: 0x0004CB3B
			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			// Token: 0x060015F4 RID: 5620 RVA: 0x0004E966 File Offset: 0x0004CB66
			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			// Token: 0x060015F5 RID: 5621 RVA: 0x0004E995 File Offset: 0x0004CB95
			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			// Token: 0x060015F6 RID: 5622 RVA: 0x0004E9C4 File Offset: 0x0004CBC4
			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			// Token: 0x060015F7 RID: 5623 RVA: 0x0004E9EE File Offset: 0x0004CBEE
			public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			// Token: 0x060015F8 RID: 5624 RVA: 0x0004EA19 File Offset: 0x0004CC19
			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			// Token: 0x060015F9 RID: 5625 RVA: 0x0004EA45 File Offset: 0x0004CC45
			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			// Token: 0x060015FA RID: 5626 RVA: 0x0004EA71 File Offset: 0x0004CC71
			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			// Token: 0x060015FB RID: 5627 RVA: 0x0004EA9D File Offset: 0x0004CC9D
			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			// Token: 0x060015FC RID: 5628 RVA: 0x0004EAC7 File Offset: 0x0004CCC7
			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			// Token: 0x060015FD RID: 5629 RVA: 0x0004EAF4 File Offset: 0x0004CCF4
			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			// Token: 0x060015FE RID: 5630 RVA: 0x0004EB1E File Offset: 0x0004CD1E
			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			// Token: 0x060015FF RID: 5631 RVA: 0x0004EB48 File Offset: 0x0004CD48
			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			// Token: 0x06001600 RID: 5632 RVA: 0x0004EB72 File Offset: 0x0004CD72
			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			// Token: 0x06001601 RID: 5633 RVA: 0x0004EB9C File Offset: 0x0004CD9C
			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			// Token: 0x06001602 RID: 5634 RVA: 0x0004EBC6 File Offset: 0x0004CDC6
			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			// Token: 0x06001603 RID: 5635 RVA: 0x0004EBF0 File Offset: 0x0004CDF0
			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			// Token: 0x06001604 RID: 5636 RVA: 0x0004EC1A File Offset: 0x0004CE1A
			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			// Token: 0x06001605 RID: 5637 RVA: 0x0004EC45 File Offset: 0x0004CE45
			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			// Token: 0x06001606 RID: 5638 RVA: 0x0004EC6F File Offset: 0x0004CE6F
			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			// Token: 0x06001607 RID: 5639 RVA: 0x0004EC9A File Offset: 0x0004CE9A
			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			// Token: 0x06001608 RID: 5640 RVA: 0x0004ECC4 File Offset: 0x0004CEC4
			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			// Token: 0x06001609 RID: 5641 RVA: 0x0004ECEE File Offset: 0x0004CEEE
			public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			// Token: 0x0600160A RID: 5642 RVA: 0x0004ED19 File Offset: 0x0004CF19
			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			// Token: 0x0600160B RID: 5643 RVA: 0x0004ED44 File Offset: 0x0004CF44
			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x0600160C RID: 5644 RVA: 0x0004ED70 File Offset: 0x0004CF70
			public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			// Token: 0x0600160D RID: 5645 RVA: 0x0004ED9B File Offset: 0x0004CF9B
			public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			// Token: 0x0600160E RID: 5646 RVA: 0x0004EDC6 File Offset: 0x0004CFC6
			public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			// Token: 0x0600160F RID: 5647 RVA: 0x0004EDF1 File Offset: 0x0004CFF1
			public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			// Token: 0x06001610 RID: 5648 RVA: 0x0004EE1C File Offset: 0x0004D01C
			public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			// Token: 0x06001611 RID: 5649 RVA: 0x0004EE47 File Offset: 0x0004D047
			public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			// Token: 0x06001612 RID: 5650 RVA: 0x0004EE72 File Offset: 0x0004D072
			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			// Token: 0x06001613 RID: 5651 RVA: 0x0004EE9D File Offset: 0x0004D09D
			public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			// Token: 0x06001614 RID: 5652 RVA: 0x0004EEC8 File Offset: 0x0004D0C8
			public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			// Token: 0x06001615 RID: 5653 RVA: 0x0004EEF3 File Offset: 0x0004D0F3
			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			// Token: 0x06001616 RID: 5654 RVA: 0x0004EF1E File Offset: 0x0004D11E
			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			// Token: 0x06001617 RID: 5655 RVA: 0x0004EF48 File Offset: 0x0004D148
			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			// Token: 0x06001618 RID: 5656 RVA: 0x0004EF73 File Offset: 0x0004D173
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			// Token: 0x06001619 RID: 5657 RVA: 0x0004EF9E File Offset: 0x0004D19E
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			// Token: 0x0600161A RID: 5658 RVA: 0x0004EFC9 File Offset: 0x0004D1C9
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x0600161B RID: 5659 RVA: 0x0004EFF5 File Offset: 0x0004D1F5
			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			// Token: 0x0600161C RID: 5660 RVA: 0x0004F01F File Offset: 0x0004D21F
			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			// Token: 0x0600161D RID: 5661 RVA: 0x0004F049 File Offset: 0x0004D249
			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			// Token: 0x0600161E RID: 5662 RVA: 0x0004F073 File Offset: 0x0004D273
			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x0600161F RID: 5663 RVA: 0x0004F0A0 File Offset: 0x0004D2A0
			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			// Token: 0x06001620 RID: 5664 RVA: 0x0004F0CB File Offset: 0x0004D2CB
			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			// Token: 0x06001621 RID: 5665 RVA: 0x0004F0F5 File Offset: 0x0004D2F5
			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			// Token: 0x06001622 RID: 5666 RVA: 0x0004F11F File Offset: 0x0004D31F
			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			// Token: 0x06001623 RID: 5667 RVA: 0x0004F149 File Offset: 0x0004D349
			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x06001624 RID: 5668 RVA: 0x0004F176 File Offset: 0x0004D376
			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			// Token: 0x06001625 RID: 5669 RVA: 0x0004F1A1 File Offset: 0x0004D3A1
			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			// Token: 0x06001626 RID: 5670 RVA: 0x0004F1CB File Offset: 0x0004D3CB
			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			// Token: 0x06001627 RID: 5671 RVA: 0x0004F1F7 File Offset: 0x0004D3F7
			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			// Token: 0x06001628 RID: 5672 RVA: 0x0004F223 File Offset: 0x0004D423
			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			// Token: 0x06001629 RID: 5673 RVA: 0x0004F24F File Offset: 0x0004D44F
			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			// Token: 0x0600162A RID: 5674 RVA: 0x0004F27C File Offset: 0x0004D47C
			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			// Token: 0x0600162B RID: 5675 RVA: 0x0004F2A9 File Offset: 0x0004D4A9
			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x0600162C RID: 5676 RVA: 0x0004F2D5 File Offset: 0x0004D4D5
			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x0600162D RID: 5677 RVA: 0x0004F301 File Offset: 0x0004D501
			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x0600162E RID: 5678 RVA: 0x0004F32C File Offset: 0x0004D52C
			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x0600162F RID: 5679 RVA: 0x0004F357 File Offset: 0x0004D557
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			// Token: 0x06001630 RID: 5680 RVA: 0x0004F384 File Offset: 0x0004D584
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			// Token: 0x06001631 RID: 5681 RVA: 0x0004F3B3 File Offset: 0x0004D5B3
			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			// Token: 0x06001632 RID: 5682 RVA: 0x0004F3DF File Offset: 0x0004D5DF
			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x06001633 RID: 5683 RVA: 0x0004F40C File Offset: 0x0004D60C
			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x06001634 RID: 5684 RVA: 0x0004F43B File Offset: 0x0004D63B
			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x06001635 RID: 5685 RVA: 0x0004F466 File Offset: 0x0004D666
			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			// Token: 0x06001636 RID: 5686 RVA: 0x0004F492 File Offset: 0x0004D692
			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			// Token: 0x06001637 RID: 5687 RVA: 0x0004F4C1 File Offset: 0x0004D6C1
			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			// Token: 0x06001638 RID: 5688 RVA: 0x0004F4EC File Offset: 0x0004D6EC
			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			// Token: 0x06001639 RID: 5689 RVA: 0x0004F517 File Offset: 0x0004D717
			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			// Token: 0x0600163A RID: 5690 RVA: 0x0004F546 File Offset: 0x0004D746
			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			// Token: 0x0600163B RID: 5691 RVA: 0x0004F572 File Offset: 0x0004D772
			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			// Token: 0x0600163C RID: 5692 RVA: 0x0004F59E File Offset: 0x0004D79E
			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			// Token: 0x0600163D RID: 5693 RVA: 0x0004F5CA File Offset: 0x0004D7CA
			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			// Token: 0x0600163E RID: 5694 RVA: 0x0004F5F6 File Offset: 0x0004D7F6
			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			// Token: 0x0600163F RID: 5695 RVA: 0x0004F622 File Offset: 0x0004D822
			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			// Token: 0x06001640 RID: 5696 RVA: 0x0004F64C File Offset: 0x0004D84C
			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			// Token: 0x06001641 RID: 5697 RVA: 0x0004F676 File Offset: 0x0004D876
			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			// Token: 0x06001642 RID: 5698 RVA: 0x0004F6A0 File Offset: 0x0004D8A0
			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			// Token: 0x06001643 RID: 5699 RVA: 0x0004F6CB File Offset: 0x0004D8CB
			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			// Token: 0x06001644 RID: 5700 RVA: 0x0004F6F6 File Offset: 0x0004D8F6
			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			// Token: 0x06001645 RID: 5701 RVA: 0x0004F721 File Offset: 0x0004D921
			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			// Token: 0x06001646 RID: 5702 RVA: 0x0004F74D File Offset: 0x0004D94D
			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			// Token: 0x06001647 RID: 5703 RVA: 0x0004F778 File Offset: 0x0004D978
			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001648 RID: 5704 RVA: 0x0004F7A4 File Offset: 0x0004D9A4
			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001649 RID: 5705 RVA: 0x0004F7D0 File Offset: 0x0004D9D0
			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			// Token: 0x0600164A RID: 5706 RVA: 0x0004F7FB File Offset: 0x0004D9FB
			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			// Token: 0x0600164B RID: 5707 RVA: 0x0004F827 File Offset: 0x0004DA27
			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x0600164C RID: 5708 RVA: 0x0004F852 File Offset: 0x0004DA52
			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			// Token: 0x0600164D RID: 5709 RVA: 0x0004F87E File Offset: 0x0004DA7E
			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			// Token: 0x0600164E RID: 5710 RVA: 0x0004F8AD File Offset: 0x0004DAAD
			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x0600164F RID: 5711 RVA: 0x0004F8D8 File Offset: 0x0004DAD8
			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			// Token: 0x06001650 RID: 5712 RVA: 0x0004F904 File Offset: 0x0004DB04
			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			// Token: 0x06001651 RID: 5713 RVA: 0x0004F933 File Offset: 0x0004DB33
			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			// Token: 0x06001652 RID: 5714 RVA: 0x0004F95F File Offset: 0x0004DB5F
			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			// Token: 0x06001653 RID: 5715 RVA: 0x0004F98C File Offset: 0x0004DB8C
			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			// Token: 0x06001654 RID: 5716 RVA: 0x0004F9BF File Offset: 0x0004DBBF
			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			// Token: 0x06001655 RID: 5717 RVA: 0x0004F9EC File Offset: 0x0004DBEC
			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			// Token: 0x06001656 RID: 5718 RVA: 0x0004FA1D File Offset: 0x0004DC1D
			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			// Token: 0x06001657 RID: 5719 RVA: 0x0004FA48 File Offset: 0x0004DC48
			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			// Token: 0x06001658 RID: 5720 RVA: 0x0004FA73 File Offset: 0x0004DC73
			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			// Token: 0x06001659 RID: 5721 RVA: 0x0004FA9E File Offset: 0x0004DC9E
			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x0600165A RID: 5722 RVA: 0x0004FACF File Offset: 0x0004DCCF
			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x0600165B RID: 5723 RVA: 0x0004FB00 File Offset: 0x0004DD00
			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x0600165C RID: 5724 RVA: 0x0004FB2B File Offset: 0x0004DD2B
			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x0600165D RID: 5725 RVA: 0x0004FB56 File Offset: 0x0004DD56
			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			// Token: 0x0600165E RID: 5726 RVA: 0x0004FB81 File Offset: 0x0004DD81
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x0600165F RID: 5727 RVA: 0x0004FBB6 File Offset: 0x0004DDB6
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x06001660 RID: 5728 RVA: 0x0004FBE7 File Offset: 0x0004DDE7
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001661 RID: 5729 RVA: 0x0004FC13 File Offset: 0x0004DE13
			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x06001662 RID: 5730 RVA: 0x0004FC40 File Offset: 0x0004DE40
			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamUGCDetails_t.PackSmall d = default(SteamUGCDetails_t.PackSmall);
				bool result = Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref d);
				pDetails = d;
				return result;
			}

			// Token: 0x06001663 RID: 5731 RVA: 0x0004FC8D File Offset: 0x0004DE8D
			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			// Token: 0x06001664 RID: 5732 RVA: 0x0004FCBC File Offset: 0x0004DEBC
			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			// Token: 0x06001665 RID: 5733 RVA: 0x0004FCEB File Offset: 0x0004DEEB
			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001666 RID: 5734 RVA: 0x0004FD1A File Offset: 0x0004DF1A
			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			// Token: 0x06001667 RID: 5735 RVA: 0x0004FD49 File Offset: 0x0004DF49
			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			// Token: 0x06001668 RID: 5736 RVA: 0x0004FD78 File Offset: 0x0004DF78
			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			// Token: 0x06001669 RID: 5737 RVA: 0x0004FDBA File Offset: 0x0004DFBA
			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			// Token: 0x0600166A RID: 5738 RVA: 0x0004FDE6 File Offset: 0x0004DFE6
			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			// Token: 0x0600166B RID: 5739 RVA: 0x0004FE1B File Offset: 0x0004E01B
			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x0600166C RID: 5740 RVA: 0x0004FE46 File Offset: 0x0004E046
			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			// Token: 0x0600166D RID: 5741 RVA: 0x0004FE72 File Offset: 0x0004E072
			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			// Token: 0x0600166E RID: 5742 RVA: 0x0004FE9E File Offset: 0x0004E09E
			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			// Token: 0x0600166F RID: 5743 RVA: 0x0004FECA File Offset: 0x0004E0CA
			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			// Token: 0x06001670 RID: 5744 RVA: 0x0004FEF6 File Offset: 0x0004E0F6
			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			// Token: 0x06001671 RID: 5745 RVA: 0x0004FF22 File Offset: 0x0004E122
			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			// Token: 0x06001672 RID: 5746 RVA: 0x0004FF4E File Offset: 0x0004E14E
			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			// Token: 0x06001673 RID: 5747 RVA: 0x0004FF7A File Offset: 0x0004E17A
			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			// Token: 0x06001674 RID: 5748 RVA: 0x0004FFA6 File Offset: 0x0004E1A6
			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			// Token: 0x06001675 RID: 5749 RVA: 0x0004FFD2 File Offset: 0x0004E1D2
			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			// Token: 0x06001676 RID: 5750 RVA: 0x0004FFFE File Offset: 0x0004E1FE
			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001677 RID: 5751 RVA: 0x0005002A File Offset: 0x0004E22A
			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			// Token: 0x06001678 RID: 5752 RVA: 0x00050056 File Offset: 0x0004E256
			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			// Token: 0x06001679 RID: 5753 RVA: 0x00050082 File Offset: 0x0004E282
			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			// Token: 0x0600167A RID: 5754 RVA: 0x000500AE File Offset: 0x0004E2AE
			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			// Token: 0x0600167B RID: 5755 RVA: 0x000500DA File Offset: 0x0004E2DA
			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			// Token: 0x0600167C RID: 5756 RVA: 0x00050106 File Offset: 0x0004E306
			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			// Token: 0x0600167D RID: 5757 RVA: 0x00050133 File Offset: 0x0004E333
			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			// Token: 0x0600167E RID: 5758 RVA: 0x0005015F File Offset: 0x0004E35F
			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			// Token: 0x0600167F RID: 5759 RVA: 0x0005018B File Offset: 0x0004E38B
			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			// Token: 0x06001680 RID: 5760 RVA: 0x000501B7 File Offset: 0x0004E3B7
			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			// Token: 0x06001681 RID: 5761 RVA: 0x000501E3 File Offset: 0x0004E3E3
			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			// Token: 0x06001682 RID: 5762 RVA: 0x0005020F File Offset: 0x0004E40F
			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001683 RID: 5763 RVA: 0x0005023B File Offset: 0x0004E43B
			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			// Token: 0x06001684 RID: 5764 RVA: 0x00050267 File Offset: 0x0004E467
			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			// Token: 0x06001685 RID: 5765 RVA: 0x00050294 File Offset: 0x0004E494
			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				SteamParamStringArray_t.PackSmall d = default(SteamParamStringArray_t.PackSmall);
				bool result = Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref d);
				pTags = d;
				return result;
			}

			// Token: 0x06001686 RID: 5766 RVA: 0x000502E0 File Offset: 0x0004E4E0
			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			// Token: 0x06001687 RID: 5767 RVA: 0x0005030C File Offset: 0x0004E50C
			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			// Token: 0x06001688 RID: 5768 RVA: 0x00050338 File Offset: 0x0004E538
			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			// Token: 0x06001689 RID: 5769 RVA: 0x00050364 File Offset: 0x0004E564
			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			// Token: 0x0600168A RID: 5770 RVA: 0x00050391 File Offset: 0x0004E591
			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			// Token: 0x0600168B RID: 5771 RVA: 0x000503BE File Offset: 0x0004E5BE
			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			// Token: 0x0600168C RID: 5772 RVA: 0x000503EA File Offset: 0x0004E5EA
			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			// Token: 0x0600168D RID: 5773 RVA: 0x00050417 File Offset: 0x0004E617
			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			// Token: 0x0600168E RID: 5774 RVA: 0x00050444 File Offset: 0x0004E644
			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			// Token: 0x0600168F RID: 5775 RVA: 0x00050470 File Offset: 0x0004E670
			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			// Token: 0x06001690 RID: 5776 RVA: 0x0005049C File Offset: 0x0004E69C
			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			// Token: 0x06001691 RID: 5777 RVA: 0x000504C9 File Offset: 0x0004E6C9
			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			// Token: 0x06001692 RID: 5778 RVA: 0x000504F5 File Offset: 0x0004E6F5
			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001693 RID: 5779 RVA: 0x00050520 File Offset: 0x0004E720
			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001694 RID: 5780 RVA: 0x0005054C File Offset: 0x0004E74C
			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001695 RID: 5781 RVA: 0x00050578 File Offset: 0x0004E778
			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001696 RID: 5782 RVA: 0x000505A3 File Offset: 0x0004E7A3
			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001697 RID: 5783 RVA: 0x000505CE File Offset: 0x0004E7CE
			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			// Token: 0x06001698 RID: 5784 RVA: 0x000505F8 File Offset: 0x0004E7F8
			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001699 RID: 5785 RVA: 0x00050624 File Offset: 0x0004E824
			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			// Token: 0x0600169A RID: 5786 RVA: 0x0005064F File Offset: 0x0004E84F
			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			// Token: 0x0600169B RID: 5787 RVA: 0x00050680 File Offset: 0x0004E880
			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x0600169C RID: 5788 RVA: 0x000506AD File Offset: 0x0004E8AD
			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			// Token: 0x0600169D RID: 5789 RVA: 0x000506D9 File Offset: 0x0004E8D9
			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			// Token: 0x0600169E RID: 5790 RVA: 0x00050705 File Offset: 0x0004E905
			public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			// Token: 0x0600169F RID: 5791 RVA: 0x00050730 File Offset: 0x0004E930
			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x060016A0 RID: 5792 RVA: 0x0005075C File Offset: 0x0004E95C
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x060016A1 RID: 5793 RVA: 0x00050788 File Offset: 0x0004E988
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			// Token: 0x060016A2 RID: 5794 RVA: 0x000507B2 File Offset: 0x0004E9B2
			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x060016A3 RID: 5795 RVA: 0x000507DE File Offset: 0x0004E9DE
			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x060016A4 RID: 5796 RVA: 0x0005080A File Offset: 0x0004EA0A
			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x060016A5 RID: 5797 RVA: 0x00050836 File Offset: 0x0004EA36
			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x060016A6 RID: 5798 RVA: 0x00050862 File Offset: 0x0004EA62
			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			// Token: 0x060016A7 RID: 5799 RVA: 0x0005088D File Offset: 0x0004EA8D
			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x060016A8 RID: 5800 RVA: 0x000508B8 File Offset: 0x0004EAB8
			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			// Token: 0x060016A9 RID: 5801 RVA: 0x000508E2 File Offset: 0x0004EAE2
			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			// Token: 0x060016AA RID: 5802 RVA: 0x0005090E File Offset: 0x0004EB0E
			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			// Token: 0x060016AB RID: 5803 RVA: 0x0005093B File Offset: 0x0004EB3B
			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			// Token: 0x060016AC RID: 5804 RVA: 0x00050968 File Offset: 0x0004EB68
			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			// Token: 0x060016AD RID: 5805 RVA: 0x00050993 File Offset: 0x0004EB93
			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			// Token: 0x060016AE RID: 5806 RVA: 0x000509BD File Offset: 0x0004EBBD
			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			// Token: 0x060016AF RID: 5807 RVA: 0x000509E7 File Offset: 0x0004EBE7
			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			// Token: 0x060016B0 RID: 5808 RVA: 0x00050A11 File Offset: 0x0004EC11
			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			// Token: 0x060016B1 RID: 5809 RVA: 0x00050A3D File Offset: 0x0004EC3D
			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016B2 RID: 5810 RVA: 0x00050A68 File Offset: 0x0004EC68
			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			// Token: 0x060016B3 RID: 5811 RVA: 0x00050A95 File Offset: 0x0004EC95
			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			// Token: 0x060016B4 RID: 5812 RVA: 0x00050AC2 File Offset: 0x0004ECC2
			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016B5 RID: 5813 RVA: 0x00050AED File Offset: 0x0004ECED
			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016B6 RID: 5814 RVA: 0x00050B18 File Offset: 0x0004ED18
			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016B7 RID: 5815 RVA: 0x00050B43 File Offset: 0x0004ED43
			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016B8 RID: 5816 RVA: 0x00050B6E File Offset: 0x0004ED6E
			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			// Token: 0x060016B9 RID: 5817 RVA: 0x00050B9B File Offset: 0x0004ED9B
			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			// Token: 0x060016BA RID: 5818 RVA: 0x00050BC7 File Offset: 0x0004EDC7
			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x060016BB RID: 5819 RVA: 0x00050BF3 File Offset: 0x0004EDF3
			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x060016BC RID: 5820 RVA: 0x00050C1F File Offset: 0x0004EE1F
			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x060016BD RID: 5821 RVA: 0x00050C4B File Offset: 0x0004EE4B
			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x060016BE RID: 5822 RVA: 0x00050C78 File Offset: 0x0004EE78
			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			// Token: 0x060016BF RID: 5823 RVA: 0x00050CA4 File Offset: 0x0004EEA4
			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x060016C0 RID: 5824 RVA: 0x00050CD1 File Offset: 0x0004EED1
			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x060016C1 RID: 5825 RVA: 0x00050CFE File Offset: 0x0004EEFE
			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			// Token: 0x060016C2 RID: 5826 RVA: 0x00050D2B File Offset: 0x0004EF2B
			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x060016C3 RID: 5827 RVA: 0x00050D57 File Offset: 0x0004EF57
			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x060016C4 RID: 5828 RVA: 0x00050D83 File Offset: 0x0004EF83
			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			// Token: 0x060016C5 RID: 5829 RVA: 0x00050DAF File Offset: 0x0004EFAF
			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016C6 RID: 5830 RVA: 0x00050DDA File Offset: 0x0004EFDA
			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016C7 RID: 5831 RVA: 0x00050E05 File Offset: 0x0004F005
			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016C8 RID: 5832 RVA: 0x00050E30 File Offset: 0x0004F030
			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			// Token: 0x060016C9 RID: 5833 RVA: 0x00050E5F File Offset: 0x0004F05F
			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			// Token: 0x060016CA RID: 5834 RVA: 0x00050E8A File Offset: 0x0004F08A
			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x060016CB RID: 5835 RVA: 0x00050EB7 File Offset: 0x0004F0B7
			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			// Token: 0x060016CC RID: 5836 RVA: 0x00050EEC File Offset: 0x0004F0EC
			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			// Token: 0x060016CD RID: 5837 RVA: 0x00050F1B File Offset: 0x0004F11B
			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			// Token: 0x060016CE RID: 5838 RVA: 0x00050F47 File Offset: 0x0004F147
			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			// Token: 0x060016CF RID: 5839 RVA: 0x00050F73 File Offset: 0x0004F173
			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			// Token: 0x060016D0 RID: 5840 RVA: 0x00050F9F File Offset: 0x0004F19F
			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			// Token: 0x060016D1 RID: 5841 RVA: 0x00050FCB File Offset: 0x0004F1CB
			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			// Token: 0x060016D2 RID: 5842 RVA: 0x00050FF6 File Offset: 0x0004F1F6
			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			// Token: 0x060016D3 RID: 5843 RVA: 0x00051023 File Offset: 0x0004F223
			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x060016D4 RID: 5844 RVA: 0x00051054 File Offset: 0x0004F254
			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			// Token: 0x060016D5 RID: 5845 RVA: 0x0005107F File Offset: 0x0004F27F
			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			// Token: 0x060016D6 RID: 5846 RVA: 0x000510AB File Offset: 0x0004F2AB
			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			// Token: 0x060016D7 RID: 5847 RVA: 0x000510D6 File Offset: 0x0004F2D6
			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x060016D8 RID: 5848 RVA: 0x00051101 File Offset: 0x0004F301
			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			// Token: 0x060016D9 RID: 5849 RVA: 0x0005112E File Offset: 0x0004F32E
			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			// Token: 0x060016DA RID: 5850 RVA: 0x0005115B File Offset: 0x0004F35B
			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			// Token: 0x060016DB RID: 5851 RVA: 0x0005118A File Offset: 0x0004F38A
			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x060016DC RID: 5852 RVA: 0x000511B9 File Offset: 0x0004F3B9
			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x060016DD RID: 5853 RVA: 0x000511E4 File Offset: 0x0004F3E4
			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			// Token: 0x060016DE RID: 5854 RVA: 0x00051210 File Offset: 0x0004F410
			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			// Token: 0x060016DF RID: 5855 RVA: 0x0005123D File Offset: 0x0004F43D
			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			// Token: 0x060016E0 RID: 5856 RVA: 0x0005126A File Offset: 0x0004F46A
			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			// Token: 0x060016E1 RID: 5857 RVA: 0x0005129F File Offset: 0x0004F49F
			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			// Token: 0x060016E2 RID: 5858 RVA: 0x000512CE File Offset: 0x0004F4CE
			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			// Token: 0x060016E3 RID: 5859 RVA: 0x000512F8 File Offset: 0x0004F4F8
			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			// Token: 0x060016E4 RID: 5860 RVA: 0x00051324 File Offset: 0x0004F524
			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			// Token: 0x060016E5 RID: 5861 RVA: 0x00051366 File Offset: 0x0004F566
			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			// Token: 0x060016E6 RID: 5862 RVA: 0x00051390 File Offset: 0x0004F590
			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x060016E7 RID: 5863 RVA: 0x000513BC File Offset: 0x0004F5BC
			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x060016E8 RID: 5864 RVA: 0x000513EB File Offset: 0x0004F5EB
			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			// Token: 0x060016E9 RID: 5865 RVA: 0x00051416 File Offset: 0x0004F616
			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x060016EA RID: 5866 RVA: 0x00051443 File Offset: 0x0004F643
			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x060016EB RID: 5867 RVA: 0x00051470 File Offset: 0x0004F670
			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			// Token: 0x060016EC RID: 5868 RVA: 0x0005149A File Offset: 0x0004F69A
			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			// Token: 0x060016ED RID: 5869 RVA: 0x000514C4 File Offset: 0x0004F6C4
			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			// Token: 0x060016EE RID: 5870 RVA: 0x000514F1 File Offset: 0x0004F6F1
			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			// Token: 0x060016EF RID: 5871 RVA: 0x0005151D File Offset: 0x0004F71D
			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			// Token: 0x060016F0 RID: 5872 RVA: 0x00051547 File Offset: 0x0004F747
			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			// Token: 0x060016F1 RID: 5873 RVA: 0x00051574 File Offset: 0x0004F774
			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			// Token: 0x060016F2 RID: 5874 RVA: 0x000515A3 File Offset: 0x0004F7A3
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			// Token: 0x060016F3 RID: 5875 RVA: 0x000515D2 File Offset: 0x0004F7D2
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			// Token: 0x060016F4 RID: 5876 RVA: 0x00051601 File Offset: 0x0004F801
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			// Token: 0x060016F5 RID: 5877 RVA: 0x00051630 File Offset: 0x0004F830
			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			// Token: 0x060016F6 RID: 5878 RVA: 0x0005165C File Offset: 0x0004F85C
			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			// Token: 0x060016F7 RID: 5879 RVA: 0x00051687 File Offset: 0x0004F887
			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			// Token: 0x060016F8 RID: 5880 RVA: 0x000516B2 File Offset: 0x0004F8B2
			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			// Token: 0x060016F9 RID: 5881 RVA: 0x000516DD File Offset: 0x0004F8DD
			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			// Token: 0x060016FA RID: 5882 RVA: 0x0005170A File Offset: 0x0004F90A
			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			// Token: 0x060016FB RID: 5883 RVA: 0x00051734 File Offset: 0x0004F934
			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			// Token: 0x060016FC RID: 5884 RVA: 0x0005175E File Offset: 0x0004F95E
			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			// Token: 0x060016FD RID: 5885 RVA: 0x00051789 File Offset: 0x0004F989
			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			// Token: 0x060016FE RID: 5886 RVA: 0x000517B4 File Offset: 0x0004F9B4
			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			// Token: 0x060016FF RID: 5887 RVA: 0x000517DF File Offset: 0x0004F9DF
			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			// Token: 0x06001700 RID: 5888 RVA: 0x0005180A File Offset: 0x0004FA0A
			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			// Token: 0x06001701 RID: 5889 RVA: 0x0005183D File Offset: 0x0004FA3D
			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			// Token: 0x06001702 RID: 5890 RVA: 0x00051868 File Offset: 0x0004FA68
			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			// Token: 0x06001703 RID: 5891 RVA: 0x00051893 File Offset: 0x0004FA93
			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			// Token: 0x06001704 RID: 5892 RVA: 0x000518BE File Offset: 0x0004FABE
			public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			// Token: 0x06001705 RID: 5893 RVA: 0x000518E9 File Offset: 0x0004FAE9
			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			// Token: 0x06001706 RID: 5894 RVA: 0x00051914 File Offset: 0x0004FB14
			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			// Token: 0x06001707 RID: 5895 RVA: 0x0005193E File Offset: 0x0004FB3E
			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			// Token: 0x06001708 RID: 5896 RVA: 0x00051968 File Offset: 0x0004FB68
			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			// Token: 0x06001709 RID: 5897 RVA: 0x00051992 File Offset: 0x0004FB92
			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			// Token: 0x0600170A RID: 5898 RVA: 0x000519BC File Offset: 0x0004FBBC
			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			// Token: 0x0600170B RID: 5899 RVA: 0x000519E6 File Offset: 0x0004FBE6
			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			// Token: 0x0600170C RID: 5900 RVA: 0x00051A10 File Offset: 0x0004FC10
			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			// Token: 0x0600170D RID: 5901 RVA: 0x00051A3B File Offset: 0x0004FC3B
			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			// Token: 0x0600170E RID: 5902 RVA: 0x00051A66 File Offset: 0x0004FC66
			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			// Token: 0x0600170F RID: 5903 RVA: 0x00051A91 File Offset: 0x0004FC91
			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			// Token: 0x06001710 RID: 5904 RVA: 0x00051ABC File Offset: 0x0004FCBC
			public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			// Token: 0x06001711 RID: 5905 RVA: 0x00051AE7 File Offset: 0x0004FCE7
			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			// Token: 0x06001712 RID: 5906 RVA: 0x00051B12 File Offset: 0x0004FD12
			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			// Token: 0x06001713 RID: 5907 RVA: 0x00051B3D File Offset: 0x0004FD3D
			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			// Token: 0x06001714 RID: 5908 RVA: 0x00051B67 File Offset: 0x0004FD67
			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			// Token: 0x06001715 RID: 5909 RVA: 0x00051B93 File Offset: 0x0004FD93
			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			// Token: 0x06001716 RID: 5910 RVA: 0x00051BBE File Offset: 0x0004FDBE
			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			// Token: 0x06001717 RID: 5911 RVA: 0x00051BE9 File Offset: 0x0004FDE9
			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			// Token: 0x06001718 RID: 5912 RVA: 0x00051C14 File Offset: 0x0004FE14
			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			// Token: 0x06001719 RID: 5913 RVA: 0x00051C43 File Offset: 0x0004FE43
			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			// Token: 0x0600171A RID: 5914 RVA: 0x00051C6D File Offset: 0x0004FE6D
			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			// Token: 0x0600171B RID: 5915 RVA: 0x00051C98 File Offset: 0x0004FE98
			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			// Token: 0x0600171C RID: 5916 RVA: 0x00051CC5 File Offset: 0x0004FEC5
			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x0600171D RID: 5917 RVA: 0x00051CF2 File Offset: 0x0004FEF2
			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x0600171E RID: 5918 RVA: 0x00051D1F File Offset: 0x0004FF1F
			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x0600171F RID: 5919 RVA: 0x00051D4A File Offset: 0x0004FF4A
			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x06001720 RID: 5920 RVA: 0x00051D75 File Offset: 0x0004FF75
			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x06001721 RID: 5921 RVA: 0x00051DA1 File Offset: 0x0004FFA1
			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			// Token: 0x06001722 RID: 5922 RVA: 0x00051DCD File Offset: 0x0004FFCD
			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			// Token: 0x06001723 RID: 5923 RVA: 0x00051DF7 File Offset: 0x0004FFF7
			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			// Token: 0x06001724 RID: 5924 RVA: 0x00051E21 File Offset: 0x00050021
			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			// Token: 0x06001725 RID: 5925 RVA: 0x00051E4B File Offset: 0x0005004B
			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			// Token: 0x06001726 RID: 5926 RVA: 0x00051E7A File Offset: 0x0005007A
			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			// Token: 0x06001727 RID: 5927 RVA: 0x00051EA9 File Offset: 0x000500A9
			public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			// Token: 0x06001728 RID: 5928 RVA: 0x00051ED4 File Offset: 0x000500D4
			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			// Token: 0x06001729 RID: 5929 RVA: 0x00051EFF File Offset: 0x000500FF
			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Mac.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			// Token: 0x0600172A RID: 5930 RVA: 0x00051F29 File Offset: 0x00050129
			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			// Token: 0x0600172B RID: 5931 RVA: 0x00051F54 File Offset: 0x00050154
			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			// Token: 0x0600172C RID: 5932 RVA: 0x00051F7F File Offset: 0x0005017F
			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x0600172D RID: 5933 RVA: 0x00051FAA File Offset: 0x000501AA
			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600172E RID: 5934 RVA: 0x00051FD7 File Offset: 0x000501D7
			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600172F RID: 5935 RVA: 0x00052004 File Offset: 0x00050204
			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x06001730 RID: 5936 RVA: 0x00052031 File Offset: 0x00050231
			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			// Token: 0x06001731 RID: 5937 RVA: 0x0005205E File Offset: 0x0005025E
			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			// Token: 0x06001732 RID: 5938 RVA: 0x0005208B File Offset: 0x0005028B
			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x06001733 RID: 5939 RVA: 0x000520BA File Offset: 0x000502BA
			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x06001734 RID: 5940 RVA: 0x000520E6 File Offset: 0x000502E6
			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x06001735 RID: 5941 RVA: 0x00052112 File Offset: 0x00050312
			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Mac.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x06001736 RID: 5942 RVA: 0x0005213D File Offset: 0x0005033D
			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Mac.Native.SteamAPI_Init();
			}

			// Token: 0x06001737 RID: 5943 RVA: 0x00052144 File Offset: 0x00050344
			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Mac.Native.SteamAPI_RunCallbacks();
			}

			// Token: 0x06001738 RID: 5944 RVA: 0x0005214B File Offset: 0x0005034B
			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Mac.Native.SteamGameServer_RunCallbacks();
			}

			// Token: 0x06001739 RID: 5945 RVA: 0x00052152 File Offset: 0x00050352
			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Mac.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			// Token: 0x0600173A RID: 5946 RVA: 0x0005215B File Offset: 0x0005035B
			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Mac.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			// Token: 0x0600173B RID: 5947 RVA: 0x00052163 File Offset: 0x00050363
			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Mac.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			// Token: 0x0600173C RID: 5948 RVA: 0x0005216C File Offset: 0x0005036C
			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Mac.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			// Token: 0x0600173D RID: 5949 RVA: 0x00052175 File Offset: 0x00050375
			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Mac.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			// Token: 0x0600173E RID: 5950 RVA: 0x00052185 File Offset: 0x00050385
			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Mac.Native.SteamAPI_Shutdown();
			}

			// Token: 0x0600173F RID: 5951 RVA: 0x0005218C File Offset: 0x0005038C
			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Mac.Native.SteamGameServer_Shutdown();
			}

			// Token: 0x06001740 RID: 5952 RVA: 0x00052193 File Offset: 0x00050393
			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Mac.Native.SteamAPI_GetHSteamUser();
			}

			// Token: 0x06001741 RID: 5953 RVA: 0x0005219A File Offset: 0x0005039A
			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Mac.Native.SteamAPI_GetHSteamPipe();
			}

			// Token: 0x06001742 RID: 5954 RVA: 0x000521A1 File Offset: 0x000503A1
			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Mac.Native.SteamGameServer_GetHSteamUser();
			}

			// Token: 0x06001743 RID: 5955 RVA: 0x000521A8 File Offset: 0x000503A8
			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Mac.Native.SteamGameServer_GetHSteamPipe();
			}

			// Token: 0x06001744 RID: 5956 RVA: 0x000521AF File Offset: 0x000503AF
			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Mac.Native.SteamInternal_CreateInterface(version);
			}

			// Token: 0x06001745 RID: 5957 RVA: 0x000521B7 File Offset: 0x000503B7
			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Mac.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			// Token: 0x04000932 RID: 2354
			internal IntPtr _ptr;

			// Token: 0x020002B6 RID: 694
			internal static class Native
			{
				// Token: 0x0600252E RID: 9518
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				// Token: 0x0600252F RID: 9519
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06002530 RID: 9520
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06002531 RID: 9521
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				// Token: 0x06002532 RID: 9522
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				// Token: 0x06002533 RID: 9523
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002534 RID: 9524
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002535 RID: 9525
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				// Token: 0x06002536 RID: 9526
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002537 RID: 9527
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				// Token: 0x06002538 RID: 9528
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002539 RID: 9529
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600253A RID: 9530
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600253B RID: 9531
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600253C RID: 9532
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600253D RID: 9533
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600253E RID: 9534
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x0600253F RID: 9535
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002540 RID: 9536
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002541 RID: 9537
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				// Token: 0x06002542 RID: 9538
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				// Token: 0x06002543 RID: 9539
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				// Token: 0x06002544 RID: 9540
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002545 RID: 9541
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002546 RID: 9542
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002547 RID: 9543
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002548 RID: 9544
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002549 RID: 9545
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600254A RID: 9546
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600254B RID: 9547
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600254C RID: 9548
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600254D RID: 9549
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600254E RID: 9550
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				// Token: 0x0600254F RID: 9551
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				// Token: 0x06002550 RID: 9552
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				// Token: 0x06002551 RID: 9553
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

				// Token: 0x06002552 RID: 9554
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				// Token: 0x06002553 RID: 9555
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				// Token: 0x06002554 RID: 9556
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				// Token: 0x06002555 RID: 9557
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002556 RID: 9558
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002557 RID: 9559
				[DllImport("libsteam_api.dylib")]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06002558 RID: 9560
				[DllImport("libsteam_api.dylib")]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, [MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06002559 RID: 9561
				[DllImport("libsteam_api.dylib")]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				// Token: 0x0600255A RID: 9562
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				// Token: 0x0600255B RID: 9563
				[DllImport("libsteam_api.dylib")]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x0600255C RID: 9564
				[DllImport("libsteam_api.dylib")]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x0600255D RID: 9565
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				// Token: 0x0600255E RID: 9566
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				// Token: 0x0600255F RID: 9567
				[DllImport("libsteam_api.dylib")]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				// Token: 0x06002560 RID: 9568
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				// Token: 0x06002561 RID: 9569
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				// Token: 0x06002562 RID: 9570
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				// Token: 0x06002563 RID: 9571
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002564 RID: 9572
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

				// Token: 0x06002565 RID: 9573
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				// Token: 0x06002566 RID: 9574
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				// Token: 0x06002567 RID: 9575
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				// Token: 0x06002568 RID: 9576
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				// Token: 0x06002569 RID: 9577
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				// Token: 0x0600256A RID: 9578
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				// Token: 0x0600256B RID: 9579
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				// Token: 0x0600256C RID: 9580
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				// Token: 0x0600256D RID: 9581
				[DllImport("libsteam_api.dylib")]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				// Token: 0x0600256E RID: 9582
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				// Token: 0x0600256F RID: 9583
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				// Token: 0x06002570 RID: 9584
				[DllImport("libsteam_api.dylib")]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002571 RID: 9585
				[DllImport("libsteam_api.dylib")]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002572 RID: 9586
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002573 RID: 9587
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t.PackSmall pFriendGameInfo);

				// Token: 0x06002574 RID: 9588
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				// Token: 0x06002575 RID: 9589
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002576 RID: 9590
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				// Token: 0x06002577 RID: 9591
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				// Token: 0x06002578 RID: 9592
				[DllImport("libsteam_api.dylib")]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				// Token: 0x06002579 RID: 9593
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x0600257A RID: 9594
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x0600257B RID: 9595
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				// Token: 0x0600257C RID: 9596
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				// Token: 0x0600257D RID: 9597
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				// Token: 0x0600257E RID: 9598
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				// Token: 0x0600257F RID: 9599
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002580 RID: 9600
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002581 RID: 9601
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				// Token: 0x06002582 RID: 9602
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				// Token: 0x06002583 RID: 9603
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				// Token: 0x06002584 RID: 9604
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				// Token: 0x06002585 RID: 9605
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				// Token: 0x06002586 RID: 9606
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

				// Token: 0x06002587 RID: 9607
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				// Token: 0x06002588 RID: 9608
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				// Token: 0x06002589 RID: 9609
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				// Token: 0x0600258A RID: 9610
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				// Token: 0x0600258B RID: 9611
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				// Token: 0x0600258C RID: 9612
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				// Token: 0x0600258D RID: 9613
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600258E RID: 9614
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600258F RID: 9615
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002590 RID: 9616
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

				// Token: 0x06002591 RID: 9617
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002592 RID: 9618
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002593 RID: 9619
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002594 RID: 9620
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				// Token: 0x06002595 RID: 9621
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				// Token: 0x06002596 RID: 9622
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				// Token: 0x06002597 RID: 9623
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				// Token: 0x06002598 RID: 9624
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				// Token: 0x06002599 RID: 9625
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600259A RID: 9626
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				// Token: 0x0600259B RID: 9627
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600259C RID: 9628
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				// Token: 0x0600259D RID: 9629
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				// Token: 0x0600259E RID: 9630
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				// Token: 0x0600259F RID: 9631
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060025A0 RID: 9632
				[DllImport("libsteam_api.dylib")]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x060025A1 RID: 9633
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060025A2 RID: 9634
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060025A3 RID: 9635
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060025A4 RID: 9636
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				// Token: 0x060025A5 RID: 9637
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				// Token: 0x060025A6 RID: 9638
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				// Token: 0x060025A7 RID: 9639
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				// Token: 0x060025A8 RID: 9640
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x060025A9 RID: 9641
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x060025AA RID: 9642
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x060025AB RID: 9643
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

				// Token: 0x060025AC RID: 9644
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				// Token: 0x060025AD RID: 9645
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x060025AE RID: 9646
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x060025AF RID: 9647
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x060025B0 RID: 9648
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				// Token: 0x060025B1 RID: 9649
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060025B2 RID: 9650
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x060025B3 RID: 9651
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				// Token: 0x060025B4 RID: 9652
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				// Token: 0x060025B5 RID: 9653
				[DllImport("libsteam_api.dylib")]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				// Token: 0x060025B6 RID: 9654
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				// Token: 0x060025B7 RID: 9655
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				// Token: 0x060025B8 RID: 9656
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				// Token: 0x060025B9 RID: 9657
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				// Token: 0x060025BA RID: 9658
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				// Token: 0x060025BB RID: 9659
				[DllImport("libsteam_api.dylib")]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				// Token: 0x060025BC RID: 9660
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				// Token: 0x060025BD RID: 9661
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				// Token: 0x060025BE RID: 9662
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x060025BF RID: 9663
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				// Token: 0x060025C0 RID: 9664
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x060025C1 RID: 9665
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				// Token: 0x060025C2 RID: 9666
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				// Token: 0x060025C3 RID: 9667
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				// Token: 0x060025C4 RID: 9668
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				// Token: 0x060025C5 RID: 9669
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				// Token: 0x060025C6 RID: 9670
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				// Token: 0x060025C7 RID: 9671
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				// Token: 0x060025C8 RID: 9672
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				// Token: 0x060025C9 RID: 9673
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				// Token: 0x060025CA RID: 9674
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				// Token: 0x060025CB RID: 9675
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				// Token: 0x060025CC RID: 9676
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				// Token: 0x060025CD RID: 9677
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				// Token: 0x060025CE RID: 9678
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				// Token: 0x060025CF RID: 9679
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x060025D0 RID: 9680
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				// Token: 0x060025D1 RID: 9681
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				// Token: 0x060025D2 RID: 9682
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				// Token: 0x060025D3 RID: 9683
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				// Token: 0x060025D4 RID: 9684
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				// Token: 0x060025D5 RID: 9685
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x060025D6 RID: 9686
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x060025D7 RID: 9687
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				// Token: 0x060025D8 RID: 9688
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				// Token: 0x060025D9 RID: 9689
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				// Token: 0x060025DA RID: 9690
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				// Token: 0x060025DB RID: 9691
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025DC RID: 9692
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				// Token: 0x060025DD RID: 9693
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				// Token: 0x060025DE RID: 9694
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025DF RID: 9695
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025E0 RID: 9696
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				// Token: 0x060025E1 RID: 9697
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025E2 RID: 9698
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				// Token: 0x060025E3 RID: 9699
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x060025E4 RID: 9700
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x060025E5 RID: 9701
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025E6 RID: 9702
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				// Token: 0x060025E7 RID: 9703
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x060025E8 RID: 9704
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				// Token: 0x060025E9 RID: 9705
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x060025EA RID: 9706
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				// Token: 0x060025EB RID: 9707
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x060025EC RID: 9708
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025ED RID: 9709
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				// Token: 0x060025EE RID: 9710
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				// Token: 0x060025EF RID: 9711
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				// Token: 0x060025F0 RID: 9712
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025F1 RID: 9713
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				// Token: 0x060025F2 RID: 9714
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

				// Token: 0x060025F3 RID: 9715
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060025F4 RID: 9716
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				// Token: 0x060025F5 RID: 9717
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				// Token: 0x060025F6 RID: 9718
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060025F7 RID: 9719
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				// Token: 0x060025F8 RID: 9720
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060025F9 RID: 9721
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060025FA RID: 9722
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060025FB RID: 9723
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060025FC RID: 9724
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				// Token: 0x060025FD RID: 9725
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x060025FE RID: 9726
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x060025FF RID: 9727
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002600 RID: 9728
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002601 RID: 9729
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002602 RID: 9730
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002603 RID: 9731
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002604 RID: 9732
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002605 RID: 9733
				[DllImport("libsteam_api.dylib")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002606 RID: 9734
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				// Token: 0x06002607 RID: 9735
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				// Token: 0x06002608 RID: 9736
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				// Token: 0x06002609 RID: 9737
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				// Token: 0x0600260A RID: 9738
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				// Token: 0x0600260B RID: 9739
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				// Token: 0x0600260C RID: 9740
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600260D RID: 9741
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600260E RID: 9742
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x0600260F RID: 9743
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				// Token: 0x06002610 RID: 9744
				[DllImport("libsteam_api.dylib")]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002611 RID: 9745
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				// Token: 0x06002612 RID: 9746
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002613 RID: 9747
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002614 RID: 9748
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002615 RID: 9749
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002616 RID: 9750
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002617 RID: 9751
				[DllImport("libsteam_api.dylib")]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002618 RID: 9752
				[DllImport("libsteam_api.dylib")]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002619 RID: 9753
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				// Token: 0x0600261A RID: 9754
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				// Token: 0x0600261B RID: 9755
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				// Token: 0x0600261C RID: 9756
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				// Token: 0x0600261D RID: 9757
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				// Token: 0x0600261E RID: 9758
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x0600261F RID: 9759
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				// Token: 0x06002620 RID: 9760
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				// Token: 0x06002621 RID: 9761
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				// Token: 0x06002622 RID: 9762
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				// Token: 0x06002623 RID: 9763
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				// Token: 0x06002624 RID: 9764
				[DllImport("libsteam_api.dylib")]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				// Token: 0x06002625 RID: 9765
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags, WorkshopFileType eWorkshopFileType);

				// Token: 0x06002626 RID: 9766
				[DllImport("libsteam_api.dylib")]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002627 RID: 9767
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				// Token: 0x06002628 RID: 9768
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				// Token: 0x06002629 RID: 9769
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				// Token: 0x0600262A RID: 9770
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				// Token: 0x0600262B RID: 9771
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x0600262C RID: 9772
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x0600262D RID: 9773
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				// Token: 0x0600262E RID: 9774
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				// Token: 0x0600262F RID: 9775
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002630 RID: 9776
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x06002631 RID: 9777
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002632 RID: 9778
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x06002633 RID: 9779
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002634 RID: 9780
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				// Token: 0x06002635 RID: 9781
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002636 RID: 9782
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x06002637 RID: 9783
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002638 RID: 9784
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t.PackSmall pRequiredTags, ref SteamParamStringArray_t.PackSmall pExcludedTags);

				// Token: 0x06002639 RID: 9785
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x0600263A RID: 9786
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				// Token: 0x0600263B RID: 9787
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				// Token: 0x0600263C RID: 9788
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t.PackSmall pTags, ref SteamParamStringArray_t.PackSmall pUserTags);

				// Token: 0x0600263D RID: 9789
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				// Token: 0x0600263E RID: 9790
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				// Token: 0x0600263F RID: 9791
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				// Token: 0x06002640 RID: 9792
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				// Token: 0x06002641 RID: 9793
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				// Token: 0x06002642 RID: 9794
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				// Token: 0x06002643 RID: 9795
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x06002644 RID: 9796
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002645 RID: 9797
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002646 RID: 9798
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002647 RID: 9799
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002648 RID: 9800
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				// Token: 0x06002649 RID: 9801
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				// Token: 0x0600264A RID: 9802
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				// Token: 0x0600264B RID: 9803
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				// Token: 0x0600264C RID: 9804
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				// Token: 0x0600264D RID: 9805
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				// Token: 0x0600264E RID: 9806
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				// Token: 0x0600264F RID: 9807
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002650 RID: 9808
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x06002651 RID: 9809
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002652 RID: 9810
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002653 RID: 9811
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

				// Token: 0x06002654 RID: 9812
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				// Token: 0x06002655 RID: 9813
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				// Token: 0x06002656 RID: 9814
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002657 RID: 9815
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002658 RID: 9816
				[DllImport("libsteam_api.dylib")]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002659 RID: 9817
				[DllImport("libsteam_api.dylib")]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x0600265A RID: 9818
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				// Token: 0x0600265B RID: 9819
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				// Token: 0x0600265C RID: 9820
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t.PackSmall pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				// Token: 0x0600265D RID: 9821
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				// Token: 0x0600265E RID: 9822
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				// Token: 0x0600265F RID: 9823
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				// Token: 0x06002660 RID: 9824
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				// Token: 0x06002661 RID: 9825
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002662 RID: 9826
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002663 RID: 9827
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				// Token: 0x06002664 RID: 9828
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				// Token: 0x06002665 RID: 9829
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				// Token: 0x06002666 RID: 9830
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				// Token: 0x06002667 RID: 9831
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				// Token: 0x06002668 RID: 9832
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				// Token: 0x06002669 RID: 9833
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				// Token: 0x0600266A RID: 9834
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				// Token: 0x0600266B RID: 9835
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				// Token: 0x0600266C RID: 9836
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				// Token: 0x0600266D RID: 9837
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				// Token: 0x0600266E RID: 9838
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				// Token: 0x0600266F RID: 9839
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				// Token: 0x06002670 RID: 9840
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x06002671 RID: 9841
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002672 RID: 9842
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				// Token: 0x06002673 RID: 9843
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				// Token: 0x06002674 RID: 9844
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x06002675 RID: 9845
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002676 RID: 9846
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002677 RID: 9847
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002678 RID: 9848
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x06002679 RID: 9849
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

				// Token: 0x0600267A RID: 9850
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				// Token: 0x0600267B RID: 9851
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				// Token: 0x0600267C RID: 9852
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x0600267D RID: 9853
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				// Token: 0x0600267E RID: 9854
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				// Token: 0x0600267F RID: 9855
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x06002680 RID: 9856
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				// Token: 0x06002681 RID: 9857
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				// Token: 0x06002682 RID: 9858
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				// Token: 0x06002683 RID: 9859
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				// Token: 0x06002684 RID: 9860
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				// Token: 0x06002685 RID: 9861
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				// Token: 0x06002686 RID: 9862
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x06002687 RID: 9863
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x06002688 RID: 9864
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				// Token: 0x06002689 RID: 9865
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t.PackSmall pConnectionState);

				// Token: 0x0600268A RID: 9866
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, [MarshalAs(UnmanagedType.U1)] bool bAllow);

				// Token: 0x0600268B RID: 9867
				[DllImport("libsteam_api.dylib")]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x0600268C RID: 9868
				[DllImport("libsteam_api.dylib")]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x0600268D RID: 9869
				[DllImport("libsteam_api.dylib")]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				// Token: 0x0600268E RID: 9870
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x0600268F RID: 9871
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x06002690 RID: 9872
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

				// Token: 0x06002691 RID: 9873
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				// Token: 0x06002692 RID: 9874
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				// Token: 0x06002693 RID: 9875
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x06002694 RID: 9876
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x06002695 RID: 9877
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				// Token: 0x06002696 RID: 9878
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				// Token: 0x06002697 RID: 9879
				[DllImport("libsteam_api.dylib")]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x06002698 RID: 9880
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x06002699 RID: 9881
				[DllImport("libsteam_api.dylib")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				// Token: 0x0600269A RID: 9882
				[DllImport("libsteam_api.dylib")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				// Token: 0x0600269B RID: 9883
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				// Token: 0x0600269C RID: 9884
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, [MarshalAs(UnmanagedType.U1)] bool bHook);

				// Token: 0x0600269D RID: 9885
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				// Token: 0x0600269E RID: 9886
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				// Token: 0x0600269F RID: 9887
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				// Token: 0x060026A0 RID: 9888
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				// Token: 0x060026A1 RID: 9889
				[DllImport("libsteam_api.dylib")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				// Token: 0x060026A2 RID: 9890
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				// Token: 0x060026A3 RID: 9891
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				// Token: 0x060026A4 RID: 9892
				[DllImport("libsteam_api.dylib")]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				// Token: 0x060026A5 RID: 9893
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				// Token: 0x060026A6 RID: 9894
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				// Token: 0x060026A7 RID: 9895
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				// Token: 0x060026A8 RID: 9896
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				// Token: 0x060026A9 RID: 9897
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				// Token: 0x060026AA RID: 9898
				[DllImport("libsteam_api.dylib")]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				// Token: 0x060026AB RID: 9899
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				// Token: 0x060026AC RID: 9900
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x060026AD RID: 9901
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x060026AE RID: 9902
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026AF RID: 9903
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				// Token: 0x060026B0 RID: 9904
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x060026B1 RID: 9905
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B2 RID: 9906
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B3 RID: 9907
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B4 RID: 9908
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B5 RID: 9909
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B6 RID: 9910
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B7 RID: 9911
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				// Token: 0x060026B8 RID: 9912
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026B9 RID: 9913
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x060026BA RID: 9914
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				// Token: 0x060026BB RID: 9915
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x060026BC RID: 9916
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bAvailable);

				// Token: 0x060026BD RID: 9917
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				// Token: 0x060026BE RID: 9918
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				// Token: 0x060026BF RID: 9919
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x060026C0 RID: 9920
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x060026C1 RID: 9921
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x060026C2 RID: 9922
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				// Token: 0x060026C3 RID: 9923
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x060026C4 RID: 9924
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x060026C5 RID: 9925
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x060026C6 RID: 9926
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x060026C7 RID: 9927
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				// Token: 0x060026C8 RID: 9928
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x060026C9 RID: 9929
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x060026CA RID: 9930
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x060026CB RID: 9931
				[DllImport("libsteam_api.dylib")]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				// Token: 0x060026CC RID: 9932
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				// Token: 0x060026CD RID: 9933
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				// Token: 0x060026CE RID: 9934
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				// Token: 0x060026CF RID: 9935
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				// Token: 0x060026D0 RID: 9936
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x060026D1 RID: 9937
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x060026D2 RID: 9938
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x060026D3 RID: 9939
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x060026D4 RID: 9940
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				// Token: 0x060026D5 RID: 9941
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				// Token: 0x060026D6 RID: 9942
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				// Token: 0x060026D7 RID: 9943
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x060026D8 RID: 9944
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x060026D9 RID: 9945
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x060026DA RID: 9946
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				// Token: 0x060026DB RID: 9947
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				// Token: 0x060026DC RID: 9948
				[DllImport("libsteam_api.dylib")]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

				// Token: 0x060026DD RID: 9949
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				// Token: 0x060026DE RID: 9950
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				// Token: 0x060026DF RID: 9951
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				// Token: 0x060026E0 RID: 9952
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				// Token: 0x060026E1 RID: 9953
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

				// Token: 0x060026E2 RID: 9954
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				// Token: 0x060026E3 RID: 9955
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

				// Token: 0x060026E4 RID: 9956
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				// Token: 0x060026E5 RID: 9957
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				// Token: 0x060026E6 RID: 9958
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				// Token: 0x060026E7 RID: 9959
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				// Token: 0x060026E8 RID: 9960
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060026E9 RID: 9961
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				// Token: 0x060026EA RID: 9962
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				// Token: 0x060026EB RID: 9963
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060026EC RID: 9964
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x060026ED RID: 9965
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x060026EE RID: 9966
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060026EF RID: 9967
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				// Token: 0x060026F0 RID: 9968
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x060026F1 RID: 9969
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				// Token: 0x060026F2 RID: 9970
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x060026F3 RID: 9971
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x060026F4 RID: 9972
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				// Token: 0x060026F5 RID: 9973
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x060026F6 RID: 9974
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				// Token: 0x060026F7 RID: 9975
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				// Token: 0x060026F8 RID: 9976
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				// Token: 0x060026F9 RID: 9977
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				// Token: 0x060026FA RID: 9978
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				// Token: 0x060026FB RID: 9979
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				// Token: 0x060026FC RID: 9980
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				// Token: 0x060026FD RID: 9981
				[DllImport("libsteam_api.dylib")]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060026FE RID: 9982
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x060026FF RID: 9983
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002700 RID: 9984
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002701 RID: 9985
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002702 RID: 9986
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002703 RID: 9987
				[DllImport("libsteam_api.dylib")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x06002704 RID: 9988
				[DllImport("libsteam_api.dylib")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x06002705 RID: 9989
				[DllImport("libsteam_api.dylib")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002706 RID: 9990
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x06002707 RID: 9991
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t.PackSmall pDetails);

				// Token: 0x06002708 RID: 9992
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				// Token: 0x06002709 RID: 9993
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				// Token: 0x0600270A RID: 9994
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x0600270B RID: 9995
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				// Token: 0x0600270C RID: 9996
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x0600270D RID: 9997
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				// Token: 0x0600270E RID: 9998
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x0600270F RID: 9999
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				// Token: 0x06002710 RID: 10000
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x06002711 RID: 10001
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002712 RID: 10002
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002713 RID: 10003
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

				// Token: 0x06002714 RID: 10004
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

				// Token: 0x06002715 RID: 10005
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

				// Token: 0x06002716 RID: 10006
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

				// Token: 0x06002717 RID: 10007
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

				// Token: 0x06002718 RID: 10008
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

				// Token: 0x06002719 RID: 10009
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

				// Token: 0x0600271A RID: 10010
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x0600271B RID: 10011
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x0600271C RID: 10012
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				// Token: 0x0600271D RID: 10013
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				// Token: 0x0600271E RID: 10014
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

				// Token: 0x0600271F RID: 10015
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				// Token: 0x06002720 RID: 10016
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x06002721 RID: 10017
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				// Token: 0x06002722 RID: 10018
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				// Token: 0x06002723 RID: 10019
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				// Token: 0x06002724 RID: 10020
				[DllImport("libsteam_api.dylib")]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				// Token: 0x06002725 RID: 10021
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				// Token: 0x06002726 RID: 10022
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				// Token: 0x06002727 RID: 10023
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x06002728 RID: 10024
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				// Token: 0x06002729 RID: 10025
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x0600272A RID: 10026
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t.PackSmall pTags);

				// Token: 0x0600272B RID: 10027
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				// Token: 0x0600272C RID: 10028
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				// Token: 0x0600272D RID: 10029
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				// Token: 0x0600272E RID: 10030
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				// Token: 0x0600272F RID: 10031
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				// Token: 0x06002730 RID: 10032
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				// Token: 0x06002731 RID: 10033
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				// Token: 0x06002732 RID: 10034
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				// Token: 0x06002733 RID: 10035
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002734 RID: 10036
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				// Token: 0x06002735 RID: 10037
				[DllImport("libsteam_api.dylib")]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				// Token: 0x06002736 RID: 10038
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x06002737 RID: 10039
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002738 RID: 10040
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x06002739 RID: 10041
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x0600273A RID: 10042
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600273B RID: 10043
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600273C RID: 10044
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				// Token: 0x0600273D RID: 10045
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x0600273E RID: 10046
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600273F RID: 10047
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				// Token: 0x06002740 RID: 10048
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x06002741 RID: 10049
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

				// Token: 0x06002742 RID: 10050
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				// Token: 0x06002743 RID: 10051
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, [MarshalAs(UnmanagedType.U1)] bool bSuspend);

				// Token: 0x06002744 RID: 10052
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002745 RID: 10053
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002746 RID: 10054
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				// Token: 0x06002747 RID: 10055
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x06002748 RID: 10056
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x06002749 RID: 10057
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x0600274A RID: 10058
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x0600274B RID: 10059
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600274C RID: 10060
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x0600274D RID: 10061
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				// Token: 0x0600274E RID: 10062
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				// Token: 0x0600274F RID: 10063
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				// Token: 0x06002750 RID: 10064
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				// Token: 0x06002751 RID: 10065
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				// Token: 0x06002752 RID: 10066
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				// Token: 0x06002753 RID: 10067
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				// Token: 0x06002754 RID: 10068
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				// Token: 0x06002755 RID: 10069
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				// Token: 0x06002756 RID: 10070
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002757 RID: 10071
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				// Token: 0x06002758 RID: 10072
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				// Token: 0x06002759 RID: 10073
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600275A RID: 10074
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600275B RID: 10075
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600275C RID: 10076
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600275D RID: 10077
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				// Token: 0x0600275E RID: 10078
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				// Token: 0x0600275F RID: 10079
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002760 RID: 10080
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002761 RID: 10081
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002762 RID: 10082
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x06002763 RID: 10083
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				// Token: 0x06002764 RID: 10084
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002765 RID: 10085
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002766 RID: 10086
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002767 RID: 10087
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x06002768 RID: 10088
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x06002769 RID: 10089
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

				// Token: 0x0600276A RID: 10090
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600276B RID: 10091
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600276C RID: 10092
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600276D RID: 10093
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

				// Token: 0x0600276E RID: 10094
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x0600276F RID: 10095
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x06002770 RID: 10096
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

				// Token: 0x06002771 RID: 10097
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				// Token: 0x06002772 RID: 10098
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

				// Token: 0x06002773 RID: 10099
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				// Token: 0x06002774 RID: 10100
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

				// Token: 0x06002775 RID: 10101
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

				// Token: 0x06002776 RID: 10102
				[DllImport("libsteam_api.dylib")]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002777 RID: 10103
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				// Token: 0x06002778 RID: 10104
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x06002779 RID: 10105
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x0600277A RID: 10106
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				// Token: 0x0600277B RID: 10107
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x0600277C RID: 10108
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x0600277D RID: 10109
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				// Token: 0x0600277E RID: 10110
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				// Token: 0x0600277F RID: 10111
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

				// Token: 0x06002780 RID: 10112
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002781 RID: 10113
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002782 RID: 10114
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				// Token: 0x06002783 RID: 10115
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				// Token: 0x06002784 RID: 10116
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				// Token: 0x06002785 RID: 10117
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				// Token: 0x06002786 RID: 10118
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				// Token: 0x06002787 RID: 10119
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				// Token: 0x06002788 RID: 10120
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				// Token: 0x06002789 RID: 10121
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				// Token: 0x0600278A RID: 10122
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				// Token: 0x0600278B RID: 10123
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x0600278C RID: 10124
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x0600278D RID: 10125
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				// Token: 0x0600278E RID: 10126
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x0600278F RID: 10127
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002790 RID: 10128
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				// Token: 0x06002791 RID: 10129
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				// Token: 0x06002792 RID: 10130
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				// Token: 0x06002793 RID: 10131
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				// Token: 0x06002794 RID: 10132
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				// Token: 0x06002795 RID: 10133
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				// Token: 0x06002796 RID: 10134
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				// Token: 0x06002797 RID: 10135
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002798 RID: 10136
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				// Token: 0x06002799 RID: 10137
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				// Token: 0x0600279A RID: 10138
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				// Token: 0x0600279B RID: 10139
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x0600279C RID: 10140
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				// Token: 0x0600279D RID: 10141
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x0600279E RID: 10142
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				// Token: 0x0600279F RID: 10143
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				// Token: 0x060027A0 RID: 10144
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				// Token: 0x060027A1 RID: 10145
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x060027A2 RID: 10146
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x060027A3 RID: 10147
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x060027A4 RID: 10148
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x060027A5 RID: 10149
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				// Token: 0x060027A6 RID: 10150
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				// Token: 0x060027A7 RID: 10151
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				// Token: 0x060027A8 RID: 10152
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				// Token: 0x060027A9 RID: 10153
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bDedicated);

				// Token: 0x060027AA RID: 10154
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				// Token: 0x060027AB RID: 10155
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				// Token: 0x060027AC RID: 10156
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				// Token: 0x060027AD RID: 10157
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				// Token: 0x060027AE RID: 10158
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				// Token: 0x060027AF RID: 10159
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				// Token: 0x060027B0 RID: 10160
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				// Token: 0x060027B1 RID: 10161
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				// Token: 0x060027B2 RID: 10162
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				// Token: 0x060027B3 RID: 10163
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				// Token: 0x060027B4 RID: 10164
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				// Token: 0x060027B5 RID: 10165
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

				// Token: 0x060027B6 RID: 10166
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				// Token: 0x060027B7 RID: 10167
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				// Token: 0x060027B8 RID: 10168
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				// Token: 0x060027B9 RID: 10169
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				// Token: 0x060027BA RID: 10170
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				// Token: 0x060027BB RID: 10171
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				// Token: 0x060027BC RID: 10172
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				// Token: 0x060027BD RID: 10173
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				// Token: 0x060027BE RID: 10174
				[DllImport("libsteam_api.dylib")]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				// Token: 0x060027BF RID: 10175
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				// Token: 0x060027C0 RID: 10176
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				// Token: 0x060027C1 RID: 10177
				[DllImport("libsteam_api.dylib")]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x060027C2 RID: 10178
				[DllImport("libsteam_api.dylib")]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x060027C3 RID: 10179
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				// Token: 0x060027C4 RID: 10180
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				// Token: 0x060027C5 RID: 10181
				[DllImport("libsteam_api.dylib")]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				// Token: 0x060027C6 RID: 10182
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				// Token: 0x060027C7 RID: 10183
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				// Token: 0x060027C8 RID: 10184
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				// Token: 0x060027C9 RID: 10185
				[DllImport("libsteam_api.dylib")]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				// Token: 0x060027CA RID: 10186
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				// Token: 0x060027CB RID: 10187
				[DllImport("libsteam_api.dylib")]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				// Token: 0x060027CC RID: 10188
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bActive);

				// Token: 0x060027CD RID: 10189
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				// Token: 0x060027CE RID: 10190
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				// Token: 0x060027CF RID: 10191
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				// Token: 0x060027D0 RID: 10192
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				// Token: 0x060027D1 RID: 10193
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x060027D2 RID: 10194
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x060027D3 RID: 10195
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x060027D4 RID: 10196
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x060027D5 RID: 10197
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				// Token: 0x060027D6 RID: 10198
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				// Token: 0x060027D7 RID: 10199
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x060027D8 RID: 10200
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x060027D9 RID: 10201
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x060027DA RID: 10202
				[DllImport("libsteam_api.dylib")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x060027DB RID: 10203
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_Init();

				// Token: 0x060027DC RID: 10204
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_RunCallbacks();

				// Token: 0x060027DD RID: 10205
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamGameServer_RunCallbacks();

				// Token: 0x060027DE RID: 10206
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				// Token: 0x060027DF RID: 10207
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				// Token: 0x060027E0 RID: 10208
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x060027E1 RID: 10209
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x060027E2 RID: 10210
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

				// Token: 0x060027E3 RID: 10211
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamAPI_Shutdown();

				// Token: 0x060027E4 RID: 10212
				[DllImport("libsteam_api.dylib")]
				internal static extern void SteamGameServer_Shutdown();

				// Token: 0x060027E5 RID: 10213
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				// Token: 0x060027E6 RID: 10214
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				// Token: 0x060027E7 RID: 10215
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				// Token: 0x060027E8 RID: 10216
				[DllImport("libsteam_api.dylib")]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				// Token: 0x060027E9 RID: 10217
				[DllImport("libsteam_api.dylib")]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				// Token: 0x060027EA RID: 10218
				[DllImport("libsteam_api.dylib")]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
			}
		}

		// Token: 0x02000191 RID: 401
		internal class Win32 : Platform.Interface, IDisposable
		{
			// Token: 0x170000B6 RID: 182
			// (get) Token: 0x06001746 RID: 5958 RVA: 0x000521BF File Offset: 0x000503BF
			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			// Token: 0x06001747 RID: 5959 RVA: 0x000521D1 File Offset: 0x000503D1
			internal Win32(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			// Token: 0x06001748 RID: 5960 RVA: 0x000521E0 File Offset: 0x000503E0
			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			// Token: 0x06001749 RID: 5961 RVA: 0x000521ED File Offset: 0x000503ED
			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			// Token: 0x0600174A RID: 5962 RVA: 0x00052217 File Offset: 0x00050417
			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			// Token: 0x0600174B RID: 5963 RVA: 0x00052242 File Offset: 0x00050442
			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			// Token: 0x0600174C RID: 5964 RVA: 0x0005226D File Offset: 0x0005046D
			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			// Token: 0x0600174D RID: 5965 RVA: 0x00052299 File Offset: 0x00050499
			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			// Token: 0x0600174E RID: 5966 RVA: 0x000522C5 File Offset: 0x000504C5
			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600174F RID: 5967 RVA: 0x000522F2 File Offset: 0x000504F2
			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001750 RID: 5968 RVA: 0x0005231F File Offset: 0x0005051F
			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			// Token: 0x06001751 RID: 5969 RVA: 0x0005234B File Offset: 0x0005054B
			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001752 RID: 5970 RVA: 0x00052378 File Offset: 0x00050578
			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			// Token: 0x06001753 RID: 5971 RVA: 0x000523A4 File Offset: 0x000505A4
			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001754 RID: 5972 RVA: 0x000523D1 File Offset: 0x000505D1
			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001755 RID: 5973 RVA: 0x000523FE File Offset: 0x000505FE
			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001756 RID: 5974 RVA: 0x0005242B File Offset: 0x0005062B
			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001757 RID: 5975 RVA: 0x00052458 File Offset: 0x00050658
			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001758 RID: 5976 RVA: 0x00052485 File Offset: 0x00050685
			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001759 RID: 5977 RVA: 0x000524B2 File Offset: 0x000506B2
			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600175A RID: 5978 RVA: 0x000524DF File Offset: 0x000506DF
			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600175B RID: 5979 RVA: 0x0005250C File Offset: 0x0005070C
			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x0600175C RID: 5980 RVA: 0x00052539 File Offset: 0x00050739
			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			// Token: 0x0600175D RID: 5981 RVA: 0x00052563 File Offset: 0x00050763
			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x0600175E RID: 5982 RVA: 0x0005258E File Offset: 0x0005078E
			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			// Token: 0x0600175F RID: 5983 RVA: 0x000525B8 File Offset: 0x000507B8
			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001760 RID: 5984 RVA: 0x000525E5 File Offset: 0x000507E5
			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001761 RID: 5985 RVA: 0x00052612 File Offset: 0x00050812
			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001762 RID: 5986 RVA: 0x0005263F File Offset: 0x0005083F
			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001763 RID: 5987 RVA: 0x0005266C File Offset: 0x0005086C
			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001764 RID: 5988 RVA: 0x00052699 File Offset: 0x00050899
			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001765 RID: 5989 RVA: 0x000526C6 File Offset: 0x000508C6
			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001766 RID: 5990 RVA: 0x000526F3 File Offset: 0x000508F3
			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001767 RID: 5991 RVA: 0x00052720 File Offset: 0x00050920
			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001768 RID: 5992 RVA: 0x0005274D File Offset: 0x0005094D
			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001769 RID: 5993 RVA: 0x0005277A File Offset: 0x0005097A
			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			// Token: 0x0600176A RID: 5994 RVA: 0x000527A4 File Offset: 0x000509A4
			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			// Token: 0x0600176B RID: 5995 RVA: 0x000527CE File Offset: 0x000509CE
			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			// Token: 0x0600176C RID: 5996 RVA: 0x000527F8 File Offset: 0x000509F8
			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			// Token: 0x0600176D RID: 5997 RVA: 0x0005282B File Offset: 0x00050A2B
			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			// Token: 0x0600176E RID: 5998 RVA: 0x00052857 File Offset: 0x00050A57
			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			// Token: 0x0600176F RID: 5999 RVA: 0x00052884 File Offset: 0x00050A84
			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			// Token: 0x06001770 RID: 6000 RVA: 0x000528B0 File Offset: 0x00050AB0
			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			// Token: 0x06001771 RID: 6001 RVA: 0x000528DA File Offset: 0x00050ADA
			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			// Token: 0x06001772 RID: 6002 RVA: 0x00052904 File Offset: 0x00050B04
			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x06001773 RID: 6003 RVA: 0x00052934 File Offset: 0x00050B34
			public virtual VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x06001774 RID: 6004 RVA: 0x00052978 File Offset: 0x00050B78
			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			// Token: 0x06001775 RID: 6005 RVA: 0x000529AB File Offset: 0x00050BAB
			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			// Token: 0x06001776 RID: 6006 RVA: 0x000529D5 File Offset: 0x00050BD5
			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x06001777 RID: 6007 RVA: 0x00052A02 File Offset: 0x00050C02
			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x06001778 RID: 6008 RVA: 0x00052A2F File Offset: 0x00050C2F
			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x06001779 RID: 6009 RVA: 0x00052A5A File Offset: 0x00050C5A
			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x0600177A RID: 6010 RVA: 0x00052A85 File Offset: 0x00050C85
			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x0600177B RID: 6011 RVA: 0x00052AB1 File Offset: 0x00050CB1
			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			// Token: 0x0600177C RID: 6012 RVA: 0x00052ADB File Offset: 0x00050CDB
			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			// Token: 0x0600177D RID: 6013 RVA: 0x00052B08 File Offset: 0x00050D08
			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			// Token: 0x0600177E RID: 6014 RVA: 0x00052B34 File Offset: 0x00050D34
			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x0600177F RID: 6015 RVA: 0x00052B61 File Offset: 0x00050D61
			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			// Token: 0x06001780 RID: 6016 RVA: 0x00052B8D File Offset: 0x00050D8D
			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			// Token: 0x06001781 RID: 6017 RVA: 0x00052BB7 File Offset: 0x00050DB7
			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			// Token: 0x06001782 RID: 6018 RVA: 0x00052BE2 File Offset: 0x00050DE2
			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			// Token: 0x06001783 RID: 6019 RVA: 0x00052C0C File Offset: 0x00050E0C
			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			// Token: 0x06001784 RID: 6020 RVA: 0x00052C36 File Offset: 0x00050E36
			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			// Token: 0x06001785 RID: 6021 RVA: 0x00052C60 File Offset: 0x00050E60
			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			// Token: 0x06001786 RID: 6022 RVA: 0x00052C8A File Offset: 0x00050E8A
			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			// Token: 0x06001787 RID: 6023 RVA: 0x00052CB4 File Offset: 0x00050EB4
			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			// Token: 0x06001788 RID: 6024 RVA: 0x00052CDF File Offset: 0x00050EDF
			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			// Token: 0x06001789 RID: 6025 RVA: 0x00052D09 File Offset: 0x00050F09
			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			// Token: 0x0600178A RID: 6026 RVA: 0x00052D34 File Offset: 0x00050F34
			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			// Token: 0x0600178B RID: 6027 RVA: 0x00052D60 File Offset: 0x00050F60
			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			// Token: 0x0600178C RID: 6028 RVA: 0x00052D8B File Offset: 0x00050F8B
			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			// Token: 0x0600178D RID: 6029 RVA: 0x00052DB6 File Offset: 0x00050FB6
			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			// Token: 0x0600178E RID: 6030 RVA: 0x00052DE1 File Offset: 0x00050FE1
			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo);
			}

			// Token: 0x0600178F RID: 6031 RVA: 0x00052E0D File Offset: 0x0005100D
			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			// Token: 0x06001790 RID: 6032 RVA: 0x00052E39 File Offset: 0x00051039
			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			// Token: 0x06001791 RID: 6033 RVA: 0x00052E64 File Offset: 0x00051064
			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			// Token: 0x06001792 RID: 6034 RVA: 0x00052E8F File Offset: 0x0005108F
			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			// Token: 0x06001793 RID: 6035 RVA: 0x00052EB9 File Offset: 0x000510B9
			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			// Token: 0x06001794 RID: 6036 RVA: 0x00052EE4 File Offset: 0x000510E4
			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			// Token: 0x06001795 RID: 6037 RVA: 0x00052F0F File Offset: 0x0005110F
			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			// Token: 0x06001796 RID: 6038 RVA: 0x00052F3A File Offset: 0x0005113A
			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			// Token: 0x06001797 RID: 6039 RVA: 0x00052F67 File Offset: 0x00051167
			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			// Token: 0x06001798 RID: 6040 RVA: 0x00052F93 File Offset: 0x00051193
			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			// Token: 0x06001799 RID: 6041 RVA: 0x00052FBD File Offset: 0x000511BD
			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			// Token: 0x0600179A RID: 6042 RVA: 0x00052FE8 File Offset: 0x000511E8
			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			// Token: 0x0600179B RID: 6043 RVA: 0x00053013 File Offset: 0x00051213
			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			// Token: 0x0600179C RID: 6044 RVA: 0x0005303E File Offset: 0x0005123E
			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			// Token: 0x0600179D RID: 6045 RVA: 0x0005306D File Offset: 0x0005126D
			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			// Token: 0x0600179E RID: 6046 RVA: 0x00053099 File Offset: 0x00051299
			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			// Token: 0x0600179F RID: 6047 RVA: 0x000530C4 File Offset: 0x000512C4
			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			// Token: 0x060017A0 RID: 6048 RVA: 0x000530F0 File Offset: 0x000512F0
			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			// Token: 0x060017A1 RID: 6049 RVA: 0x0005311C File Offset: 0x0005131C
			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			// Token: 0x060017A2 RID: 6050 RVA: 0x00053148 File Offset: 0x00051348
			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			// Token: 0x060017A3 RID: 6051 RVA: 0x00053173 File Offset: 0x00051373
			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			// Token: 0x060017A4 RID: 6052 RVA: 0x0005319F File Offset: 0x0005139F
			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			// Token: 0x060017A5 RID: 6053 RVA: 0x000531CA File Offset: 0x000513CA
			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			// Token: 0x060017A6 RID: 6054 RVA: 0x000531F6 File Offset: 0x000513F6
			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			// Token: 0x060017A7 RID: 6055 RVA: 0x00053221 File Offset: 0x00051421
			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			// Token: 0x060017A8 RID: 6056 RVA: 0x0005324C File Offset: 0x0005144C
			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x060017A9 RID: 6057 RVA: 0x00053277 File Offset: 0x00051477
			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x060017AA RID: 6058 RVA: 0x000532A2 File Offset: 0x000514A2
			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x060017AB RID: 6059 RVA: 0x000532CD File Offset: 0x000514CD
			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			// Token: 0x060017AC RID: 6060 RVA: 0x000532F9 File Offset: 0x000514F9
			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			// Token: 0x060017AD RID: 6061 RVA: 0x00053324 File Offset: 0x00051524
			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			// Token: 0x060017AE RID: 6062 RVA: 0x0005334F File Offset: 0x0005154F
			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			// Token: 0x060017AF RID: 6063 RVA: 0x0005337A File Offset: 0x0005157A
			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			// Token: 0x060017B0 RID: 6064 RVA: 0x000533A6 File Offset: 0x000515A6
			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			// Token: 0x060017B1 RID: 6065 RVA: 0x000533D0 File Offset: 0x000515D0
			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			// Token: 0x060017B2 RID: 6066 RVA: 0x000533FC File Offset: 0x000515FC
			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			// Token: 0x060017B3 RID: 6067 RVA: 0x00053426 File Offset: 0x00051626
			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			// Token: 0x060017B4 RID: 6068 RVA: 0x00053452 File Offset: 0x00051652
			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			// Token: 0x060017B5 RID: 6069 RVA: 0x0005347D File Offset: 0x0005167D
			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			// Token: 0x060017B6 RID: 6070 RVA: 0x000534A9 File Offset: 0x000516A9
			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			// Token: 0x060017B7 RID: 6071 RVA: 0x000534D4 File Offset: 0x000516D4
			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			// Token: 0x060017B8 RID: 6072 RVA: 0x00053500 File Offset: 0x00051700
			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			// Token: 0x060017B9 RID: 6073 RVA: 0x0005352A File Offset: 0x0005172A
			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			// Token: 0x060017BA RID: 6074 RVA: 0x00053555 File Offset: 0x00051755
			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			// Token: 0x060017BB RID: 6075 RVA: 0x00053580 File Offset: 0x00051780
			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			// Token: 0x060017BC RID: 6076 RVA: 0x000535AB File Offset: 0x000517AB
			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x060017BD RID: 6077 RVA: 0x000535D6 File Offset: 0x000517D6
			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x060017BE RID: 6078 RVA: 0x00053601 File Offset: 0x00051801
			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			// Token: 0x060017BF RID: 6079 RVA: 0x0005362C File Offset: 0x0005182C
			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			// Token: 0x060017C0 RID: 6080 RVA: 0x00053658 File Offset: 0x00051858
			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			// Token: 0x060017C1 RID: 6081 RVA: 0x00053684 File Offset: 0x00051884
			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			// Token: 0x060017C2 RID: 6082 RVA: 0x000536B7 File Offset: 0x000518B7
			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			// Token: 0x060017C3 RID: 6083 RVA: 0x000536E3 File Offset: 0x000518E3
			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x060017C4 RID: 6084 RVA: 0x0005370E File Offset: 0x0005190E
			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x060017C5 RID: 6085 RVA: 0x00053739 File Offset: 0x00051939
			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x060017C6 RID: 6086 RVA: 0x00053764 File Offset: 0x00051964
			public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			// Token: 0x060017C7 RID: 6087 RVA: 0x0005378F File Offset: 0x0005198F
			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			// Token: 0x060017C8 RID: 6088 RVA: 0x000537BB File Offset: 0x000519BB
			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x060017C9 RID: 6089 RVA: 0x000537EC File Offset: 0x000519EC
			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			// Token: 0x060017CA RID: 6090 RVA: 0x00053817 File Offset: 0x00051A17
			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			// Token: 0x060017CB RID: 6091 RVA: 0x00053842 File Offset: 0x00051A42
			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			// Token: 0x060017CC RID: 6092 RVA: 0x0005386D File Offset: 0x00051A6D
			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			// Token: 0x060017CD RID: 6093 RVA: 0x00053898 File Offset: 0x00051A98
			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			// Token: 0x060017CE RID: 6094 RVA: 0x000538C3 File Offset: 0x00051AC3
			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			// Token: 0x060017CF RID: 6095 RVA: 0x000538ED File Offset: 0x00051AED
			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			// Token: 0x060017D0 RID: 6096 RVA: 0x00053917 File Offset: 0x00051B17
			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			// Token: 0x060017D1 RID: 6097 RVA: 0x00053941 File Offset: 0x00051B41
			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			// Token: 0x060017D2 RID: 6098 RVA: 0x0005396B File Offset: 0x00051B6B
			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			// Token: 0x060017D3 RID: 6099 RVA: 0x00053995 File Offset: 0x00051B95
			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			// Token: 0x060017D4 RID: 6100 RVA: 0x000539C2 File Offset: 0x00051BC2
			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			// Token: 0x060017D5 RID: 6101 RVA: 0x000539EF File Offset: 0x00051BEF
			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			// Token: 0x060017D6 RID: 6102 RVA: 0x00053A1B File Offset: 0x00051C1B
			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			// Token: 0x060017D7 RID: 6103 RVA: 0x00053A45 File Offset: 0x00051C45
			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			// Token: 0x060017D8 RID: 6104 RVA: 0x00053A6F File Offset: 0x00051C6F
			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			// Token: 0x060017D9 RID: 6105 RVA: 0x00053A9A File Offset: 0x00051C9A
			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			// Token: 0x060017DA RID: 6106 RVA: 0x00053AC6 File Offset: 0x00051CC6
			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			// Token: 0x060017DB RID: 6107 RVA: 0x00053AF1 File Offset: 0x00051CF1
			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			// Token: 0x060017DC RID: 6108 RVA: 0x00053B22 File Offset: 0x00051D22
			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			// Token: 0x060017DD RID: 6109 RVA: 0x00053B4C File Offset: 0x00051D4C
			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x060017DE RID: 6110 RVA: 0x00053B77 File Offset: 0x00051D77
			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			// Token: 0x060017DF RID: 6111 RVA: 0x00053BA1 File Offset: 0x00051DA1
			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			// Token: 0x060017E0 RID: 6112 RVA: 0x00053BCB File Offset: 0x00051DCB
			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			// Token: 0x060017E1 RID: 6113 RVA: 0x00053BF6 File Offset: 0x00051DF6
			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			// Token: 0x060017E2 RID: 6114 RVA: 0x00053C27 File Offset: 0x00051E27
			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			// Token: 0x060017E3 RID: 6115 RVA: 0x00053C51 File Offset: 0x00051E51
			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			// Token: 0x060017E4 RID: 6116 RVA: 0x00053C7D File Offset: 0x00051E7D
			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			// Token: 0x060017E5 RID: 6117 RVA: 0x00053CA7 File Offset: 0x00051EA7
			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			// Token: 0x060017E6 RID: 6118 RVA: 0x00053CD1 File Offset: 0x00051ED1
			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			// Token: 0x060017E7 RID: 6119 RVA: 0x00053CFD File Offset: 0x00051EFD
			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			// Token: 0x060017E8 RID: 6120 RVA: 0x00053D27 File Offset: 0x00051F27
			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			// Token: 0x060017E9 RID: 6121 RVA: 0x00053D51 File Offset: 0x00051F51
			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			// Token: 0x060017EA RID: 6122 RVA: 0x00053D7B File Offset: 0x00051F7B
			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			// Token: 0x060017EB RID: 6123 RVA: 0x00053DA6 File Offset: 0x00051FA6
			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			// Token: 0x060017EC RID: 6124 RVA: 0x00053DD0 File Offset: 0x00051FD0
			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			// Token: 0x060017ED RID: 6125 RVA: 0x00053E05 File Offset: 0x00052005
			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			// Token: 0x060017EE RID: 6126 RVA: 0x00053E38 File Offset: 0x00052038
			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			// Token: 0x060017EF RID: 6127 RVA: 0x00053E69 File Offset: 0x00052069
			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			// Token: 0x060017F0 RID: 6128 RVA: 0x00053E93 File Offset: 0x00052093
			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			// Token: 0x060017F1 RID: 6129 RVA: 0x00053EC0 File Offset: 0x000520C0
			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			// Token: 0x060017F2 RID: 6130 RVA: 0x00053EED File Offset: 0x000520ED
			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			// Token: 0x060017F3 RID: 6131 RVA: 0x00053F19 File Offset: 0x00052119
			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			// Token: 0x060017F4 RID: 6132 RVA: 0x00053F44 File Offset: 0x00052144
			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			// Token: 0x060017F5 RID: 6133 RVA: 0x00053F6F File Offset: 0x0005216F
			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			// Token: 0x060017F6 RID: 6134 RVA: 0x00053F9A File Offset: 0x0005219A
			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			// Token: 0x060017F7 RID: 6135 RVA: 0x00053FC5 File Offset: 0x000521C5
			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			// Token: 0x060017F8 RID: 6136 RVA: 0x00053FF0 File Offset: 0x000521F0
			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			// Token: 0x060017F9 RID: 6137 RVA: 0x0005401C File Offset: 0x0005221C
			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x060017FA RID: 6138 RVA: 0x00054047 File Offset: 0x00052247
			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x060017FB RID: 6139 RVA: 0x00054072 File Offset: 0x00052272
			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			// Token: 0x060017FC RID: 6140 RVA: 0x0005409E File Offset: 0x0005229E
			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			// Token: 0x060017FD RID: 6141 RVA: 0x000540C9 File Offset: 0x000522C9
			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			// Token: 0x060017FE RID: 6142 RVA: 0x000540F5 File Offset: 0x000522F5
			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x060017FF RID: 6143 RVA: 0x00054121 File Offset: 0x00052321
			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001800 RID: 6144 RVA: 0x0005414E File Offset: 0x0005234E
			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			// Token: 0x06001801 RID: 6145 RVA: 0x00054179 File Offset: 0x00052379
			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			// Token: 0x06001802 RID: 6146 RVA: 0x000541AC File Offset: 0x000523AC
			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06001803 RID: 6147 RVA: 0x000541D8 File Offset: 0x000523D8
			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			// Token: 0x06001804 RID: 6148 RVA: 0x00054205 File Offset: 0x00052405
			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001805 RID: 6149 RVA: 0x00054232 File Offset: 0x00052432
			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			// Token: 0x06001806 RID: 6150 RVA: 0x0005425F File Offset: 0x0005245F
			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001807 RID: 6151 RVA: 0x00054292 File Offset: 0x00052492
			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			// Token: 0x06001808 RID: 6152 RVA: 0x000542BD File Offset: 0x000524BD
			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			// Token: 0x06001809 RID: 6153 RVA: 0x000542EC File Offset: 0x000524EC
			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			// Token: 0x0600180A RID: 6154 RVA: 0x0005431B File Offset: 0x0005251B
			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			// Token: 0x0600180B RID: 6155 RVA: 0x00054347 File Offset: 0x00052547
			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			// Token: 0x0600180C RID: 6156 RVA: 0x00054372 File Offset: 0x00052572
			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			// Token: 0x0600180D RID: 6157 RVA: 0x0005439E File Offset: 0x0005259E
			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			// Token: 0x0600180E RID: 6158 RVA: 0x000543CA File Offset: 0x000525CA
			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			// Token: 0x0600180F RID: 6159 RVA: 0x000543F5 File Offset: 0x000525F5
			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			// Token: 0x06001810 RID: 6160 RVA: 0x00054421 File Offset: 0x00052621
			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			// Token: 0x06001811 RID: 6161 RVA: 0x0005444D File Offset: 0x0005264D
			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001812 RID: 6162 RVA: 0x0005447C File Offset: 0x0005267C
			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			// Token: 0x06001813 RID: 6163 RVA: 0x000544A8 File Offset: 0x000526A8
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001814 RID: 6164 RVA: 0x000544D7 File Offset: 0x000526D7
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001815 RID: 6165 RVA: 0x00054506 File Offset: 0x00052706
			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001816 RID: 6166 RVA: 0x00054535 File Offset: 0x00052735
			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001817 RID: 6167 RVA: 0x00054564 File Offset: 0x00052764
			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			// Token: 0x06001818 RID: 6168 RVA: 0x0005458F File Offset: 0x0005278F
			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			// Token: 0x06001819 RID: 6169 RVA: 0x000545BB File Offset: 0x000527BB
			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			// Token: 0x0600181A RID: 6170 RVA: 0x000545E6 File Offset: 0x000527E6
			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			// Token: 0x0600181B RID: 6171 RVA: 0x00054611 File Offset: 0x00052811
			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			// Token: 0x0600181C RID: 6172 RVA: 0x0005463C File Offset: 0x0005283C
			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			// Token: 0x0600181D RID: 6173 RVA: 0x00054667 File Offset: 0x00052867
			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			// Token: 0x0600181E RID: 6174 RVA: 0x00054693 File Offset: 0x00052893
			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x0600181F RID: 6175 RVA: 0x000546C0 File Offset: 0x000528C0
			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001820 RID: 6176 RVA: 0x000546ED File Offset: 0x000528ED
			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001821 RID: 6177 RVA: 0x0005471A File Offset: 0x0005291A
			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			// Token: 0x06001822 RID: 6178 RVA: 0x00054745 File Offset: 0x00052945
			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06001823 RID: 6179 RVA: 0x00054772 File Offset: 0x00052972
			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			// Token: 0x06001824 RID: 6180 RVA: 0x0005479F File Offset: 0x0005299F
			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06001825 RID: 6181 RVA: 0x000547CC File Offset: 0x000529CC
			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			// Token: 0x06001826 RID: 6182 RVA: 0x000547F9 File Offset: 0x000529F9
			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			// Token: 0x06001827 RID: 6183 RVA: 0x00054826 File Offset: 0x00052A26
			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			// Token: 0x06001828 RID: 6184 RVA: 0x00054851 File Offset: 0x00052A51
			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			// Token: 0x06001829 RID: 6185 RVA: 0x0005487C File Offset: 0x00052A7C
			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			// Token: 0x0600182A RID: 6186 RVA: 0x000548A7 File Offset: 0x00052AA7
			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			// Token: 0x0600182B RID: 6187 RVA: 0x000548D3 File Offset: 0x00052AD3
			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			// Token: 0x0600182C RID: 6188 RVA: 0x000548FE File Offset: 0x00052AFE
			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			// Token: 0x0600182D RID: 6189 RVA: 0x0005492B File Offset: 0x00052B2B
			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			// Token: 0x0600182E RID: 6190 RVA: 0x00054956 File Offset: 0x00052B56
			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			// Token: 0x0600182F RID: 6191 RVA: 0x00054981 File Offset: 0x00052B81
			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			// Token: 0x06001830 RID: 6192 RVA: 0x000549AC File Offset: 0x00052BAC
			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			// Token: 0x06001831 RID: 6193 RVA: 0x000549D7 File Offset: 0x00052BD7
			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			// Token: 0x06001832 RID: 6194 RVA: 0x00054A02 File Offset: 0x00052C02
			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			// Token: 0x06001833 RID: 6195 RVA: 0x00054A2D File Offset: 0x00052C2D
			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			// Token: 0x06001834 RID: 6196 RVA: 0x00054A58 File Offset: 0x00052C58
			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			// Token: 0x06001835 RID: 6197 RVA: 0x00054A82 File Offset: 0x00052C82
			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			// Token: 0x06001836 RID: 6198 RVA: 0x00054AAE File Offset: 0x00052CAE
			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			// Token: 0x06001837 RID: 6199 RVA: 0x00054ADA File Offset: 0x00052CDA
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			// Token: 0x06001838 RID: 6200 RVA: 0x00054B04 File Offset: 0x00052D04
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			// Token: 0x06001839 RID: 6201 RVA: 0x00054B2E File Offset: 0x00052D2E
			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			// Token: 0x0600183A RID: 6202 RVA: 0x00054B59 File Offset: 0x00052D59
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			// Token: 0x0600183B RID: 6203 RVA: 0x00054B85 File Offset: 0x00052D85
			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			// Token: 0x0600183C RID: 6204 RVA: 0x00054BB2 File Offset: 0x00052DB2
			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			// Token: 0x0600183D RID: 6205 RVA: 0x00054BE3 File Offset: 0x00052DE3
			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			// Token: 0x0600183E RID: 6206 RVA: 0x00054C14 File Offset: 0x00052E14
			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			// Token: 0x0600183F RID: 6207 RVA: 0x00054C3E File Offset: 0x00052E3E
			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			// Token: 0x06001840 RID: 6208 RVA: 0x00054C6C File Offset: 0x00052E6C
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
			}

			// Token: 0x06001841 RID: 6209 RVA: 0x00054CAE File Offset: 0x00052EAE
			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001842 RID: 6210 RVA: 0x00054CD9 File Offset: 0x00052ED9
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			// Token: 0x06001843 RID: 6211 RVA: 0x00054D05 File Offset: 0x00052F05
			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			// Token: 0x06001844 RID: 6212 RVA: 0x00054D31 File Offset: 0x00052F31
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			// Token: 0x06001845 RID: 6213 RVA: 0x00054D5D File Offset: 0x00052F5D
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			// Token: 0x06001846 RID: 6214 RVA: 0x00054D89 File Offset: 0x00052F89
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			// Token: 0x06001847 RID: 6215 RVA: 0x00054DB5 File Offset: 0x00052FB5
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags);
			}

			// Token: 0x06001848 RID: 6216 RVA: 0x00054DE1 File Offset: 0x00052FE1
			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			// Token: 0x06001849 RID: 6217 RVA: 0x00054E0C File Offset: 0x0005300C
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			// Token: 0x0600184A RID: 6218 RVA: 0x00054E38 File Offset: 0x00053038
			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600184B RID: 6219 RVA: 0x00054E63 File Offset: 0x00053063
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x0600184C RID: 6220 RVA: 0x00054E8E File Offset: 0x0005308E
			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600184D RID: 6221 RVA: 0x00054EB9 File Offset: 0x000530B9
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x0600184E RID: 6222 RVA: 0x00054EE4 File Offset: 0x000530E4
			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x0600184F RID: 6223 RVA: 0x00054F0F File Offset: 0x0005310F
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			// Token: 0x06001850 RID: 6224 RVA: 0x00054F3B File Offset: 0x0005313B
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001851 RID: 6225 RVA: 0x00054F66 File Offset: 0x00053166
			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			// Token: 0x06001852 RID: 6226 RVA: 0x00054F92 File Offset: 0x00053192
			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001853 RID: 6227 RVA: 0x00054FBD File Offset: 0x000531BD
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags, ref pExcludedTags);
			}

			// Token: 0x06001854 RID: 6228 RVA: 0x00054FEC File Offset: 0x000531EC
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
			}

			// Token: 0x06001855 RID: 6229 RVA: 0x00055030 File Offset: 0x00053230
			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			// Token: 0x06001856 RID: 6230 RVA: 0x0005505C File Offset: 0x0005325C
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			// Token: 0x06001857 RID: 6231 RVA: 0x00055088 File Offset: 0x00053288
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
			}

			// Token: 0x06001858 RID: 6232 RVA: 0x000550BB File Offset: 0x000532BB
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			// Token: 0x06001859 RID: 6233 RVA: 0x000550E8 File Offset: 0x000532E8
			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			// Token: 0x0600185A RID: 6234 RVA: 0x00055112 File Offset: 0x00053312
			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			// Token: 0x0600185B RID: 6235 RVA: 0x0005513E File Offset: 0x0005333E
			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			// Token: 0x0600185C RID: 6236 RVA: 0x0005516A File Offset: 0x0005336A
			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			// Token: 0x0600185D RID: 6237 RVA: 0x00055196 File Offset: 0x00053396
			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			// Token: 0x0600185E RID: 6238 RVA: 0x000551C2 File Offset: 0x000533C2
			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x0600185F RID: 6239 RVA: 0x000551EF File Offset: 0x000533EF
			public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			// Token: 0x06001860 RID: 6240 RVA: 0x0005521B File Offset: 0x0005341B
			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			// Token: 0x06001861 RID: 6241 RVA: 0x00055246 File Offset: 0x00053446
			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			// Token: 0x06001862 RID: 6242 RVA: 0x00055271 File Offset: 0x00053471
			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x06001863 RID: 6243 RVA: 0x0005529E File Offset: 0x0005349E
			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			// Token: 0x06001864 RID: 6244 RVA: 0x000552C8 File Offset: 0x000534C8
			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			// Token: 0x06001865 RID: 6245 RVA: 0x000552F3 File Offset: 0x000534F3
			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			// Token: 0x06001866 RID: 6246 RVA: 0x0005531F File Offset: 0x0005351F
			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			// Token: 0x06001867 RID: 6247 RVA: 0x0005534C File Offset: 0x0005354C
			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			// Token: 0x06001868 RID: 6248 RVA: 0x00055376 File Offset: 0x00053576
			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			// Token: 0x06001869 RID: 6249 RVA: 0x000553A1 File Offset: 0x000535A1
			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x0600186A RID: 6250 RVA: 0x000553CC File Offset: 0x000535CC
			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600186B RID: 6251 RVA: 0x000553F9 File Offset: 0x000535F9
			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x0600186C RID: 6252 RVA: 0x00055426 File Offset: 0x00053626
			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x0600186D RID: 6253 RVA: 0x00055453 File Offset: 0x00053653
			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x0600186E RID: 6254 RVA: 0x00055482 File Offset: 0x00053682
			public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			// Token: 0x0600186F RID: 6255 RVA: 0x000554AD File Offset: 0x000536AD
			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			// Token: 0x06001870 RID: 6256 RVA: 0x000554DA File Offset: 0x000536DA
			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			// Token: 0x06001871 RID: 6257 RVA: 0x00055505 File Offset: 0x00053705
			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001872 RID: 6258 RVA: 0x00055530 File Offset: 0x00053730
			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001873 RID: 6259 RVA: 0x0005555B File Offset: 0x0005375B
			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001874 RID: 6260 RVA: 0x00055586 File Offset: 0x00053786
			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001875 RID: 6261 RVA: 0x000555B1 File Offset: 0x000537B1
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			// Token: 0x06001876 RID: 6262 RVA: 0x000555E0 File Offset: 0x000537E0
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			// Token: 0x06001877 RID: 6263 RVA: 0x0005560D File Offset: 0x0005380D
			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
			}

			// Token: 0x06001878 RID: 6264 RVA: 0x0005563E File Offset: 0x0005383E
			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			// Token: 0x06001879 RID: 6265 RVA: 0x0005566F File Offset: 0x0005386F
			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			// Token: 0x0600187A RID: 6266 RVA: 0x0005569B File Offset: 0x0005389B
			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			// Token: 0x0600187B RID: 6267 RVA: 0x000556C5 File Offset: 0x000538C5
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			// Token: 0x0600187C RID: 6268 RVA: 0x000556EF File Offset: 0x000538EF
			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x0600187D RID: 6269 RVA: 0x0005571E File Offset: 0x0005391E
			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x0600187E RID: 6270 RVA: 0x0005574F File Offset: 0x0005394F
			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			// Token: 0x0600187F RID: 6271 RVA: 0x0005577B File Offset: 0x0005397B
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			// Token: 0x06001880 RID: 6272 RVA: 0x000557A6 File Offset: 0x000539A6
			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001881 RID: 6273 RVA: 0x000557D2 File Offset: 0x000539D2
			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001882 RID: 6274 RVA: 0x000557FE File Offset: 0x000539FE
			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001883 RID: 6275 RVA: 0x0005582B File Offset: 0x00053A2B
			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001884 RID: 6276 RVA: 0x00055858 File Offset: 0x00053A58
			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			// Token: 0x06001885 RID: 6277 RVA: 0x00055882 File Offset: 0x00053A82
			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			// Token: 0x06001886 RID: 6278 RVA: 0x000558AC File Offset: 0x00053AAC
			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			// Token: 0x06001887 RID: 6279 RVA: 0x000558D6 File Offset: 0x00053AD6
			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			// Token: 0x06001888 RID: 6280 RVA: 0x00055900 File Offset: 0x00053B00
			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			// Token: 0x06001889 RID: 6281 RVA: 0x0005592A File Offset: 0x00053B2A
			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			// Token: 0x0600188A RID: 6282 RVA: 0x00055954 File Offset: 0x00053B54
			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			// Token: 0x0600188B RID: 6283 RVA: 0x0005597F File Offset: 0x00053B7F
			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			// Token: 0x0600188C RID: 6284 RVA: 0x000559AA File Offset: 0x00053BAA
			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			// Token: 0x0600188D RID: 6285 RVA: 0x000559D5 File Offset: 0x00053BD5
			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			// Token: 0x0600188E RID: 6286 RVA: 0x000559FF File Offset: 0x00053BFF
			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			// Token: 0x0600188F RID: 6287 RVA: 0x00055A29 File Offset: 0x00053C29
			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			// Token: 0x06001890 RID: 6288 RVA: 0x00055A5A File Offset: 0x00053C5A
			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001891 RID: 6289 RVA: 0x00055A85 File Offset: 0x00053C85
			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001892 RID: 6290 RVA: 0x00055AB0 File Offset: 0x00053CB0
			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			// Token: 0x06001893 RID: 6291 RVA: 0x00055ADB File Offset: 0x00053CDB
			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			// Token: 0x06001894 RID: 6292 RVA: 0x00055B07 File Offset: 0x00053D07
			public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			// Token: 0x06001895 RID: 6293 RVA: 0x00055B32 File Offset: 0x00053D32
			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			// Token: 0x06001896 RID: 6294 RVA: 0x00055B5F File Offset: 0x00053D5F
			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			// Token: 0x06001897 RID: 6295 RVA: 0x00055B8C File Offset: 0x00053D8C
			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			// Token: 0x06001898 RID: 6296 RVA: 0x00055BB7 File Offset: 0x00053DB7
			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			// Token: 0x06001899 RID: 6297 RVA: 0x00055BE1 File Offset: 0x00053DE1
			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			// Token: 0x0600189A RID: 6298 RVA: 0x00055C0C File Offset: 0x00053E0C
			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x0600189B RID: 6299 RVA: 0x00055C39 File Offset: 0x00053E39
			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			// Token: 0x0600189C RID: 6300 RVA: 0x00055C63 File Offset: 0x00053E63
			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			// Token: 0x0600189D RID: 6301 RVA: 0x00055C8D File Offset: 0x00053E8D
			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			// Token: 0x0600189E RID: 6302 RVA: 0x00055CB8 File Offset: 0x00053EB8
			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			// Token: 0x0600189F RID: 6303 RVA: 0x00055CE9 File Offset: 0x00053EE9
			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			// Token: 0x060018A0 RID: 6304 RVA: 0x00055D15 File Offset: 0x00053F15
			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			// Token: 0x060018A1 RID: 6305 RVA: 0x00055D46 File Offset: 0x00053F46
			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x060018A2 RID: 6306 RVA: 0x00055D71 File Offset: 0x00053F71
			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x060018A3 RID: 6307 RVA: 0x00055D9C File Offset: 0x00053F9C
			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			// Token: 0x060018A4 RID: 6308 RVA: 0x00055DC8 File Offset: 0x00053FC8
			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState);
			}

			// Token: 0x060018A5 RID: 6309 RVA: 0x00055DF4 File Offset: 0x00053FF4
			public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			// Token: 0x060018A6 RID: 6310 RVA: 0x00055E1F File Offset: 0x0005401F
			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			// Token: 0x060018A7 RID: 6311 RVA: 0x00055E4E File Offset: 0x0005404E
			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			// Token: 0x060018A8 RID: 6312 RVA: 0x00055E7D File Offset: 0x0005407D
			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			// Token: 0x060018A9 RID: 6313 RVA: 0x00055EAA File Offset: 0x000540AA
			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x060018AA RID: 6314 RVA: 0x00055ED6 File Offset: 0x000540D6
			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x060018AB RID: 6315 RVA: 0x00055F02 File Offset: 0x00054102
			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			// Token: 0x060018AC RID: 6316 RVA: 0x00055F31 File Offset: 0x00054131
			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			// Token: 0x060018AD RID: 6317 RVA: 0x00055F5D File Offset: 0x0005415D
			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			// Token: 0x060018AE RID: 6318 RVA: 0x00055F8C File Offset: 0x0005418C
			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x060018AF RID: 6319 RVA: 0x00055FB9 File Offset: 0x000541B9
			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x060018B0 RID: 6320 RVA: 0x00055FEA File Offset: 0x000541EA
			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			// Token: 0x060018B1 RID: 6321 RVA: 0x0005601B File Offset: 0x0005421B
			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			// Token: 0x060018B2 RID: 6322 RVA: 0x00056048 File Offset: 0x00054248
			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			// Token: 0x060018B3 RID: 6323 RVA: 0x00056073 File Offset: 0x00054273
			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			// Token: 0x060018B4 RID: 6324 RVA: 0x0005609E File Offset: 0x0005429E
			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			// Token: 0x060018B5 RID: 6325 RVA: 0x000560CD File Offset: 0x000542CD
			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			// Token: 0x060018B6 RID: 6326 RVA: 0x000560FC File Offset: 0x000542FC
			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			// Token: 0x060018B7 RID: 6327 RVA: 0x00056126 File Offset: 0x00054326
			public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			// Token: 0x060018B8 RID: 6328 RVA: 0x00056151 File Offset: 0x00054351
			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			// Token: 0x060018B9 RID: 6329 RVA: 0x0005617D File Offset: 0x0005437D
			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			// Token: 0x060018BA RID: 6330 RVA: 0x000561A9 File Offset: 0x000543A9
			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			// Token: 0x060018BB RID: 6331 RVA: 0x000561D5 File Offset: 0x000543D5
			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			// Token: 0x060018BC RID: 6332 RVA: 0x000561FF File Offset: 0x000543FF
			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			// Token: 0x060018BD RID: 6333 RVA: 0x0005622C File Offset: 0x0005442C
			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			// Token: 0x060018BE RID: 6334 RVA: 0x00056256 File Offset: 0x00054456
			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			// Token: 0x060018BF RID: 6335 RVA: 0x00056280 File Offset: 0x00054480
			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			// Token: 0x060018C0 RID: 6336 RVA: 0x000562AA File Offset: 0x000544AA
			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			// Token: 0x060018C1 RID: 6337 RVA: 0x000562D4 File Offset: 0x000544D4
			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			// Token: 0x060018C2 RID: 6338 RVA: 0x000562FE File Offset: 0x000544FE
			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			// Token: 0x060018C3 RID: 6339 RVA: 0x00056328 File Offset: 0x00054528
			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			// Token: 0x060018C4 RID: 6340 RVA: 0x00056352 File Offset: 0x00054552
			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			// Token: 0x060018C5 RID: 6341 RVA: 0x0005637D File Offset: 0x0005457D
			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			// Token: 0x060018C6 RID: 6342 RVA: 0x000563A7 File Offset: 0x000545A7
			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			// Token: 0x060018C7 RID: 6343 RVA: 0x000563D2 File Offset: 0x000545D2
			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			// Token: 0x060018C8 RID: 6344 RVA: 0x000563FC File Offset: 0x000545FC
			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			// Token: 0x060018C9 RID: 6345 RVA: 0x00056426 File Offset: 0x00054626
			public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			// Token: 0x060018CA RID: 6346 RVA: 0x00056451 File Offset: 0x00054651
			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			// Token: 0x060018CB RID: 6347 RVA: 0x0005647C File Offset: 0x0005467C
			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x060018CC RID: 6348 RVA: 0x000564A8 File Offset: 0x000546A8
			public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			// Token: 0x060018CD RID: 6349 RVA: 0x000564D3 File Offset: 0x000546D3
			public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			// Token: 0x060018CE RID: 6350 RVA: 0x000564FE File Offset: 0x000546FE
			public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			// Token: 0x060018CF RID: 6351 RVA: 0x00056529 File Offset: 0x00054729
			public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			// Token: 0x060018D0 RID: 6352 RVA: 0x00056554 File Offset: 0x00054754
			public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			// Token: 0x060018D1 RID: 6353 RVA: 0x0005657F File Offset: 0x0005477F
			public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			// Token: 0x060018D2 RID: 6354 RVA: 0x000565AA File Offset: 0x000547AA
			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			// Token: 0x060018D3 RID: 6355 RVA: 0x000565D5 File Offset: 0x000547D5
			public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			// Token: 0x060018D4 RID: 6356 RVA: 0x00056600 File Offset: 0x00054800
			public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			// Token: 0x060018D5 RID: 6357 RVA: 0x0005662B File Offset: 0x0005482B
			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			// Token: 0x060018D6 RID: 6358 RVA: 0x00056656 File Offset: 0x00054856
			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			// Token: 0x060018D7 RID: 6359 RVA: 0x00056680 File Offset: 0x00054880
			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			// Token: 0x060018D8 RID: 6360 RVA: 0x000566AB File Offset: 0x000548AB
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			// Token: 0x060018D9 RID: 6361 RVA: 0x000566D6 File Offset: 0x000548D6
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			// Token: 0x060018DA RID: 6362 RVA: 0x00056701 File Offset: 0x00054901
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x060018DB RID: 6363 RVA: 0x0005672D File Offset: 0x0005492D
			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			// Token: 0x060018DC RID: 6364 RVA: 0x00056757 File Offset: 0x00054957
			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			// Token: 0x060018DD RID: 6365 RVA: 0x00056781 File Offset: 0x00054981
			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			// Token: 0x060018DE RID: 6366 RVA: 0x000567AB File Offset: 0x000549AB
			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x060018DF RID: 6367 RVA: 0x000567D8 File Offset: 0x000549D8
			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			// Token: 0x060018E0 RID: 6368 RVA: 0x00056803 File Offset: 0x00054A03
			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			// Token: 0x060018E1 RID: 6369 RVA: 0x0005682D File Offset: 0x00054A2D
			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			// Token: 0x060018E2 RID: 6370 RVA: 0x00056857 File Offset: 0x00054A57
			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			// Token: 0x060018E3 RID: 6371 RVA: 0x00056881 File Offset: 0x00054A81
			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x060018E4 RID: 6372 RVA: 0x000568AE File Offset: 0x00054AAE
			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			// Token: 0x060018E5 RID: 6373 RVA: 0x000568D9 File Offset: 0x00054AD9
			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			// Token: 0x060018E6 RID: 6374 RVA: 0x00056903 File Offset: 0x00054B03
			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			// Token: 0x060018E7 RID: 6375 RVA: 0x0005692F File Offset: 0x00054B2F
			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			// Token: 0x060018E8 RID: 6376 RVA: 0x0005695B File Offset: 0x00054B5B
			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			// Token: 0x060018E9 RID: 6377 RVA: 0x00056987 File Offset: 0x00054B87
			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			// Token: 0x060018EA RID: 6378 RVA: 0x000569B4 File Offset: 0x00054BB4
			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			// Token: 0x060018EB RID: 6379 RVA: 0x000569E1 File Offset: 0x00054BE1
			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x060018EC RID: 6380 RVA: 0x00056A0D File Offset: 0x00054C0D
			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x060018ED RID: 6381 RVA: 0x00056A39 File Offset: 0x00054C39
			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x060018EE RID: 6382 RVA: 0x00056A64 File Offset: 0x00054C64
			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x060018EF RID: 6383 RVA: 0x00056A8F File Offset: 0x00054C8F
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			// Token: 0x060018F0 RID: 6384 RVA: 0x00056ABC File Offset: 0x00054CBC
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			// Token: 0x060018F1 RID: 6385 RVA: 0x00056AEB File Offset: 0x00054CEB
			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			// Token: 0x060018F2 RID: 6386 RVA: 0x00056B17 File Offset: 0x00054D17
			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x060018F3 RID: 6387 RVA: 0x00056B44 File Offset: 0x00054D44
			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x060018F4 RID: 6388 RVA: 0x00056B73 File Offset: 0x00054D73
			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x060018F5 RID: 6389 RVA: 0x00056B9E File Offset: 0x00054D9E
			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			// Token: 0x060018F6 RID: 6390 RVA: 0x00056BCA File Offset: 0x00054DCA
			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			// Token: 0x060018F7 RID: 6391 RVA: 0x00056BF9 File Offset: 0x00054DF9
			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			// Token: 0x060018F8 RID: 6392 RVA: 0x00056C24 File Offset: 0x00054E24
			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			// Token: 0x060018F9 RID: 6393 RVA: 0x00056C4F File Offset: 0x00054E4F
			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			// Token: 0x060018FA RID: 6394 RVA: 0x00056C7E File Offset: 0x00054E7E
			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			// Token: 0x060018FB RID: 6395 RVA: 0x00056CAA File Offset: 0x00054EAA
			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			// Token: 0x060018FC RID: 6396 RVA: 0x00056CD6 File Offset: 0x00054ED6
			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			// Token: 0x060018FD RID: 6397 RVA: 0x00056D02 File Offset: 0x00054F02
			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			// Token: 0x060018FE RID: 6398 RVA: 0x00056D2E File Offset: 0x00054F2E
			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			// Token: 0x060018FF RID: 6399 RVA: 0x00056D5A File Offset: 0x00054F5A
			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			// Token: 0x06001900 RID: 6400 RVA: 0x00056D84 File Offset: 0x00054F84
			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			// Token: 0x06001901 RID: 6401 RVA: 0x00056DAE File Offset: 0x00054FAE
			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			// Token: 0x06001902 RID: 6402 RVA: 0x00056DD8 File Offset: 0x00054FD8
			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			// Token: 0x06001903 RID: 6403 RVA: 0x00056E03 File Offset: 0x00055003
			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			// Token: 0x06001904 RID: 6404 RVA: 0x00056E2E File Offset: 0x0005502E
			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			// Token: 0x06001905 RID: 6405 RVA: 0x00056E59 File Offset: 0x00055059
			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			// Token: 0x06001906 RID: 6406 RVA: 0x00056E85 File Offset: 0x00055085
			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			// Token: 0x06001907 RID: 6407 RVA: 0x00056EB0 File Offset: 0x000550B0
			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001908 RID: 6408 RVA: 0x00056EDC File Offset: 0x000550DC
			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001909 RID: 6409 RVA: 0x00056F08 File Offset: 0x00055108
			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			// Token: 0x0600190A RID: 6410 RVA: 0x00056F33 File Offset: 0x00055133
			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			// Token: 0x0600190B RID: 6411 RVA: 0x00056F5F File Offset: 0x0005515F
			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x0600190C RID: 6412 RVA: 0x00056F8A File Offset: 0x0005518A
			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			// Token: 0x0600190D RID: 6413 RVA: 0x00056FB6 File Offset: 0x000551B6
			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			// Token: 0x0600190E RID: 6414 RVA: 0x00056FE5 File Offset: 0x000551E5
			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x0600190F RID: 6415 RVA: 0x00057010 File Offset: 0x00055210
			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			// Token: 0x06001910 RID: 6416 RVA: 0x0005703C File Offset: 0x0005523C
			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			// Token: 0x06001911 RID: 6417 RVA: 0x0005706B File Offset: 0x0005526B
			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			// Token: 0x06001912 RID: 6418 RVA: 0x00057097 File Offset: 0x00055297
			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			// Token: 0x06001913 RID: 6419 RVA: 0x000570C4 File Offset: 0x000552C4
			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			// Token: 0x06001914 RID: 6420 RVA: 0x000570F7 File Offset: 0x000552F7
			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			// Token: 0x06001915 RID: 6421 RVA: 0x00057124 File Offset: 0x00055324
			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			// Token: 0x06001916 RID: 6422 RVA: 0x00057155 File Offset: 0x00055355
			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			// Token: 0x06001917 RID: 6423 RVA: 0x00057180 File Offset: 0x00055380
			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			// Token: 0x06001918 RID: 6424 RVA: 0x000571AB File Offset: 0x000553AB
			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			// Token: 0x06001919 RID: 6425 RVA: 0x000571D6 File Offset: 0x000553D6
			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x0600191A RID: 6426 RVA: 0x00057207 File Offset: 0x00055407
			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x0600191B RID: 6427 RVA: 0x00057238 File Offset: 0x00055438
			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x0600191C RID: 6428 RVA: 0x00057263 File Offset: 0x00055463
			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x0600191D RID: 6429 RVA: 0x0005728E File Offset: 0x0005548E
			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			// Token: 0x0600191E RID: 6430 RVA: 0x000572B9 File Offset: 0x000554B9
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x0600191F RID: 6431 RVA: 0x000572EE File Offset: 0x000554EE
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x06001920 RID: 6432 RVA: 0x0005731F File Offset: 0x0005551F
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001921 RID: 6433 RVA: 0x0005734B File Offset: 0x0005554B
			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x06001922 RID: 6434 RVA: 0x00057376 File Offset: 0x00055576
			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails);
			}

			// Token: 0x06001923 RID: 6435 RVA: 0x000573A3 File Offset: 0x000555A3
			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			// Token: 0x06001924 RID: 6436 RVA: 0x000573D2 File Offset: 0x000555D2
			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			// Token: 0x06001925 RID: 6437 RVA: 0x00057401 File Offset: 0x00055601
			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001926 RID: 6438 RVA: 0x00057430 File Offset: 0x00055630
			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			// Token: 0x06001927 RID: 6439 RVA: 0x0005745F File Offset: 0x0005565F
			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			// Token: 0x06001928 RID: 6440 RVA: 0x0005748C File Offset: 0x0005568C
			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			// Token: 0x06001929 RID: 6441 RVA: 0x000574CE File Offset: 0x000556CE
			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			// Token: 0x0600192A RID: 6442 RVA: 0x000574FA File Offset: 0x000556FA
			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			// Token: 0x0600192B RID: 6443 RVA: 0x0005752F File Offset: 0x0005572F
			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x0600192C RID: 6444 RVA: 0x0005755A File Offset: 0x0005575A
			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			// Token: 0x0600192D RID: 6445 RVA: 0x00057586 File Offset: 0x00055786
			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			// Token: 0x0600192E RID: 6446 RVA: 0x000575B2 File Offset: 0x000557B2
			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			// Token: 0x0600192F RID: 6447 RVA: 0x000575DE File Offset: 0x000557DE
			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			// Token: 0x06001930 RID: 6448 RVA: 0x0005760A File Offset: 0x0005580A
			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			// Token: 0x06001931 RID: 6449 RVA: 0x00057636 File Offset: 0x00055836
			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			// Token: 0x06001932 RID: 6450 RVA: 0x00057662 File Offset: 0x00055862
			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			// Token: 0x06001933 RID: 6451 RVA: 0x0005768E File Offset: 0x0005588E
			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			// Token: 0x06001934 RID: 6452 RVA: 0x000576BA File Offset: 0x000558BA
			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			// Token: 0x06001935 RID: 6453 RVA: 0x000576E6 File Offset: 0x000558E6
			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			// Token: 0x06001936 RID: 6454 RVA: 0x00057712 File Offset: 0x00055912
			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001937 RID: 6455 RVA: 0x0005773E File Offset: 0x0005593E
			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			// Token: 0x06001938 RID: 6456 RVA: 0x0005776A File Offset: 0x0005596A
			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			// Token: 0x06001939 RID: 6457 RVA: 0x00057796 File Offset: 0x00055996
			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			// Token: 0x0600193A RID: 6458 RVA: 0x000577C2 File Offset: 0x000559C2
			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			// Token: 0x0600193B RID: 6459 RVA: 0x000577EE File Offset: 0x000559EE
			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			// Token: 0x0600193C RID: 6460 RVA: 0x0005781A File Offset: 0x00055A1A
			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			// Token: 0x0600193D RID: 6461 RVA: 0x00057847 File Offset: 0x00055A47
			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			// Token: 0x0600193E RID: 6462 RVA: 0x00057873 File Offset: 0x00055A73
			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			// Token: 0x0600193F RID: 6463 RVA: 0x0005789F File Offset: 0x00055A9F
			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			// Token: 0x06001940 RID: 6464 RVA: 0x000578CB File Offset: 0x00055ACB
			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			// Token: 0x06001941 RID: 6465 RVA: 0x000578F7 File Offset: 0x00055AF7
			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			// Token: 0x06001942 RID: 6466 RVA: 0x00057923 File Offset: 0x00055B23
			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001943 RID: 6467 RVA: 0x0005794F File Offset: 0x00055B4F
			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			// Token: 0x06001944 RID: 6468 RVA: 0x0005797B File Offset: 0x00055B7B
			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			// Token: 0x06001945 RID: 6469 RVA: 0x000579A7 File Offset: 0x00055BA7
			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags);
			}

			// Token: 0x06001946 RID: 6470 RVA: 0x000579D3 File Offset: 0x00055BD3
			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			// Token: 0x06001947 RID: 6471 RVA: 0x000579FF File Offset: 0x00055BFF
			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			// Token: 0x06001948 RID: 6472 RVA: 0x00057A2B File Offset: 0x00055C2B
			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			// Token: 0x06001949 RID: 6473 RVA: 0x00057A57 File Offset: 0x00055C57
			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			// Token: 0x0600194A RID: 6474 RVA: 0x00057A84 File Offset: 0x00055C84
			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			// Token: 0x0600194B RID: 6475 RVA: 0x00057AB1 File Offset: 0x00055CB1
			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			// Token: 0x0600194C RID: 6476 RVA: 0x00057ADD File Offset: 0x00055CDD
			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			// Token: 0x0600194D RID: 6477 RVA: 0x00057B0A File Offset: 0x00055D0A
			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			// Token: 0x0600194E RID: 6478 RVA: 0x00057B37 File Offset: 0x00055D37
			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			// Token: 0x0600194F RID: 6479 RVA: 0x00057B63 File Offset: 0x00055D63
			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			// Token: 0x06001950 RID: 6480 RVA: 0x00057B8F File Offset: 0x00055D8F
			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			// Token: 0x06001951 RID: 6481 RVA: 0x00057BBC File Offset: 0x00055DBC
			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			// Token: 0x06001952 RID: 6482 RVA: 0x00057BE8 File Offset: 0x00055DE8
			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001953 RID: 6483 RVA: 0x00057C13 File Offset: 0x00055E13
			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001954 RID: 6484 RVA: 0x00057C3F File Offset: 0x00055E3F
			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001955 RID: 6485 RVA: 0x00057C6B File Offset: 0x00055E6B
			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001956 RID: 6486 RVA: 0x00057C96 File Offset: 0x00055E96
			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001957 RID: 6487 RVA: 0x00057CC1 File Offset: 0x00055EC1
			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			// Token: 0x06001958 RID: 6488 RVA: 0x00057CEB File Offset: 0x00055EEB
			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001959 RID: 6489 RVA: 0x00057D17 File Offset: 0x00055F17
			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			// Token: 0x0600195A RID: 6490 RVA: 0x00057D42 File Offset: 0x00055F42
			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			// Token: 0x0600195B RID: 6491 RVA: 0x00057D73 File Offset: 0x00055F73
			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x0600195C RID: 6492 RVA: 0x00057DA0 File Offset: 0x00055FA0
			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			// Token: 0x0600195D RID: 6493 RVA: 0x00057DCC File Offset: 0x00055FCC
			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			// Token: 0x0600195E RID: 6494 RVA: 0x00057DF8 File Offset: 0x00055FF8
			public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			// Token: 0x0600195F RID: 6495 RVA: 0x00057E23 File Offset: 0x00056023
			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001960 RID: 6496 RVA: 0x00057E4F File Offset: 0x0005604F
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001961 RID: 6497 RVA: 0x00057E7B File Offset: 0x0005607B
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			// Token: 0x06001962 RID: 6498 RVA: 0x00057EA5 File Offset: 0x000560A5
			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x06001963 RID: 6499 RVA: 0x00057ED1 File Offset: 0x000560D1
			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x06001964 RID: 6500 RVA: 0x00057EFD File Offset: 0x000560FD
			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x06001965 RID: 6501 RVA: 0x00057F29 File Offset: 0x00056129
			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x06001966 RID: 6502 RVA: 0x00057F55 File Offset: 0x00056155
			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001967 RID: 6503 RVA: 0x00057F80 File Offset: 0x00056180
			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001968 RID: 6504 RVA: 0x00057FAB File Offset: 0x000561AB
			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			// Token: 0x06001969 RID: 6505 RVA: 0x00057FD5 File Offset: 0x000561D5
			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			// Token: 0x0600196A RID: 6506 RVA: 0x00058001 File Offset: 0x00056201
			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			// Token: 0x0600196B RID: 6507 RVA: 0x0005802E File Offset: 0x0005622E
			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			// Token: 0x0600196C RID: 6508 RVA: 0x0005805B File Offset: 0x0005625B
			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			// Token: 0x0600196D RID: 6509 RVA: 0x00058086 File Offset: 0x00056286
			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			// Token: 0x0600196E RID: 6510 RVA: 0x000580B0 File Offset: 0x000562B0
			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			// Token: 0x0600196F RID: 6511 RVA: 0x000580DA File Offset: 0x000562DA
			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			// Token: 0x06001970 RID: 6512 RVA: 0x00058104 File Offset: 0x00056304
			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			// Token: 0x06001971 RID: 6513 RVA: 0x00058130 File Offset: 0x00056330
			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001972 RID: 6514 RVA: 0x0005815B File Offset: 0x0005635B
			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			// Token: 0x06001973 RID: 6515 RVA: 0x00058188 File Offset: 0x00056388
			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			// Token: 0x06001974 RID: 6516 RVA: 0x000581B5 File Offset: 0x000563B5
			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001975 RID: 6517 RVA: 0x000581E0 File Offset: 0x000563E0
			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001976 RID: 6518 RVA: 0x0005820B File Offset: 0x0005640B
			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001977 RID: 6519 RVA: 0x00058236 File Offset: 0x00056436
			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001978 RID: 6520 RVA: 0x00058261 File Offset: 0x00056461
			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			// Token: 0x06001979 RID: 6521 RVA: 0x0005828E File Offset: 0x0005648E
			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			// Token: 0x0600197A RID: 6522 RVA: 0x000582BA File Offset: 0x000564BA
			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x0600197B RID: 6523 RVA: 0x000582E6 File Offset: 0x000564E6
			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x0600197C RID: 6524 RVA: 0x00058312 File Offset: 0x00056512
			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x0600197D RID: 6525 RVA: 0x0005833E File Offset: 0x0005653E
			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x0600197E RID: 6526 RVA: 0x0005836B File Offset: 0x0005656B
			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			// Token: 0x0600197F RID: 6527 RVA: 0x00058397 File Offset: 0x00056597
			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001980 RID: 6528 RVA: 0x000583C4 File Offset: 0x000565C4
			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001981 RID: 6529 RVA: 0x000583F1 File Offset: 0x000565F1
			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			// Token: 0x06001982 RID: 6530 RVA: 0x0005841E File Offset: 0x0005661E
			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001983 RID: 6531 RVA: 0x0005844A File Offset: 0x0005664A
			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001984 RID: 6532 RVA: 0x00058476 File Offset: 0x00056676
			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			// Token: 0x06001985 RID: 6533 RVA: 0x000584A2 File Offset: 0x000566A2
			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001986 RID: 6534 RVA: 0x000584CD File Offset: 0x000566CD
			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001987 RID: 6535 RVA: 0x000584F8 File Offset: 0x000566F8
			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001988 RID: 6536 RVA: 0x00058523 File Offset: 0x00056723
			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			// Token: 0x06001989 RID: 6537 RVA: 0x00058552 File Offset: 0x00056752
			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			// Token: 0x0600198A RID: 6538 RVA: 0x0005857D File Offset: 0x0005677D
			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x0600198B RID: 6539 RVA: 0x000585AA File Offset: 0x000567AA
			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			// Token: 0x0600198C RID: 6540 RVA: 0x000585DF File Offset: 0x000567DF
			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			// Token: 0x0600198D RID: 6541 RVA: 0x0005860E File Offset: 0x0005680E
			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			// Token: 0x0600198E RID: 6542 RVA: 0x0005863A File Offset: 0x0005683A
			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			// Token: 0x0600198F RID: 6543 RVA: 0x00058666 File Offset: 0x00056866
			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			// Token: 0x06001990 RID: 6544 RVA: 0x00058692 File Offset: 0x00056892
			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			// Token: 0x06001991 RID: 6545 RVA: 0x000586BE File Offset: 0x000568BE
			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			// Token: 0x06001992 RID: 6546 RVA: 0x000586E9 File Offset: 0x000568E9
			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			// Token: 0x06001993 RID: 6547 RVA: 0x00058716 File Offset: 0x00056916
			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001994 RID: 6548 RVA: 0x00058747 File Offset: 0x00056947
			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			// Token: 0x06001995 RID: 6549 RVA: 0x00058772 File Offset: 0x00056972
			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			// Token: 0x06001996 RID: 6550 RVA: 0x0005879E File Offset: 0x0005699E
			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			// Token: 0x06001997 RID: 6551 RVA: 0x000587C9 File Offset: 0x000569C9
			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x06001998 RID: 6552 RVA: 0x000587F4 File Offset: 0x000569F4
			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			// Token: 0x06001999 RID: 6553 RVA: 0x00058821 File Offset: 0x00056A21
			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			// Token: 0x0600199A RID: 6554 RVA: 0x0005884E File Offset: 0x00056A4E
			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			// Token: 0x0600199B RID: 6555 RVA: 0x0005887D File Offset: 0x00056A7D
			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x0600199C RID: 6556 RVA: 0x000588AC File Offset: 0x00056AAC
			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x0600199D RID: 6557 RVA: 0x000588D7 File Offset: 0x00056AD7
			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			// Token: 0x0600199E RID: 6558 RVA: 0x00058903 File Offset: 0x00056B03
			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			// Token: 0x0600199F RID: 6559 RVA: 0x00058930 File Offset: 0x00056B30
			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			// Token: 0x060019A0 RID: 6560 RVA: 0x0005895D File Offset: 0x00056B5D
			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			// Token: 0x060019A1 RID: 6561 RVA: 0x00058992 File Offset: 0x00056B92
			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			// Token: 0x060019A2 RID: 6562 RVA: 0x000589C1 File Offset: 0x00056BC1
			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			// Token: 0x060019A3 RID: 6563 RVA: 0x000589EB File Offset: 0x00056BEB
			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			// Token: 0x060019A4 RID: 6564 RVA: 0x00058A18 File Offset: 0x00056C18
			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			// Token: 0x060019A5 RID: 6565 RVA: 0x00058A5A File Offset: 0x00056C5A
			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			// Token: 0x060019A6 RID: 6566 RVA: 0x00058A84 File Offset: 0x00056C84
			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x060019A7 RID: 6567 RVA: 0x00058AB0 File Offset: 0x00056CB0
			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x060019A8 RID: 6568 RVA: 0x00058ADF File Offset: 0x00056CDF
			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			// Token: 0x060019A9 RID: 6569 RVA: 0x00058B0A File Offset: 0x00056D0A
			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x060019AA RID: 6570 RVA: 0x00058B37 File Offset: 0x00056D37
			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x060019AB RID: 6571 RVA: 0x00058B64 File Offset: 0x00056D64
			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			// Token: 0x060019AC RID: 6572 RVA: 0x00058B8E File Offset: 0x00056D8E
			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			// Token: 0x060019AD RID: 6573 RVA: 0x00058BB8 File Offset: 0x00056DB8
			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			// Token: 0x060019AE RID: 6574 RVA: 0x00058BE5 File Offset: 0x00056DE5
			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			// Token: 0x060019AF RID: 6575 RVA: 0x00058C11 File Offset: 0x00056E11
			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			// Token: 0x060019B0 RID: 6576 RVA: 0x00058C3B File Offset: 0x00056E3B
			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			// Token: 0x060019B1 RID: 6577 RVA: 0x00058C68 File Offset: 0x00056E68
			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			// Token: 0x060019B2 RID: 6578 RVA: 0x00058C97 File Offset: 0x00056E97
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			// Token: 0x060019B3 RID: 6579 RVA: 0x00058CC6 File Offset: 0x00056EC6
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			// Token: 0x060019B4 RID: 6580 RVA: 0x00058CF5 File Offset: 0x00056EF5
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			// Token: 0x060019B5 RID: 6581 RVA: 0x00058D24 File Offset: 0x00056F24
			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			// Token: 0x060019B6 RID: 6582 RVA: 0x00058D50 File Offset: 0x00056F50
			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			// Token: 0x060019B7 RID: 6583 RVA: 0x00058D7B File Offset: 0x00056F7B
			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			// Token: 0x060019B8 RID: 6584 RVA: 0x00058DA6 File Offset: 0x00056FA6
			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			// Token: 0x060019B9 RID: 6585 RVA: 0x00058DD1 File Offset: 0x00056FD1
			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			// Token: 0x060019BA RID: 6586 RVA: 0x00058DFE File Offset: 0x00056FFE
			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			// Token: 0x060019BB RID: 6587 RVA: 0x00058E28 File Offset: 0x00057028
			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			// Token: 0x060019BC RID: 6588 RVA: 0x00058E52 File Offset: 0x00057052
			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			// Token: 0x060019BD RID: 6589 RVA: 0x00058E7D File Offset: 0x0005707D
			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			// Token: 0x060019BE RID: 6590 RVA: 0x00058EA8 File Offset: 0x000570A8
			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			// Token: 0x060019BF RID: 6591 RVA: 0x00058ED3 File Offset: 0x000570D3
			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			// Token: 0x060019C0 RID: 6592 RVA: 0x00058EFE File Offset: 0x000570FE
			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			// Token: 0x060019C1 RID: 6593 RVA: 0x00058F31 File Offset: 0x00057131
			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			// Token: 0x060019C2 RID: 6594 RVA: 0x00058F5C File Offset: 0x0005715C
			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			// Token: 0x060019C3 RID: 6595 RVA: 0x00058F87 File Offset: 0x00057187
			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			// Token: 0x060019C4 RID: 6596 RVA: 0x00058FB2 File Offset: 0x000571B2
			public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			// Token: 0x060019C5 RID: 6597 RVA: 0x00058FDD File Offset: 0x000571DD
			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			// Token: 0x060019C6 RID: 6598 RVA: 0x00059008 File Offset: 0x00057208
			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			// Token: 0x060019C7 RID: 6599 RVA: 0x00059032 File Offset: 0x00057232
			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			// Token: 0x060019C8 RID: 6600 RVA: 0x0005905C File Offset: 0x0005725C
			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			// Token: 0x060019C9 RID: 6601 RVA: 0x00059086 File Offset: 0x00057286
			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			// Token: 0x060019CA RID: 6602 RVA: 0x000590B0 File Offset: 0x000572B0
			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			// Token: 0x060019CB RID: 6603 RVA: 0x000590DA File Offset: 0x000572DA
			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			// Token: 0x060019CC RID: 6604 RVA: 0x00059104 File Offset: 0x00057304
			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			// Token: 0x060019CD RID: 6605 RVA: 0x0005912F File Offset: 0x0005732F
			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			// Token: 0x060019CE RID: 6606 RVA: 0x0005915A File Offset: 0x0005735A
			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			// Token: 0x060019CF RID: 6607 RVA: 0x00059185 File Offset: 0x00057385
			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			// Token: 0x060019D0 RID: 6608 RVA: 0x000591B0 File Offset: 0x000573B0
			public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			// Token: 0x060019D1 RID: 6609 RVA: 0x000591DB File Offset: 0x000573DB
			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			// Token: 0x060019D2 RID: 6610 RVA: 0x00059206 File Offset: 0x00057406
			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			// Token: 0x060019D3 RID: 6611 RVA: 0x00059231 File Offset: 0x00057431
			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			// Token: 0x060019D4 RID: 6612 RVA: 0x0005925B File Offset: 0x0005745B
			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			// Token: 0x060019D5 RID: 6613 RVA: 0x00059287 File Offset: 0x00057487
			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			// Token: 0x060019D6 RID: 6614 RVA: 0x000592B2 File Offset: 0x000574B2
			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			// Token: 0x060019D7 RID: 6615 RVA: 0x000592DD File Offset: 0x000574DD
			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			// Token: 0x060019D8 RID: 6616 RVA: 0x00059308 File Offset: 0x00057508
			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			// Token: 0x060019D9 RID: 6617 RVA: 0x00059337 File Offset: 0x00057537
			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			// Token: 0x060019DA RID: 6618 RVA: 0x00059361 File Offset: 0x00057561
			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			// Token: 0x060019DB RID: 6619 RVA: 0x0005938C File Offset: 0x0005758C
			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			// Token: 0x060019DC RID: 6620 RVA: 0x000593B9 File Offset: 0x000575B9
			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x060019DD RID: 6621 RVA: 0x000593E6 File Offset: 0x000575E6
			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x060019DE RID: 6622 RVA: 0x00059413 File Offset: 0x00057613
			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x060019DF RID: 6623 RVA: 0x0005943E File Offset: 0x0005763E
			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x060019E0 RID: 6624 RVA: 0x00059469 File Offset: 0x00057669
			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x060019E1 RID: 6625 RVA: 0x00059495 File Offset: 0x00057695
			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			// Token: 0x060019E2 RID: 6626 RVA: 0x000594C1 File Offset: 0x000576C1
			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			// Token: 0x060019E3 RID: 6627 RVA: 0x000594EB File Offset: 0x000576EB
			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			// Token: 0x060019E4 RID: 6628 RVA: 0x00059515 File Offset: 0x00057715
			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			// Token: 0x060019E5 RID: 6629 RVA: 0x0005953F File Offset: 0x0005773F
			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			// Token: 0x060019E6 RID: 6630 RVA: 0x0005956E File Offset: 0x0005776E
			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			// Token: 0x060019E7 RID: 6631 RVA: 0x0005959D File Offset: 0x0005779D
			public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			// Token: 0x060019E8 RID: 6632 RVA: 0x000595C8 File Offset: 0x000577C8
			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			// Token: 0x060019E9 RID: 6633 RVA: 0x000595F3 File Offset: 0x000577F3
			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win32.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			// Token: 0x060019EA RID: 6634 RVA: 0x0005961D File Offset: 0x0005781D
			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			// Token: 0x060019EB RID: 6635 RVA: 0x00059648 File Offset: 0x00057848
			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			// Token: 0x060019EC RID: 6636 RVA: 0x00059673 File Offset: 0x00057873
			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x060019ED RID: 6637 RVA: 0x0005969E File Offset: 0x0005789E
			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060019EE RID: 6638 RVA: 0x000596CB File Offset: 0x000578CB
			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x060019EF RID: 6639 RVA: 0x000596F8 File Offset: 0x000578F8
			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x060019F0 RID: 6640 RVA: 0x00059725 File Offset: 0x00057925
			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			// Token: 0x060019F1 RID: 6641 RVA: 0x00059752 File Offset: 0x00057952
			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			// Token: 0x060019F2 RID: 6642 RVA: 0x0005977F File Offset: 0x0005797F
			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x060019F3 RID: 6643 RVA: 0x000597AE File Offset: 0x000579AE
			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x060019F4 RID: 6644 RVA: 0x000597DA File Offset: 0x000579DA
			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x060019F5 RID: 6645 RVA: 0x00059806 File Offset: 0x00057A06
			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win32.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x060019F6 RID: 6646 RVA: 0x00059831 File Offset: 0x00057A31
			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Win32.Native.SteamAPI_Init();
			}

			// Token: 0x060019F7 RID: 6647 RVA: 0x00059838 File Offset: 0x00057A38
			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Win32.Native.SteamAPI_RunCallbacks();
			}

			// Token: 0x060019F8 RID: 6648 RVA: 0x0005983F File Offset: 0x00057A3F
			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Win32.Native.SteamGameServer_RunCallbacks();
			}

			// Token: 0x060019F9 RID: 6649 RVA: 0x00059846 File Offset: 0x00057A46
			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Win32.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			// Token: 0x060019FA RID: 6650 RVA: 0x0005984F File Offset: 0x00057A4F
			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Win32.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			// Token: 0x060019FB RID: 6651 RVA: 0x00059857 File Offset: 0x00057A57
			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win32.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			// Token: 0x060019FC RID: 6652 RVA: 0x00059860 File Offset: 0x00057A60
			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win32.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			// Token: 0x060019FD RID: 6653 RVA: 0x00059869 File Offset: 0x00057A69
			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Win32.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			// Token: 0x060019FE RID: 6654 RVA: 0x00059879 File Offset: 0x00057A79
			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Win32.Native.SteamAPI_Shutdown();
			}

			// Token: 0x060019FF RID: 6655 RVA: 0x00059880 File Offset: 0x00057A80
			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Win32.Native.SteamGameServer_Shutdown();
			}

			// Token: 0x06001A00 RID: 6656 RVA: 0x00059887 File Offset: 0x00057A87
			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Win32.Native.SteamAPI_GetHSteamUser();
			}

			// Token: 0x06001A01 RID: 6657 RVA: 0x0005988E File Offset: 0x00057A8E
			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Win32.Native.SteamAPI_GetHSteamPipe();
			}

			// Token: 0x06001A02 RID: 6658 RVA: 0x00059895 File Offset: 0x00057A95
			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Win32.Native.SteamGameServer_GetHSteamUser();
			}

			// Token: 0x06001A03 RID: 6659 RVA: 0x0005989C File Offset: 0x00057A9C
			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Win32.Native.SteamGameServer_GetHSteamPipe();
			}

			// Token: 0x06001A04 RID: 6660 RVA: 0x000598A3 File Offset: 0x00057AA3
			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Win32.Native.SteamInternal_CreateInterface(version);
			}

			// Token: 0x06001A05 RID: 6661 RVA: 0x000598AB File Offset: 0x00057AAB
			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Win32.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			// Token: 0x04000933 RID: 2355
			internal IntPtr _ptr;

			// Token: 0x020002B7 RID: 695
			internal static class Native
			{
				// Token: 0x060027EB RID: 10219
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				// Token: 0x060027EC RID: 10220
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x060027ED RID: 10221
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x060027EE RID: 10222
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				// Token: 0x060027EF RID: 10223
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				// Token: 0x060027F0 RID: 10224
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F1 RID: 10225
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F2 RID: 10226
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				// Token: 0x060027F3 RID: 10227
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F4 RID: 10228
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				// Token: 0x060027F5 RID: 10229
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F6 RID: 10230
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F7 RID: 10231
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F8 RID: 10232
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027F9 RID: 10233
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x060027FA RID: 10234
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027FB RID: 10235
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x060027FC RID: 10236
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x060027FD RID: 10237
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x060027FE RID: 10238
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				// Token: 0x060027FF RID: 10239
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				// Token: 0x06002800 RID: 10240
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				// Token: 0x06002801 RID: 10241
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002802 RID: 10242
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002803 RID: 10243
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002804 RID: 10244
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002805 RID: 10245
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002806 RID: 10246
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002807 RID: 10247
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002808 RID: 10248
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002809 RID: 10249
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600280A RID: 10250
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x0600280B RID: 10251
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				// Token: 0x0600280C RID: 10252
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				// Token: 0x0600280D RID: 10253
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				// Token: 0x0600280E RID: 10254
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

				// Token: 0x0600280F RID: 10255
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				// Token: 0x06002810 RID: 10256
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				// Token: 0x06002811 RID: 10257
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				// Token: 0x06002812 RID: 10258
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002813 RID: 10259
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002814 RID: 10260
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06002815 RID: 10261
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, [MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06002816 RID: 10262
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				// Token: 0x06002817 RID: 10263
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				// Token: 0x06002818 RID: 10264
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002819 RID: 10265
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x0600281A RID: 10266
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				// Token: 0x0600281B RID: 10267
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				// Token: 0x0600281C RID: 10268
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				// Token: 0x0600281D RID: 10269
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				// Token: 0x0600281E RID: 10270
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				// Token: 0x0600281F RID: 10271
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				// Token: 0x06002820 RID: 10272
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002821 RID: 10273
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

				// Token: 0x06002822 RID: 10274
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				// Token: 0x06002823 RID: 10275
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				// Token: 0x06002824 RID: 10276
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				// Token: 0x06002825 RID: 10277
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				// Token: 0x06002826 RID: 10278
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				// Token: 0x06002827 RID: 10279
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				// Token: 0x06002828 RID: 10280
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				// Token: 0x06002829 RID: 10281
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				// Token: 0x0600282A RID: 10282
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				// Token: 0x0600282B RID: 10283
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				// Token: 0x0600282C RID: 10284
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				// Token: 0x0600282D RID: 10285
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600282E RID: 10286
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600282F RID: 10287
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002830 RID: 10288
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

				// Token: 0x06002831 RID: 10289
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				// Token: 0x06002832 RID: 10290
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002833 RID: 10291
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				// Token: 0x06002834 RID: 10292
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				// Token: 0x06002835 RID: 10293
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				// Token: 0x06002836 RID: 10294
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x06002837 RID: 10295
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x06002838 RID: 10296
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				// Token: 0x06002839 RID: 10297
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				// Token: 0x0600283A RID: 10298
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				// Token: 0x0600283B RID: 10299
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				// Token: 0x0600283C RID: 10300
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600283D RID: 10301
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600283E RID: 10302
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				// Token: 0x0600283F RID: 10303
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				// Token: 0x06002840 RID: 10304
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				// Token: 0x06002841 RID: 10305
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				// Token: 0x06002842 RID: 10306
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				// Token: 0x06002843 RID: 10307
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

				// Token: 0x06002844 RID: 10308
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				// Token: 0x06002845 RID: 10309
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				// Token: 0x06002846 RID: 10310
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				// Token: 0x06002847 RID: 10311
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				// Token: 0x06002848 RID: 10312
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				// Token: 0x06002849 RID: 10313
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				// Token: 0x0600284A RID: 10314
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600284B RID: 10315
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600284C RID: 10316
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600284D RID: 10317
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

				// Token: 0x0600284E RID: 10318
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600284F RID: 10319
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002850 RID: 10320
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002851 RID: 10321
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				// Token: 0x06002852 RID: 10322
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				// Token: 0x06002853 RID: 10323
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				// Token: 0x06002854 RID: 10324
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				// Token: 0x06002855 RID: 10325
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				// Token: 0x06002856 RID: 10326
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002857 RID: 10327
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				// Token: 0x06002858 RID: 10328
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002859 RID: 10329
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				// Token: 0x0600285A RID: 10330
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				// Token: 0x0600285B RID: 10331
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				// Token: 0x0600285C RID: 10332
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600285D RID: 10333
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x0600285E RID: 10334
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600285F RID: 10335
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002860 RID: 10336
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002861 RID: 10337
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				// Token: 0x06002862 RID: 10338
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				// Token: 0x06002863 RID: 10339
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				// Token: 0x06002864 RID: 10340
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				// Token: 0x06002865 RID: 10341
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002866 RID: 10342
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002867 RID: 10343
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002868 RID: 10344
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

				// Token: 0x06002869 RID: 10345
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				// Token: 0x0600286A RID: 10346
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x0600286B RID: 10347
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x0600286C RID: 10348
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x0600286D RID: 10349
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				// Token: 0x0600286E RID: 10350
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x0600286F RID: 10351
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002870 RID: 10352
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				// Token: 0x06002871 RID: 10353
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				// Token: 0x06002872 RID: 10354
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				// Token: 0x06002873 RID: 10355
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				// Token: 0x06002874 RID: 10356
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				// Token: 0x06002875 RID: 10357
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				// Token: 0x06002876 RID: 10358
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				// Token: 0x06002877 RID: 10359
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				// Token: 0x06002878 RID: 10360
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				// Token: 0x06002879 RID: 10361
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				// Token: 0x0600287A RID: 10362
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				// Token: 0x0600287B RID: 10363
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x0600287C RID: 10364
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				// Token: 0x0600287D RID: 10365
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x0600287E RID: 10366
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				// Token: 0x0600287F RID: 10367
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				// Token: 0x06002880 RID: 10368
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				// Token: 0x06002881 RID: 10369
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				// Token: 0x06002882 RID: 10370
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				// Token: 0x06002883 RID: 10371
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				// Token: 0x06002884 RID: 10372
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				// Token: 0x06002885 RID: 10373
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				// Token: 0x06002886 RID: 10374
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				// Token: 0x06002887 RID: 10375
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				// Token: 0x06002888 RID: 10376
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				// Token: 0x06002889 RID: 10377
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				// Token: 0x0600288A RID: 10378
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				// Token: 0x0600288B RID: 10379
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				// Token: 0x0600288C RID: 10380
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x0600288D RID: 10381
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				// Token: 0x0600288E RID: 10382
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				// Token: 0x0600288F RID: 10383
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				// Token: 0x06002890 RID: 10384
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				// Token: 0x06002891 RID: 10385
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				// Token: 0x06002892 RID: 10386
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x06002893 RID: 10387
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x06002894 RID: 10388
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				// Token: 0x06002895 RID: 10389
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				// Token: 0x06002896 RID: 10390
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				// Token: 0x06002897 RID: 10391
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				// Token: 0x06002898 RID: 10392
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002899 RID: 10393
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				// Token: 0x0600289A RID: 10394
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				// Token: 0x0600289B RID: 10395
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x0600289C RID: 10396
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x0600289D RID: 10397
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				// Token: 0x0600289E RID: 10398
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x0600289F RID: 10399
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				// Token: 0x060028A0 RID: 10400
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x060028A1 RID: 10401
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x060028A2 RID: 10402
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060028A3 RID: 10403
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				// Token: 0x060028A4 RID: 10404
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x060028A5 RID: 10405
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				// Token: 0x060028A6 RID: 10406
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x060028A7 RID: 10407
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				// Token: 0x060028A8 RID: 10408
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x060028A9 RID: 10409
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060028AA RID: 10410
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				// Token: 0x060028AB RID: 10411
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				// Token: 0x060028AC RID: 10412
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				// Token: 0x060028AD RID: 10413
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060028AE RID: 10414
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				// Token: 0x060028AF RID: 10415
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

				// Token: 0x060028B0 RID: 10416
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x060028B1 RID: 10417
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				// Token: 0x060028B2 RID: 10418
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				// Token: 0x060028B3 RID: 10419
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060028B4 RID: 10420
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				// Token: 0x060028B5 RID: 10421
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060028B6 RID: 10422
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060028B7 RID: 10423
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060028B8 RID: 10424
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x060028B9 RID: 10425
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				// Token: 0x060028BA RID: 10426
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x060028BB RID: 10427
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x060028BC RID: 10428
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x060028BD RID: 10429
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x060028BE RID: 10430
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x060028BF RID: 10431
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x060028C0 RID: 10432
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x060028C1 RID: 10433
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x060028C2 RID: 10434
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x060028C3 RID: 10435
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				// Token: 0x060028C4 RID: 10436
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				// Token: 0x060028C5 RID: 10437
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				// Token: 0x060028C6 RID: 10438
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				// Token: 0x060028C7 RID: 10439
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				// Token: 0x060028C8 RID: 10440
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				// Token: 0x060028C9 RID: 10441
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028CA RID: 10442
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028CB RID: 10443
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028CC RID: 10444
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				// Token: 0x060028CD RID: 10445
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028CE RID: 10446
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				// Token: 0x060028CF RID: 10447
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x060028D0 RID: 10448
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x060028D1 RID: 10449
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028D2 RID: 10450
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028D3 RID: 10451
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028D4 RID: 10452
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028D5 RID: 10453
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x060028D6 RID: 10454
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				// Token: 0x060028D7 RID: 10455
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				// Token: 0x060028D8 RID: 10456
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				// Token: 0x060028D9 RID: 10457
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				// Token: 0x060028DA RID: 10458
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				// Token: 0x060028DB RID: 10459
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x060028DC RID: 10460
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				// Token: 0x060028DD RID: 10461
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				// Token: 0x060028DE RID: 10462
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				// Token: 0x060028DF RID: 10463
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				// Token: 0x060028E0 RID: 10464
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				// Token: 0x060028E1 RID: 10465
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				// Token: 0x060028E2 RID: 10466
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

				// Token: 0x060028E3 RID: 10467
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060028E4 RID: 10468
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				// Token: 0x060028E5 RID: 10469
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				// Token: 0x060028E6 RID: 10470
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				// Token: 0x060028E7 RID: 10471
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				// Token: 0x060028E8 RID: 10472
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x060028E9 RID: 10473
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t pTags);

				// Token: 0x060028EA RID: 10474
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				// Token: 0x060028EB RID: 10475
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				// Token: 0x060028EC RID: 10476
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060028ED RID: 10477
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x060028EE RID: 10478
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060028EF RID: 10479
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x060028F0 RID: 10480
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060028F1 RID: 10481
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				// Token: 0x060028F2 RID: 10482
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060028F3 RID: 10483
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x060028F4 RID: 10484
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x060028F5 RID: 10485
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

				// Token: 0x060028F6 RID: 10486
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

				// Token: 0x060028F7 RID: 10487
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				// Token: 0x060028F8 RID: 10488
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				// Token: 0x060028F9 RID: 10489
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

				// Token: 0x060028FA RID: 10490
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				// Token: 0x060028FB RID: 10491
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				// Token: 0x060028FC RID: 10492
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				// Token: 0x060028FD RID: 10493
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				// Token: 0x060028FE RID: 10494
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				// Token: 0x060028FF RID: 10495
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				// Token: 0x06002900 RID: 10496
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x06002901 RID: 10497
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002902 RID: 10498
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002903 RID: 10499
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002904 RID: 10500
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002905 RID: 10501
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				// Token: 0x06002906 RID: 10502
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002907 RID: 10503
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				// Token: 0x06002908 RID: 10504
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				// Token: 0x06002909 RID: 10505
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				// Token: 0x0600290A RID: 10506
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				// Token: 0x0600290B RID: 10507
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				// Token: 0x0600290C RID: 10508
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x0600290D RID: 10509
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x0600290E RID: 10510
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x0600290F RID: 10511
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002910 RID: 10512
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

				// Token: 0x06002911 RID: 10513
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				// Token: 0x06002912 RID: 10514
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				// Token: 0x06002913 RID: 10515
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002914 RID: 10516
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002915 RID: 10517
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002916 RID: 10518
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002917 RID: 10519
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				// Token: 0x06002918 RID: 10520
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				// Token: 0x06002919 RID: 10521
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				// Token: 0x0600291A RID: 10522
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				// Token: 0x0600291B RID: 10523
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				// Token: 0x0600291C RID: 10524
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				// Token: 0x0600291D RID: 10525
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				// Token: 0x0600291E RID: 10526
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x0600291F RID: 10527
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002920 RID: 10528
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				// Token: 0x06002921 RID: 10529
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				// Token: 0x06002922 RID: 10530
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				// Token: 0x06002923 RID: 10531
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				// Token: 0x06002924 RID: 10532
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				// Token: 0x06002925 RID: 10533
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				// Token: 0x06002926 RID: 10534
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				// Token: 0x06002927 RID: 10535
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				// Token: 0x06002928 RID: 10536
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				// Token: 0x06002929 RID: 10537
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				// Token: 0x0600292A RID: 10538
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				// Token: 0x0600292B RID: 10539
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				// Token: 0x0600292C RID: 10540
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				// Token: 0x0600292D RID: 10541
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x0600292E RID: 10542
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				// Token: 0x0600292F RID: 10543
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				// Token: 0x06002930 RID: 10544
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				// Token: 0x06002931 RID: 10545
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x06002932 RID: 10546
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002933 RID: 10547
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002934 RID: 10548
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002935 RID: 10549
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x06002936 RID: 10550
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

				// Token: 0x06002937 RID: 10551
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				// Token: 0x06002938 RID: 10552
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				// Token: 0x06002939 RID: 10553
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x0600293A RID: 10554
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				// Token: 0x0600293B RID: 10555
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				// Token: 0x0600293C RID: 10556
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x0600293D RID: 10557
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				// Token: 0x0600293E RID: 10558
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				// Token: 0x0600293F RID: 10559
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				// Token: 0x06002940 RID: 10560
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				// Token: 0x06002941 RID: 10561
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				// Token: 0x06002942 RID: 10562
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				// Token: 0x06002943 RID: 10563
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x06002944 RID: 10564
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x06002945 RID: 10565
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				// Token: 0x06002946 RID: 10566
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

				// Token: 0x06002947 RID: 10567
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, [MarshalAs(UnmanagedType.U1)] bool bAllow);

				// Token: 0x06002948 RID: 10568
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x06002949 RID: 10569
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x0600294A RID: 10570
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				// Token: 0x0600294B RID: 10571
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x0600294C RID: 10572
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x0600294D RID: 10573
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

				// Token: 0x0600294E RID: 10574
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				// Token: 0x0600294F RID: 10575
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				// Token: 0x06002950 RID: 10576
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x06002951 RID: 10577
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x06002952 RID: 10578
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				// Token: 0x06002953 RID: 10579
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				// Token: 0x06002954 RID: 10580
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x06002955 RID: 10581
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x06002956 RID: 10582
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				// Token: 0x06002957 RID: 10583
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				// Token: 0x06002958 RID: 10584
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				// Token: 0x06002959 RID: 10585
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, [MarshalAs(UnmanagedType.U1)] bool bHook);

				// Token: 0x0600295A RID: 10586
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				// Token: 0x0600295B RID: 10587
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				// Token: 0x0600295C RID: 10588
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				// Token: 0x0600295D RID: 10589
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				// Token: 0x0600295E RID: 10590
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				// Token: 0x0600295F RID: 10591
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				// Token: 0x06002960 RID: 10592
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				// Token: 0x06002961 RID: 10593
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				// Token: 0x06002962 RID: 10594
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				// Token: 0x06002963 RID: 10595
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				// Token: 0x06002964 RID: 10596
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				// Token: 0x06002965 RID: 10597
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				// Token: 0x06002966 RID: 10598
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				// Token: 0x06002967 RID: 10599
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				// Token: 0x06002968 RID: 10600
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				// Token: 0x06002969 RID: 10601
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x0600296A RID: 10602
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x0600296B RID: 10603
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600296C RID: 10604
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				// Token: 0x0600296D RID: 10605
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x0600296E RID: 10606
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x0600296F RID: 10607
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002970 RID: 10608
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002971 RID: 10609
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002972 RID: 10610
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002973 RID: 10611
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002974 RID: 10612
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				// Token: 0x06002975 RID: 10613
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002976 RID: 10614
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002977 RID: 10615
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				// Token: 0x06002978 RID: 10616
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002979 RID: 10617
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bAvailable);

				// Token: 0x0600297A RID: 10618
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				// Token: 0x0600297B RID: 10619
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				// Token: 0x0600297C RID: 10620
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x0600297D RID: 10621
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x0600297E RID: 10622
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x0600297F RID: 10623
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				// Token: 0x06002980 RID: 10624
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x06002981 RID: 10625
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x06002982 RID: 10626
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002983 RID: 10627
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002984 RID: 10628
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				// Token: 0x06002985 RID: 10629
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x06002986 RID: 10630
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x06002987 RID: 10631
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002988 RID: 10632
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				// Token: 0x06002989 RID: 10633
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				// Token: 0x0600298A RID: 10634
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				// Token: 0x0600298B RID: 10635
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				// Token: 0x0600298C RID: 10636
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				// Token: 0x0600298D RID: 10637
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x0600298E RID: 10638
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x0600298F RID: 10639
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002990 RID: 10640
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002991 RID: 10641
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				// Token: 0x06002992 RID: 10642
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				// Token: 0x06002993 RID: 10643
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				// Token: 0x06002994 RID: 10644
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x06002995 RID: 10645
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x06002996 RID: 10646
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002997 RID: 10647
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				// Token: 0x06002998 RID: 10648
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				// Token: 0x06002999 RID: 10649
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

				// Token: 0x0600299A RID: 10650
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				// Token: 0x0600299B RID: 10651
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				// Token: 0x0600299C RID: 10652
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				// Token: 0x0600299D RID: 10653
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				// Token: 0x0600299E RID: 10654
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

				// Token: 0x0600299F RID: 10655
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				// Token: 0x060029A0 RID: 10656
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

				// Token: 0x060029A1 RID: 10657
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				// Token: 0x060029A2 RID: 10658
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				// Token: 0x060029A3 RID: 10659
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				// Token: 0x060029A4 RID: 10660
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				// Token: 0x060029A5 RID: 10661
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060029A6 RID: 10662
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				// Token: 0x060029A7 RID: 10663
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				// Token: 0x060029A8 RID: 10664
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060029A9 RID: 10665
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x060029AA RID: 10666
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x060029AB RID: 10667
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060029AC RID: 10668
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				// Token: 0x060029AD RID: 10669
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x060029AE RID: 10670
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				// Token: 0x060029AF RID: 10671
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x060029B0 RID: 10672
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x060029B1 RID: 10673
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				// Token: 0x060029B2 RID: 10674
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x060029B3 RID: 10675
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				// Token: 0x060029B4 RID: 10676
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				// Token: 0x060029B5 RID: 10677
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				// Token: 0x060029B6 RID: 10678
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				// Token: 0x060029B7 RID: 10679
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				// Token: 0x060029B8 RID: 10680
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				// Token: 0x060029B9 RID: 10681
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				// Token: 0x060029BA RID: 10682
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060029BB RID: 10683
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x060029BC RID: 10684
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x060029BD RID: 10685
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x060029BE RID: 10686
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x060029BF RID: 10687
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x060029C0 RID: 10688
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x060029C1 RID: 10689
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x060029C2 RID: 10690
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x060029C3 RID: 10691
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x060029C4 RID: 10692
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t pDetails);

				// Token: 0x060029C5 RID: 10693
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				// Token: 0x060029C6 RID: 10694
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				// Token: 0x060029C7 RID: 10695
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x060029C8 RID: 10696
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				// Token: 0x060029C9 RID: 10697
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x060029CA RID: 10698
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				// Token: 0x060029CB RID: 10699
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x060029CC RID: 10700
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				// Token: 0x060029CD RID: 10701
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x060029CE RID: 10702
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x060029CF RID: 10703
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x060029D0 RID: 10704
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

				// Token: 0x060029D1 RID: 10705
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

				// Token: 0x060029D2 RID: 10706
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

				// Token: 0x060029D3 RID: 10707
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

				// Token: 0x060029D4 RID: 10708
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

				// Token: 0x060029D5 RID: 10709
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

				// Token: 0x060029D6 RID: 10710
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

				// Token: 0x060029D7 RID: 10711
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x060029D8 RID: 10712
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x060029D9 RID: 10713
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				// Token: 0x060029DA RID: 10714
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				// Token: 0x060029DB RID: 10715
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

				// Token: 0x060029DC RID: 10716
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				// Token: 0x060029DD RID: 10717
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x060029DE RID: 10718
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				// Token: 0x060029DF RID: 10719
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				// Token: 0x060029E0 RID: 10720
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				// Token: 0x060029E1 RID: 10721
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				// Token: 0x060029E2 RID: 10722
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				// Token: 0x060029E3 RID: 10723
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				// Token: 0x060029E4 RID: 10724
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x060029E5 RID: 10725
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				// Token: 0x060029E6 RID: 10726
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x060029E7 RID: 10727
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t pTags);

				// Token: 0x060029E8 RID: 10728
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				// Token: 0x060029E9 RID: 10729
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				// Token: 0x060029EA RID: 10730
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				// Token: 0x060029EB RID: 10731
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				// Token: 0x060029EC RID: 10732
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				// Token: 0x060029ED RID: 10733
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				// Token: 0x060029EE RID: 10734
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				// Token: 0x060029EF RID: 10735
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				// Token: 0x060029F0 RID: 10736
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x060029F1 RID: 10737
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				// Token: 0x060029F2 RID: 10738
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				// Token: 0x060029F3 RID: 10739
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x060029F4 RID: 10740
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060029F5 RID: 10741
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x060029F6 RID: 10742
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x060029F7 RID: 10743
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060029F8 RID: 10744
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060029F9 RID: 10745
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				// Token: 0x060029FA RID: 10746
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x060029FB RID: 10747
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x060029FC RID: 10748
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				// Token: 0x060029FD RID: 10749
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x060029FE RID: 10750
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

				// Token: 0x060029FF RID: 10751
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				// Token: 0x06002A00 RID: 10752
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, [MarshalAs(UnmanagedType.U1)] bool bSuspend);

				// Token: 0x06002A01 RID: 10753
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002A02 RID: 10754
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002A03 RID: 10755
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				// Token: 0x06002A04 RID: 10756
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x06002A05 RID: 10757
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x06002A06 RID: 10758
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x06002A07 RID: 10759
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x06002A08 RID: 10760
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002A09 RID: 10761
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002A0A RID: 10762
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				// Token: 0x06002A0B RID: 10763
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				// Token: 0x06002A0C RID: 10764
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				// Token: 0x06002A0D RID: 10765
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				// Token: 0x06002A0E RID: 10766
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				// Token: 0x06002A0F RID: 10767
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				// Token: 0x06002A10 RID: 10768
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				// Token: 0x06002A11 RID: 10769
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				// Token: 0x06002A12 RID: 10770
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				// Token: 0x06002A13 RID: 10771
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A14 RID: 10772
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				// Token: 0x06002A15 RID: 10773
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				// Token: 0x06002A16 RID: 10774
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A17 RID: 10775
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A18 RID: 10776
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A19 RID: 10777
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A1A RID: 10778
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				// Token: 0x06002A1B RID: 10779
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				// Token: 0x06002A1C RID: 10780
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002A1D RID: 10781
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002A1E RID: 10782
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002A1F RID: 10783
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x06002A20 RID: 10784
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				// Token: 0x06002A21 RID: 10785
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002A22 RID: 10786
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002A23 RID: 10787
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002A24 RID: 10788
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x06002A25 RID: 10789
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x06002A26 RID: 10790
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

				// Token: 0x06002A27 RID: 10791
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A28 RID: 10792
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A29 RID: 10793
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A2A RID: 10794
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

				// Token: 0x06002A2B RID: 10795
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002A2C RID: 10796
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x06002A2D RID: 10797
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

				// Token: 0x06002A2E RID: 10798
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				// Token: 0x06002A2F RID: 10799
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

				// Token: 0x06002A30 RID: 10800
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				// Token: 0x06002A31 RID: 10801
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

				// Token: 0x06002A32 RID: 10802
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

				// Token: 0x06002A33 RID: 10803
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002A34 RID: 10804
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				// Token: 0x06002A35 RID: 10805
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x06002A36 RID: 10806
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002A37 RID: 10807
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				// Token: 0x06002A38 RID: 10808
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002A39 RID: 10809
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002A3A RID: 10810
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				// Token: 0x06002A3B RID: 10811
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				// Token: 0x06002A3C RID: 10812
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

				// Token: 0x06002A3D RID: 10813
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002A3E RID: 10814
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002A3F RID: 10815
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				// Token: 0x06002A40 RID: 10816
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				// Token: 0x06002A41 RID: 10817
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				// Token: 0x06002A42 RID: 10818
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				// Token: 0x06002A43 RID: 10819
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				// Token: 0x06002A44 RID: 10820
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				// Token: 0x06002A45 RID: 10821
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				// Token: 0x06002A46 RID: 10822
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				// Token: 0x06002A47 RID: 10823
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				// Token: 0x06002A48 RID: 10824
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x06002A49 RID: 10825
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x06002A4A RID: 10826
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				// Token: 0x06002A4B RID: 10827
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x06002A4C RID: 10828
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002A4D RID: 10829
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				// Token: 0x06002A4E RID: 10830
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				// Token: 0x06002A4F RID: 10831
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				// Token: 0x06002A50 RID: 10832
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				// Token: 0x06002A51 RID: 10833
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				// Token: 0x06002A52 RID: 10834
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				// Token: 0x06002A53 RID: 10835
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				// Token: 0x06002A54 RID: 10836
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002A55 RID: 10837
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				// Token: 0x06002A56 RID: 10838
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				// Token: 0x06002A57 RID: 10839
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				// Token: 0x06002A58 RID: 10840
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x06002A59 RID: 10841
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				// Token: 0x06002A5A RID: 10842
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x06002A5B RID: 10843
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				// Token: 0x06002A5C RID: 10844
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				// Token: 0x06002A5D RID: 10845
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				// Token: 0x06002A5E RID: 10846
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x06002A5F RID: 10847
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x06002A60 RID: 10848
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x06002A61 RID: 10849
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x06002A62 RID: 10850
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				// Token: 0x06002A63 RID: 10851
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				// Token: 0x06002A64 RID: 10852
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				// Token: 0x06002A65 RID: 10853
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				// Token: 0x06002A66 RID: 10854
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bDedicated);

				// Token: 0x06002A67 RID: 10855
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				// Token: 0x06002A68 RID: 10856
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				// Token: 0x06002A69 RID: 10857
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				// Token: 0x06002A6A RID: 10858
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				// Token: 0x06002A6B RID: 10859
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				// Token: 0x06002A6C RID: 10860
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				// Token: 0x06002A6D RID: 10861
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				// Token: 0x06002A6E RID: 10862
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				// Token: 0x06002A6F RID: 10863
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				// Token: 0x06002A70 RID: 10864
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				// Token: 0x06002A71 RID: 10865
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				// Token: 0x06002A72 RID: 10866
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

				// Token: 0x06002A73 RID: 10867
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				// Token: 0x06002A74 RID: 10868
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				// Token: 0x06002A75 RID: 10869
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				// Token: 0x06002A76 RID: 10870
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				// Token: 0x06002A77 RID: 10871
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				// Token: 0x06002A78 RID: 10872
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				// Token: 0x06002A79 RID: 10873
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				// Token: 0x06002A7A RID: 10874
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				// Token: 0x06002A7B RID: 10875
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				// Token: 0x06002A7C RID: 10876
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				// Token: 0x06002A7D RID: 10877
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				// Token: 0x06002A7E RID: 10878
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002A7F RID: 10879
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x06002A80 RID: 10880
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				// Token: 0x06002A81 RID: 10881
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				// Token: 0x06002A82 RID: 10882
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				// Token: 0x06002A83 RID: 10883
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				// Token: 0x06002A84 RID: 10884
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				// Token: 0x06002A85 RID: 10885
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				// Token: 0x06002A86 RID: 10886
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				// Token: 0x06002A87 RID: 10887
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				// Token: 0x06002A88 RID: 10888
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				// Token: 0x06002A89 RID: 10889
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bActive);

				// Token: 0x06002A8A RID: 10890
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				// Token: 0x06002A8B RID: 10891
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				// Token: 0x06002A8C RID: 10892
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				// Token: 0x06002A8D RID: 10893
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				// Token: 0x06002A8E RID: 10894
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002A8F RID: 10895
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002A90 RID: 10896
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x06002A91 RID: 10897
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002A92 RID: 10898
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				// Token: 0x06002A93 RID: 10899
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				// Token: 0x06002A94 RID: 10900
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x06002A95 RID: 10901
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x06002A96 RID: 10902
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x06002A97 RID: 10903
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002A98 RID: 10904
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_Init();

				// Token: 0x06002A99 RID: 10905
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_RunCallbacks();

				// Token: 0x06002A9A RID: 10906
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamGameServer_RunCallbacks();

				// Token: 0x06002A9B RID: 10907
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				// Token: 0x06002A9C RID: 10908
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				// Token: 0x06002A9D RID: 10909
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002A9E RID: 10910
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002A9F RID: 10911
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

				// Token: 0x06002AA0 RID: 10912
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamAPI_Shutdown();

				// Token: 0x06002AA1 RID: 10913
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern void SteamGameServer_Shutdown();

				// Token: 0x06002AA2 RID: 10914
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				// Token: 0x06002AA3 RID: 10915
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				// Token: 0x06002AA4 RID: 10916
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				// Token: 0x06002AA5 RID: 10917
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				// Token: 0x06002AA6 RID: 10918
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				// Token: 0x06002AA7 RID: 10919
				[DllImport("steam_api.dll", CallingConvention = CallingConvention.Cdecl)]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
			}
		}

		// Token: 0x02000192 RID: 402
		internal class Win64 : Platform.Interface, IDisposable
		{
			// Token: 0x170000B7 RID: 183
			// (get) Token: 0x06001A06 RID: 6662 RVA: 0x000598B3 File Offset: 0x00057AB3
			public bool IsValid
			{
				get
				{
					return this._ptr != IntPtr.Zero;
				}
			}

			// Token: 0x06001A07 RID: 6663 RVA: 0x000598C5 File Offset: 0x00057AC5
			internal Win64(IntPtr pointer)
			{
				this._ptr = pointer;
			}

			// Token: 0x06001A08 RID: 6664 RVA: 0x000598D4 File Offset: 0x00057AD4
			public virtual void Dispose()
			{
				this._ptr = IntPtr.Zero;
			}

			// Token: 0x06001A09 RID: 6665 RVA: 0x000598E1 File Offset: 0x00057AE1
			public virtual HSteamPipe ISteamClient_CreateSteamPipe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_CreateSteamPipe(this._ptr);
			}

			// Token: 0x06001A0A RID: 6666 RVA: 0x0005990B File Offset: 0x00057B0B
			public virtual bool ISteamClient_BReleaseSteamPipe(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_BReleaseSteamPipe(this._ptr, hSteamPipe);
			}

			// Token: 0x06001A0B RID: 6667 RVA: 0x00059936 File Offset: 0x00057B36
			public virtual HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_ConnectToGlobalUser(this._ptr, hSteamPipe);
			}

			// Token: 0x06001A0C RID: 6668 RVA: 0x00059961 File Offset: 0x00057B61
			public virtual HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_CreateLocalUser(this._ptr, out phSteamPipe, eAccountType);
			}

			// Token: 0x06001A0D RID: 6669 RVA: 0x0005998D File Offset: 0x00057B8D
			public virtual void ISteamClient_ReleaseUser(int hSteamPipe, int hUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamClient_ReleaseUser(this._ptr, hSteamPipe, hUser);
			}

			// Token: 0x06001A0E RID: 6670 RVA: 0x000599B9 File Offset: 0x00057BB9
			public virtual IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUser(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A0F RID: 6671 RVA: 0x000599E6 File Offset: 0x00057BE6
			public virtual IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGameServer(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A10 RID: 6672 RVA: 0x00059A13 File Offset: 0x00057C13
			public virtual void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamClient_SetLocalIPBinding(this._ptr, unIP, usPort);
			}

			// Token: 0x06001A11 RID: 6673 RVA: 0x00059A3F File Offset: 0x00057C3F
			public virtual IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamFriends(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A12 RID: 6674 RVA: 0x00059A6C File Offset: 0x00057C6C
			public virtual IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUtils(this._ptr, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A13 RID: 6675 RVA: 0x00059A98 File Offset: 0x00057C98
			public virtual IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMatchmaking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A14 RID: 6676 RVA: 0x00059AC5 File Offset: 0x00057CC5
			public virtual IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMatchmakingServers(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A15 RID: 6677 RVA: 0x00059AF2 File Offset: 0x00057CF2
			public virtual IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGenericInterface(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A16 RID: 6678 RVA: 0x00059B1F File Offset: 0x00057D1F
			public virtual IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUserStats(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A17 RID: 6679 RVA: 0x00059B4C File Offset: 0x00057D4C
			public virtual IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamGameServerStats(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A18 RID: 6680 RVA: 0x00059B79 File Offset: 0x00057D79
			public virtual IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamApps(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A19 RID: 6681 RVA: 0x00059BA6 File Offset: 0x00057DA6
			public virtual IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamNetworking(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A1A RID: 6682 RVA: 0x00059BD3 File Offset: 0x00057DD3
			public virtual IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamRemoteStorage(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A1B RID: 6683 RVA: 0x00059C00 File Offset: 0x00057E00
			public virtual IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamScreenshots(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A1C RID: 6684 RVA: 0x00059C2D File Offset: 0x00057E2D
			public virtual uint ISteamClient_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetIPCCallCount(this._ptr);
			}

			// Token: 0x06001A1D RID: 6685 RVA: 0x00059C57 File Offset: 0x00057E57
			public virtual void ISteamClient_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamClient_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x06001A1E RID: 6686 RVA: 0x00059C82 File Offset: 0x00057E82
			public virtual bool ISteamClient_BShutdownIfAllPipesClosed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(this._ptr);
			}

			// Token: 0x06001A1F RID: 6687 RVA: 0x00059CAC File Offset: 0x00057EAC
			public virtual IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamHTTP(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A20 RID: 6688 RVA: 0x00059CD9 File Offset: 0x00057ED9
			public virtual IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamController(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A21 RID: 6689 RVA: 0x00059D06 File Offset: 0x00057F06
			public virtual IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamUGC(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A22 RID: 6690 RVA: 0x00059D33 File Offset: 0x00057F33
			public virtual IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamAppList(this._ptr, hSteamUser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A23 RID: 6691 RVA: 0x00059D60 File Offset: 0x00057F60
			public virtual IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMusic(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A24 RID: 6692 RVA: 0x00059D8D File Offset: 0x00057F8D
			public virtual IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamMusicRemote(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A25 RID: 6693 RVA: 0x00059DBA File Offset: 0x00057FBA
			public virtual IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamHTMLSurface(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A26 RID: 6694 RVA: 0x00059DE7 File Offset: 0x00057FE7
			public virtual IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamInventory(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A27 RID: 6695 RVA: 0x00059E14 File Offset: 0x00058014
			public virtual IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamVideo(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A28 RID: 6696 RVA: 0x00059E41 File Offset: 0x00058041
			public virtual IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamClient _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamClient_GetISteamParentalSettings(this._ptr, hSteamuser, hSteamPipe, pchVersion);
			}

			// Token: 0x06001A29 RID: 6697 RVA: 0x00059E6E File Offset: 0x0005806E
			public virtual HSteamUser ISteamUser_GetHSteamUser()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetHSteamUser(this._ptr);
			}

			// Token: 0x06001A2A RID: 6698 RVA: 0x00059E98 File Offset: 0x00058098
			public virtual bool ISteamUser_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BLoggedOn(this._ptr);
			}

			// Token: 0x06001A2B RID: 6699 RVA: 0x00059EC2 File Offset: 0x000580C2
			public virtual CSteamID ISteamUser_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetSteamID(this._ptr);
			}

			// Token: 0x06001A2C RID: 6700 RVA: 0x00059EEC File Offset: 0x000580EC
			public virtual int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_InitiateGameConnection(this._ptr, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
			}

			// Token: 0x06001A2D RID: 6701 RVA: 0x00059F1F File Offset: 0x0005811F
			public virtual void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_TerminateGameConnection(this._ptr, unIPServer, usPortServer);
			}

			// Token: 0x06001A2E RID: 6702 RVA: 0x00059F4B File Offset: 0x0005814B
			public virtual void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_TrackAppUsageEvent(this._ptr, gameID, eAppUsageEvent, pchExtraInfo);
			}

			// Token: 0x06001A2F RID: 6703 RVA: 0x00059F78 File Offset: 0x00058178
			public virtual bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetUserDataFolder(this._ptr, pchBuffer, cubBuffer);
			}

			// Token: 0x06001A30 RID: 6704 RVA: 0x00059FA4 File Offset: 0x000581A4
			public virtual void ISteamUser_StartVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_StartVoiceRecording(this._ptr);
			}

			// Token: 0x06001A31 RID: 6705 RVA: 0x00059FCE File Offset: 0x000581CE
			public virtual void ISteamUser_StopVoiceRecording()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_StopVoiceRecording(this._ptr);
			}

			// Token: 0x06001A32 RID: 6706 RVA: 0x00059FF8 File Offset: 0x000581F8
			public virtual VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetAvailableVoice(this._ptr, out pcbCompressed, out pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x06001A33 RID: 6707 RVA: 0x0005A028 File Offset: 0x00058228
			public virtual VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetVoice(this._ptr, bWantCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, out nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
			}

			// Token: 0x06001A34 RID: 6708 RVA: 0x0005A06C File Offset: 0x0005826C
			public virtual VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_DecompressVoice(this._ptr, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, out nBytesWritten, nDesiredSampleRate);
			}

			// Token: 0x06001A35 RID: 6709 RVA: 0x0005A09F File Offset: 0x0005829F
			public virtual uint ISteamUser_GetVoiceOptimalSampleRate()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(this._ptr);
			}

			// Token: 0x06001A36 RID: 6710 RVA: 0x0005A0C9 File Offset: 0x000582C9
			public virtual HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x06001A37 RID: 6711 RVA: 0x0005A0F6 File Offset: 0x000582F6
			public virtual BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x06001A38 RID: 6712 RVA: 0x0005A123 File Offset: 0x00058323
			public virtual void ISteamUser_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x06001A39 RID: 6713 RVA: 0x0005A14E File Offset: 0x0005834E
			public virtual void ISteamUser_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x06001A3A RID: 6714 RVA: 0x0005A179 File Offset: 0x00058379
			public virtual UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x06001A3B RID: 6715 RVA: 0x0005A1A5 File Offset: 0x000583A5
			public virtual bool ISteamUser_BIsBehindNAT()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsBehindNAT(this._ptr);
			}

			// Token: 0x06001A3C RID: 6716 RVA: 0x0005A1CF File Offset: 0x000583CF
			public virtual void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUser_AdvertiseGame(this._ptr, steamIDGameServer, unIPServer, usPortServer);
			}

			// Token: 0x06001A3D RID: 6717 RVA: 0x0005A1FC File Offset: 0x000583FC
			public virtual SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_RequestEncryptedAppTicket(this._ptr, pDataToInclude, cbDataToInclude);
			}

			// Token: 0x06001A3E RID: 6718 RVA: 0x0005A228 File Offset: 0x00058428
			public virtual bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetEncryptedAppTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x06001A3F RID: 6719 RVA: 0x0005A255 File Offset: 0x00058455
			public virtual int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetGameBadgeLevel(this._ptr, nSeries, bFoil);
			}

			// Token: 0x06001A40 RID: 6720 RVA: 0x0005A281 File Offset: 0x00058481
			public virtual int ISteamUser_GetPlayerSteamLevel()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_GetPlayerSteamLevel(this._ptr);
			}

			// Token: 0x06001A41 RID: 6721 RVA: 0x0005A2AB File Offset: 0x000584AB
			public virtual SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_RequestStoreAuthURL(this._ptr, pchRedirectURL);
			}

			// Token: 0x06001A42 RID: 6722 RVA: 0x0005A2D6 File Offset: 0x000584D6
			public virtual bool ISteamUser_BIsPhoneVerified()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneVerified(this._ptr);
			}

			// Token: 0x06001A43 RID: 6723 RVA: 0x0005A300 File Offset: 0x00058500
			public virtual bool ISteamUser_BIsTwoFactorEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsTwoFactorEnabled(this._ptr);
			}

			// Token: 0x06001A44 RID: 6724 RVA: 0x0005A32A File Offset: 0x0005852A
			public virtual bool ISteamUser_BIsPhoneIdentifying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneIdentifying(this._ptr);
			}

			// Token: 0x06001A45 RID: 6725 RVA: 0x0005A354 File Offset: 0x00058554
			public virtual bool ISteamUser_BIsPhoneRequiringVerification()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUser _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(this._ptr);
			}

			// Token: 0x06001A46 RID: 6726 RVA: 0x0005A37E File Offset: 0x0005857E
			public virtual IntPtr ISteamFriends_GetPersonaName()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetPersonaName(this._ptr);
			}

			// Token: 0x06001A47 RID: 6727 RVA: 0x0005A3A8 File Offset: 0x000585A8
			public virtual SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SetPersonaName(this._ptr, pchPersonaName);
			}

			// Token: 0x06001A48 RID: 6728 RVA: 0x0005A3D3 File Offset: 0x000585D3
			public virtual PersonaState ISteamFriends_GetPersonaState()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetPersonaState(this._ptr);
			}

			// Token: 0x06001A49 RID: 6729 RVA: 0x0005A3FD File Offset: 0x000585FD
			public virtual int ISteamFriends_GetFriendCount(int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCount(this._ptr, iFriendFlags);
			}

			// Token: 0x06001A4A RID: 6730 RVA: 0x0005A428 File Offset: 0x00058628
			public virtual CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendByIndex(this._ptr, iFriend, iFriendFlags);
			}

			// Token: 0x06001A4B RID: 6731 RVA: 0x0005A454 File Offset: 0x00058654
			public virtual FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRelationship(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A4C RID: 6732 RVA: 0x0005A47F File Offset: 0x0005867F
			public virtual PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaState(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A4D RID: 6733 RVA: 0x0005A4AA File Offset: 0x000586AA
			public virtual IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaName(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A4E RID: 6734 RVA: 0x0005A4D5 File Offset: 0x000586D5
			public virtual bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendGamePlayed(this._ptr, steamIDFriend, ref pFriendGameInfo);
			}

			// Token: 0x06001A4F RID: 6735 RVA: 0x0005A501 File Offset: 0x00058701
			public virtual IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(this._ptr, steamIDFriend, iPersonaName);
			}

			// Token: 0x06001A50 RID: 6736 RVA: 0x0005A52D File Offset: 0x0005872D
			public virtual int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendSteamLevel(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A51 RID: 6737 RVA: 0x0005A558 File Offset: 0x00058758
			public virtual IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetPlayerNickname(this._ptr, steamIDPlayer);
			}

			// Token: 0x06001A52 RID: 6738 RVA: 0x0005A583 File Offset: 0x00058783
			public virtual int ISteamFriends_GetFriendsGroupCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupCount(this._ptr);
			}

			// Token: 0x06001A53 RID: 6739 RVA: 0x0005A5AD File Offset: 0x000587AD
			public virtual FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(this._ptr, iFG);
			}

			// Token: 0x06001A54 RID: 6740 RVA: 0x0005A5D8 File Offset: 0x000587D8
			public virtual IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupName(this._ptr, friendsGroupID);
			}

			// Token: 0x06001A55 RID: 6741 RVA: 0x0005A603 File Offset: 0x00058803
			public virtual int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(this._ptr, friendsGroupID);
			}

			// Token: 0x06001A56 RID: 6742 RVA: 0x0005A62E File Offset: 0x0005882E
			public virtual void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(this._ptr, friendsGroupID, pOutSteamIDMembers, nMembersCount);
			}

			// Token: 0x06001A57 RID: 6743 RVA: 0x0005A65B File Offset: 0x0005885B
			public virtual bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_HasFriend(this._ptr, steamIDFriend, iFriendFlags);
			}

			// Token: 0x06001A58 RID: 6744 RVA: 0x0005A687 File Offset: 0x00058887
			public virtual int ISteamFriends_GetClanCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanCount(this._ptr);
			}

			// Token: 0x06001A59 RID: 6745 RVA: 0x0005A6B1 File Offset: 0x000588B1
			public virtual CSteamID ISteamFriends_GetClanByIndex(int iClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanByIndex(this._ptr, iClan);
			}

			// Token: 0x06001A5A RID: 6746 RVA: 0x0005A6DC File Offset: 0x000588DC
			public virtual IntPtr ISteamFriends_GetClanName(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanName(this._ptr, steamIDClan);
			}

			// Token: 0x06001A5B RID: 6747 RVA: 0x0005A707 File Offset: 0x00058907
			public virtual IntPtr ISteamFriends_GetClanTag(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanTag(this._ptr, steamIDClan);
			}

			// Token: 0x06001A5C RID: 6748 RVA: 0x0005A732 File Offset: 0x00058932
			public virtual bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanActivityCounts(this._ptr, steamIDClan, out pnOnline, out pnInGame, out pnChatting);
			}

			// Token: 0x06001A5D RID: 6749 RVA: 0x0005A761 File Offset: 0x00058961
			public virtual SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_DownloadClanActivityCounts(this._ptr, psteamIDClans, cClansToRequest);
			}

			// Token: 0x06001A5E RID: 6750 RVA: 0x0005A78D File Offset: 0x0005898D
			public virtual int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCountFromSource(this._ptr, steamIDSource);
			}

			// Token: 0x06001A5F RID: 6751 RVA: 0x0005A7B8 File Offset: 0x000589B8
			public virtual CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(this._ptr, steamIDSource, iFriend);
			}

			// Token: 0x06001A60 RID: 6752 RVA: 0x0005A7E4 File Offset: 0x000589E4
			public virtual bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsUserInSource(this._ptr, steamIDUser, steamIDSource);
			}

			// Token: 0x06001A61 RID: 6753 RVA: 0x0005A810 File Offset: 0x00058A10
			public virtual void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(this._ptr, steamIDUser, bSpeaking);
			}

			// Token: 0x06001A62 RID: 6754 RVA: 0x0005A83C File Offset: 0x00058A3C
			public virtual void ISteamFriends_ActivateGameOverlay(string pchDialog)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlay(this._ptr, pchDialog);
			}

			// Token: 0x06001A63 RID: 6755 RVA: 0x0005A867 File Offset: 0x00058A67
			public virtual void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(this._ptr, pchDialog, steamID);
			}

			// Token: 0x06001A64 RID: 6756 RVA: 0x0005A893 File Offset: 0x00058A93
			public virtual void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(this._ptr, pchURL);
			}

			// Token: 0x06001A65 RID: 6757 RVA: 0x0005A8BE File Offset: 0x00058ABE
			public virtual void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(this._ptr, nAppID, eFlag);
			}

			// Token: 0x06001A66 RID: 6758 RVA: 0x0005A8EA File Offset: 0x00058AEA
			public virtual void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_SetPlayedWith(this._ptr, steamIDUserPlayedWith);
			}

			// Token: 0x06001A67 RID: 6759 RVA: 0x0005A915 File Offset: 0x00058B15
			public virtual void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(this._ptr, steamIDLobby);
			}

			// Token: 0x06001A68 RID: 6760 RVA: 0x0005A940 File Offset: 0x00058B40
			public virtual int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetSmallFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A69 RID: 6761 RVA: 0x0005A96B File Offset: 0x00058B6B
			public virtual int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetMediumFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A6A RID: 6762 RVA: 0x0005A996 File Offset: 0x00058B96
			public virtual int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetLargeFriendAvatar(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A6B RID: 6763 RVA: 0x0005A9C1 File Offset: 0x00058BC1
			public virtual bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_RequestUserInformation(this._ptr, steamIDUser, bRequireNameOnly);
			}

			// Token: 0x06001A6C RID: 6764 RVA: 0x0005A9ED File Offset: 0x00058BED
			public virtual SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_RequestClanOfficerList(this._ptr, steamIDClan);
			}

			// Token: 0x06001A6D RID: 6765 RVA: 0x0005AA18 File Offset: 0x00058C18
			public virtual CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOwner(this._ptr, steamIDClan);
			}

			// Token: 0x06001A6E RID: 6766 RVA: 0x0005AA43 File Offset: 0x00058C43
			public virtual int ISteamFriends_GetClanOfficerCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOfficerCount(this._ptr, steamIDClan);
			}

			// Token: 0x06001A6F RID: 6767 RVA: 0x0005AA6E File Offset: 0x00058C6E
			public virtual CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanOfficerByIndex(this._ptr, steamIDClan, iOfficer);
			}

			// Token: 0x06001A70 RID: 6768 RVA: 0x0005AA9A File Offset: 0x00058C9A
			public virtual uint ISteamFriends_GetUserRestrictions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetUserRestrictions(this._ptr);
			}

			// Token: 0x06001A71 RID: 6769 RVA: 0x0005AAC4 File Offset: 0x00058CC4
			public virtual bool ISteamFriends_SetRichPresence(string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SetRichPresence(this._ptr, pchKey, pchValue);
			}

			// Token: 0x06001A72 RID: 6770 RVA: 0x0005AAF0 File Offset: 0x00058CF0
			public virtual void ISteamFriends_ClearRichPresence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_ClearRichPresence(this._ptr);
			}

			// Token: 0x06001A73 RID: 6771 RVA: 0x0005AB1A File Offset: 0x00058D1A
			public virtual IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresence(this._ptr, steamIDFriend, pchKey);
			}

			// Token: 0x06001A74 RID: 6772 RVA: 0x0005AB46 File Offset: 0x00058D46
			public virtual int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A75 RID: 6773 RVA: 0x0005AB71 File Offset: 0x00058D71
			public virtual IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(this._ptr, steamIDFriend, iKey);
			}

			// Token: 0x06001A76 RID: 6774 RVA: 0x0005AB9D File Offset: 0x00058D9D
			public virtual void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamFriends_RequestFriendRichPresence(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A77 RID: 6775 RVA: 0x0005ABC8 File Offset: 0x00058DC8
			public virtual bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_InviteUserToGame(this._ptr, steamIDFriend, pchConnectString);
			}

			// Token: 0x06001A78 RID: 6776 RVA: 0x0005ABF4 File Offset: 0x00058DF4
			public virtual int ISteamFriends_GetCoplayFriendCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetCoplayFriendCount(this._ptr);
			}

			// Token: 0x06001A79 RID: 6777 RVA: 0x0005AC1E File Offset: 0x00058E1E
			public virtual CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetCoplayFriend(this._ptr, iCoplayFriend);
			}

			// Token: 0x06001A7A RID: 6778 RVA: 0x0005AC49 File Offset: 0x00058E49
			public virtual int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCoplayTime(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A7B RID: 6779 RVA: 0x0005AC74 File Offset: 0x00058E74
			public virtual AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendCoplayGame(this._ptr, steamIDFriend);
			}

			// Token: 0x06001A7C RID: 6780 RVA: 0x0005AC9F File Offset: 0x00058E9F
			public virtual SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_JoinClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x06001A7D RID: 6781 RVA: 0x0005ACCA File Offset: 0x00058ECA
			public virtual bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_LeaveClanChatRoom(this._ptr, steamIDClan);
			}

			// Token: 0x06001A7E RID: 6782 RVA: 0x0005ACF5 File Offset: 0x00058EF5
			public virtual int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanChatMemberCount(this._ptr, steamIDClan);
			}

			// Token: 0x06001A7F RID: 6783 RVA: 0x0005AD20 File Offset: 0x00058F20
			public virtual CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetChatMemberByIndex(this._ptr, steamIDClan, iUser);
			}

			// Token: 0x06001A80 RID: 6784 RVA: 0x0005AD4C File Offset: 0x00058F4C
			public virtual bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SendClanChatMessage(this._ptr, steamIDClanChat, pchText);
			}

			// Token: 0x06001A81 RID: 6785 RVA: 0x0005AD78 File Offset: 0x00058F78
			public virtual int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetClanChatMessage(this._ptr, steamIDClanChat, iMessage, prgchText, cchTextMax, out peChatEntryType, out psteamidChatter);
			}

			// Token: 0x06001A82 RID: 6786 RVA: 0x0005ADAB File Offset: 0x00058FAB
			public virtual bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanChatAdmin(this._ptr, steamIDClanChat, steamIDUser);
			}

			// Token: 0x06001A83 RID: 6787 RVA: 0x0005ADD7 File Offset: 0x00058FD7
			public virtual bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001A84 RID: 6788 RVA: 0x0005AE02 File Offset: 0x00059002
			public virtual bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001A85 RID: 6789 RVA: 0x0005AE2D File Offset: 0x0005902D
			public virtual bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(this._ptr, steamIDClanChat);
			}

			// Token: 0x06001A86 RID: 6790 RVA: 0x0005AE58 File Offset: 0x00059058
			public virtual bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_SetListenForFriendsMessages(this._ptr, bInterceptEnabled);
			}

			// Token: 0x06001A87 RID: 6791 RVA: 0x0005AE83 File Offset: 0x00059083
			public virtual bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_ReplyToFriendMessage(this._ptr, steamIDFriend, pchMsgToSend);
			}

			// Token: 0x06001A88 RID: 6792 RVA: 0x0005AEAF File Offset: 0x000590AF
			public virtual int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFriendMessage(this._ptr, steamIDFriend, iMessageID, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001A89 RID: 6793 RVA: 0x0005AEE0 File Offset: 0x000590E0
			public virtual SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_GetFollowerCount(this._ptr, steamID);
			}

			// Token: 0x06001A8A RID: 6794 RVA: 0x0005AF0B File Offset: 0x0005910B
			public virtual SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsFollowing(this._ptr, steamID);
			}

			// Token: 0x06001A8B RID: 6795 RVA: 0x0005AF36 File Offset: 0x00059136
			public virtual SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_EnumerateFollowingList(this._ptr, unStartIndex);
			}

			// Token: 0x06001A8C RID: 6796 RVA: 0x0005AF61 File Offset: 0x00059161
			public virtual bool ISteamFriends_IsClanPublic(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanPublic(this._ptr, steamIDClan);
			}

			// Token: 0x06001A8D RID: 6797 RVA: 0x0005AF8C File Offset: 0x0005918C
			public virtual bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamFriends _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(this._ptr, steamIDClan);
			}

			// Token: 0x06001A8E RID: 6798 RVA: 0x0005AFB7 File Offset: 0x000591B7
			public virtual uint ISteamUtils_GetSecondsSinceAppActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(this._ptr);
			}

			// Token: 0x06001A8F RID: 6799 RVA: 0x0005AFE1 File Offset: 0x000591E1
			public virtual uint ISteamUtils_GetSecondsSinceComputerActive()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(this._ptr);
			}

			// Token: 0x06001A90 RID: 6800 RVA: 0x0005B00B File Offset: 0x0005920B
			public virtual Universe ISteamUtils_GetConnectedUniverse()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetConnectedUniverse(this._ptr);
			}

			// Token: 0x06001A91 RID: 6801 RVA: 0x0005B035 File Offset: 0x00059235
			public virtual uint ISteamUtils_GetServerRealTime()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetServerRealTime(this._ptr);
			}

			// Token: 0x06001A92 RID: 6802 RVA: 0x0005B05F File Offset: 0x0005925F
			public virtual IntPtr ISteamUtils_GetIPCountry()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetIPCountry(this._ptr);
			}

			// Token: 0x06001A93 RID: 6803 RVA: 0x0005B089 File Offset: 0x00059289
			public virtual bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetImageSize(this._ptr, iImage, out pnWidth, out pnHeight);
			}

			// Token: 0x06001A94 RID: 6804 RVA: 0x0005B0B6 File Offset: 0x000592B6
			public virtual bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetImageRGBA(this._ptr, iImage, pubDest, nDestBufferSize);
			}

			// Token: 0x06001A95 RID: 6805 RVA: 0x0005B0E3 File Offset: 0x000592E3
			public virtual bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetCSERIPPort(this._ptr, out unIP, out usPort);
			}

			// Token: 0x06001A96 RID: 6806 RVA: 0x0005B10F File Offset: 0x0005930F
			public virtual byte ISteamUtils_GetCurrentBatteryPower()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetCurrentBatteryPower(this._ptr);
			}

			// Token: 0x06001A97 RID: 6807 RVA: 0x0005B139 File Offset: 0x00059339
			public virtual uint ISteamUtils_GetAppID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAppID(this._ptr);
			}

			// Token: 0x06001A98 RID: 6808 RVA: 0x0005B163 File Offset: 0x00059363
			public virtual void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(this._ptr, eNotificationPosition);
			}

			// Token: 0x06001A99 RID: 6809 RVA: 0x0005B18E File Offset: 0x0005938E
			public virtual bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsAPICallCompleted(this._ptr, hSteamAPICall, ref pbFailed);
			}

			// Token: 0x06001A9A RID: 6810 RVA: 0x0005B1BA File Offset: 0x000593BA
			public virtual SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAPICallFailureReason(this._ptr, hSteamAPICall);
			}

			// Token: 0x06001A9B RID: 6811 RVA: 0x0005B1E5 File Offset: 0x000593E5
			public virtual bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetAPICallResult(this._ptr, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
			}

			// Token: 0x06001A9C RID: 6812 RVA: 0x0005B216 File Offset: 0x00059416
			public virtual uint ISteamUtils_GetIPCCallCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetIPCCallCount(this._ptr);
			}

			// Token: 0x06001A9D RID: 6813 RVA: 0x0005B240 File Offset: 0x00059440
			public virtual void ISteamUtils_SetWarningMessageHook(IntPtr pFunction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetWarningMessageHook(this._ptr, pFunction);
			}

			// Token: 0x06001A9E RID: 6814 RVA: 0x0005B26B File Offset: 0x0005946B
			public virtual bool ISteamUtils_IsOverlayEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsOverlayEnabled(this._ptr);
			}

			// Token: 0x06001A9F RID: 6815 RVA: 0x0005B295 File Offset: 0x00059495
			public virtual bool ISteamUtils_BOverlayNeedsPresent()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_BOverlayNeedsPresent(this._ptr);
			}

			// Token: 0x06001AA0 RID: 6816 RVA: 0x0005B2BF File Offset: 0x000594BF
			public virtual SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_CheckFileSignature(this._ptr, szFileName);
			}

			// Token: 0x06001AA1 RID: 6817 RVA: 0x0005B2EA File Offset: 0x000594EA
			public virtual bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_ShowGamepadTextInput(this._ptr, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
			}

			// Token: 0x06001AA2 RID: 6818 RVA: 0x0005B31B File Offset: 0x0005951B
			public virtual uint ISteamUtils_GetEnteredGamepadTextLength()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(this._ptr);
			}

			// Token: 0x06001AA3 RID: 6819 RVA: 0x0005B345 File Offset: 0x00059545
			public virtual bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(this._ptr, pchText, cchText);
			}

			// Token: 0x06001AA4 RID: 6820 RVA: 0x0005B371 File Offset: 0x00059571
			public virtual IntPtr ISteamUtils_GetSteamUILanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_GetSteamUILanguage(this._ptr);
			}

			// Token: 0x06001AA5 RID: 6821 RVA: 0x0005B39B File Offset: 0x0005959B
			public virtual bool ISteamUtils_IsSteamRunningInVR()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsSteamRunningInVR(this._ptr);
			}

			// Token: 0x06001AA6 RID: 6822 RVA: 0x0005B3C5 File Offset: 0x000595C5
			public virtual void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetOverlayNotificationInset(this._ptr, nHorizontalInset, nVerticalInset);
			}

			// Token: 0x06001AA7 RID: 6823 RVA: 0x0005B3F1 File Offset: 0x000595F1
			public virtual bool ISteamUtils_IsSteamInBigPictureMode()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(this._ptr);
			}

			// Token: 0x06001AA8 RID: 6824 RVA: 0x0005B41B File Offset: 0x0005961B
			public virtual void ISteamUtils_StartVRDashboard()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_StartVRDashboard(this._ptr);
			}

			// Token: 0x06001AA9 RID: 6825 RVA: 0x0005B445 File Offset: 0x00059645
			public virtual bool ISteamUtils_IsVRHeadsetStreamingEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(this._ptr);
			}

			// Token: 0x06001AAA RID: 6826 RVA: 0x0005B46F File Offset: 0x0005966F
			public virtual void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUtils _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(this._ptr, bEnabled);
			}

			// Token: 0x06001AAB RID: 6827 RVA: 0x0005B49A File Offset: 0x0005969A
			public virtual int ISteamMatchmaking_GetFavoriteGameCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(this._ptr);
			}

			// Token: 0x06001AAC RID: 6828 RVA: 0x0005B4C4 File Offset: 0x000596C4
			public virtual bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetFavoriteGame(this._ptr, iGame, ref pnAppID, out pnIP, out pnConnPort, out pnQueryPort, out punFlags, out pRTime32LastPlayedOnServer);
			}

			// Token: 0x06001AAD RID: 6829 RVA: 0x0005B4F9 File Offset: 0x000596F9
			public virtual int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
			}

			// Token: 0x06001AAE RID: 6830 RVA: 0x0005B52C File Offset: 0x0005972C
			public virtual bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(this._ptr, nAppID, nIP, nConnPort, nQueryPort, unFlags);
			}

			// Token: 0x06001AAF RID: 6831 RVA: 0x0005B55D File Offset: 0x0005975D
			public virtual SteamAPICall_t ISteamMatchmaking_RequestLobbyList()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyList(this._ptr);
			}

			// Token: 0x06001AB0 RID: 6832 RVA: 0x0005B587 File Offset: 0x00059787
			public virtual void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(this._ptr, pchKeyToMatch, pchValueToMatch, eComparisonType);
			}

			// Token: 0x06001AB1 RID: 6833 RVA: 0x0005B5B4 File Offset: 0x000597B4
			public virtual void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(this._ptr, pchKeyToMatch, nValueToMatch, eComparisonType);
			}

			// Token: 0x06001AB2 RID: 6834 RVA: 0x0005B5E1 File Offset: 0x000597E1
			public virtual void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(this._ptr, pchKeyToMatch, nValueToBeCloseTo);
			}

			// Token: 0x06001AB3 RID: 6835 RVA: 0x0005B60D File Offset: 0x0005980D
			public virtual void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(this._ptr, nSlotsAvailable);
			}

			// Token: 0x06001AB4 RID: 6836 RVA: 0x0005B638 File Offset: 0x00059838
			public virtual void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(this._ptr, eLobbyDistanceFilter);
			}

			// Token: 0x06001AB5 RID: 6837 RVA: 0x0005B663 File Offset: 0x00059863
			public virtual void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(this._ptr, cMaxResults);
			}

			// Token: 0x06001AB6 RID: 6838 RVA: 0x0005B68E File Offset: 0x0005988E
			public virtual void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(this._ptr, steamIDLobby);
			}

			// Token: 0x06001AB7 RID: 6839 RVA: 0x0005B6B9 File Offset: 0x000598B9
			public virtual CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(this._ptr, iLobby);
			}

			// Token: 0x06001AB8 RID: 6840 RVA: 0x0005B6E4 File Offset: 0x000598E4
			public virtual SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_CreateLobby(this._ptr, eLobbyType, cMaxMembers);
			}

			// Token: 0x06001AB9 RID: 6841 RVA: 0x0005B710 File Offset: 0x00059910
			public virtual SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_JoinLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x06001ABA RID: 6842 RVA: 0x0005B73B File Offset: 0x0005993B
			public virtual void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_LeaveLobby(this._ptr, steamIDLobby);
			}

			// Token: 0x06001ABB RID: 6843 RVA: 0x0005B766 File Offset: 0x00059966
			public virtual bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_InviteUserToLobby(this._ptr, steamIDLobby, steamIDInvitee);
			}

			// Token: 0x06001ABC RID: 6844 RVA: 0x0005B792 File Offset: 0x00059992
			public virtual int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(this._ptr, steamIDLobby);
			}

			// Token: 0x06001ABD RID: 6845 RVA: 0x0005B7BD File Offset: 0x000599BD
			public virtual CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(this._ptr, steamIDLobby, iMember);
			}

			// Token: 0x06001ABE RID: 6846 RVA: 0x0005B7E9 File Offset: 0x000599E9
			public virtual IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06001ABF RID: 6847 RVA: 0x0005B815 File Offset: 0x00059A15
			public virtual bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001AC0 RID: 6848 RVA: 0x0005B842 File Offset: 0x00059A42
			public virtual int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(this._ptr, steamIDLobby);
			}

			// Token: 0x06001AC1 RID: 6849 RVA: 0x0005B86D File Offset: 0x00059A6D
			public virtual bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(this._ptr, steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
			}

			// Token: 0x06001AC2 RID: 6850 RVA: 0x0005B8A0 File Offset: 0x00059AA0
			public virtual bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_DeleteLobbyData(this._ptr, steamIDLobby, pchKey);
			}

			// Token: 0x06001AC3 RID: 6851 RVA: 0x0005B8CC File Offset: 0x00059ACC
			public virtual IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(this._ptr, steamIDLobby, steamIDUser, pchKey);
			}

			// Token: 0x06001AC4 RID: 6852 RVA: 0x0005B8F9 File Offset: 0x00059AF9
			public virtual void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(this._ptr, steamIDLobby, pchKey, pchValue);
			}

			// Token: 0x06001AC5 RID: 6853 RVA: 0x0005B926 File Offset: 0x00059B26
			public virtual bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(this._ptr, steamIDLobby, pvMsgBody, cubMsgBody);
			}

			// Token: 0x06001AC6 RID: 6854 RVA: 0x0005B953 File Offset: 0x00059B53
			public virtual int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(this._ptr, steamIDLobby, iChatID, out pSteamIDUser, pvData, cubData, out peChatEntryType);
			}

			// Token: 0x06001AC7 RID: 6855 RVA: 0x0005B986 File Offset: 0x00059B86
			public virtual bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_RequestLobbyData(this._ptr, steamIDLobby);
			}

			// Token: 0x06001AC8 RID: 6856 RVA: 0x0005B9B1 File Offset: 0x00059BB1
			public virtual void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(this._ptr, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
			}

			// Token: 0x06001AC9 RID: 6857 RVA: 0x0005B9E0 File Offset: 0x00059BE0
			public virtual bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(this._ptr, steamIDLobby, out punGameServerIP, out punGameServerPort, out psteamIDGameServer);
			}

			// Token: 0x06001ACA RID: 6858 RVA: 0x0005BA0F File Offset: 0x00059C0F
			public virtual bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(this._ptr, steamIDLobby, cMaxMembers);
			}

			// Token: 0x06001ACB RID: 6859 RVA: 0x0005BA3B File Offset: 0x00059C3B
			public virtual int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(this._ptr, steamIDLobby);
			}

			// Token: 0x06001ACC RID: 6860 RVA: 0x0005BA66 File Offset: 0x00059C66
			public virtual bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyType(this._ptr, steamIDLobby, eLobbyType);
			}

			// Token: 0x06001ACD RID: 6861 RVA: 0x0005BA92 File Offset: 0x00059C92
			public virtual bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(this._ptr, steamIDLobby, bLobbyJoinable);
			}

			// Token: 0x06001ACE RID: 6862 RVA: 0x0005BABE File Offset: 0x00059CBE
			public virtual CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_GetLobbyOwner(this._ptr, steamIDLobby);
			}

			// Token: 0x06001ACF RID: 6863 RVA: 0x0005BAE9 File Offset: 0x00059CE9
			public virtual bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLobbyOwner(this._ptr, steamIDLobby, steamIDNewOwner);
			}

			// Token: 0x06001AD0 RID: 6864 RVA: 0x0005BB15 File Offset: 0x00059D15
			public virtual bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmaking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmaking_SetLinkedLobby(this._ptr, steamIDLobby, steamIDLobbyDependent);
			}

			// Token: 0x06001AD1 RID: 6865 RVA: 0x0005BB41 File Offset: 0x00059D41
			public virtual HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001AD2 RID: 6866 RVA: 0x0005BB70 File Offset: 0x00059D70
			public virtual HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestLANServerList(this._ptr, iApp, pRequestServersResponse);
			}

			// Token: 0x06001AD3 RID: 6867 RVA: 0x0005BB9C File Offset: 0x00059D9C
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001AD4 RID: 6868 RVA: 0x0005BBCB File Offset: 0x00059DCB
			public virtual HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001AD5 RID: 6869 RVA: 0x0005BBFA File Offset: 0x00059DFA
			public virtual HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001AD6 RID: 6870 RVA: 0x0005BC29 File Offset: 0x00059E29
			public virtual HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(this._ptr, iApp, ppchFilters, nFilters, pRequestServersResponse);
			}

			// Token: 0x06001AD7 RID: 6871 RVA: 0x0005BC58 File Offset: 0x00059E58
			public virtual void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(this._ptr, hServerListRequest);
			}

			// Token: 0x06001AD8 RID: 6872 RVA: 0x0005BC83 File Offset: 0x00059E83
			public virtual IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_GetServerDetails(this._ptr, hRequest, iServer);
			}

			// Token: 0x06001AD9 RID: 6873 RVA: 0x0005BCAF File Offset: 0x00059EAF
			public virtual void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_CancelQuery(this._ptr, hRequest);
			}

			// Token: 0x06001ADA RID: 6874 RVA: 0x0005BCDA File Offset: 0x00059EDA
			public virtual void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RefreshQuery(this._ptr, hRequest);
			}

			// Token: 0x06001ADB RID: 6875 RVA: 0x0005BD05 File Offset: 0x00059F05
			public virtual bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_IsRefreshing(this._ptr, hRequest);
			}

			// Token: 0x06001ADC RID: 6876 RVA: 0x0005BD30 File Offset: 0x00059F30
			public virtual int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_GetServerCount(this._ptr, hRequest);
			}

			// Token: 0x06001ADD RID: 6877 RVA: 0x0005BD5B File Offset: 0x00059F5B
			public virtual void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_RefreshServer(this._ptr, hRequest, iServer);
			}

			// Token: 0x06001ADE RID: 6878 RVA: 0x0005BD87 File Offset: 0x00059F87
			public virtual HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_PingServer(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001ADF RID: 6879 RVA: 0x0005BDB4 File Offset: 0x00059FB4
			public virtual HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_PlayerDetails(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001AE0 RID: 6880 RVA: 0x0005BDE1 File Offset: 0x00059FE1
			public virtual HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_ServerRules(this._ptr, unIP, usPort, pRequestServersResponse);
			}

			// Token: 0x06001AE1 RID: 6881 RVA: 0x0005BE0E File Offset: 0x0005A00E
			public virtual void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMatchmakingServers _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(this._ptr, hServerQuery);
			}

			// Token: 0x06001AE2 RID: 6882 RVA: 0x0005BE39 File Offset: 0x0005A039
			public virtual bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWrite(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06001AE3 RID: 6883 RVA: 0x0005BE66 File Offset: 0x0005A066
			public virtual int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileRead(this._ptr, pchFile, pvData, cubDataToRead);
			}

			// Token: 0x06001AE4 RID: 6884 RVA: 0x0005BE93 File Offset: 0x0005A093
			public virtual SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteAsync(this._ptr, pchFile, pvData, cubData);
			}

			// Token: 0x06001AE5 RID: 6885 RVA: 0x0005BEC0 File Offset: 0x0005A0C0
			public virtual SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsync(this._ptr, pchFile, nOffset, cubToRead);
			}

			// Token: 0x06001AE6 RID: 6886 RVA: 0x0005BEED File Offset: 0x0005A0ED
			public virtual bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(this._ptr, hReadCall, pvBuffer, cubToRead);
			}

			// Token: 0x06001AE7 RID: 6887 RVA: 0x0005BF1A File Offset: 0x0005A11A
			public virtual bool ISteamRemoteStorage_FileForget(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileForget(this._ptr, pchFile);
			}

			// Token: 0x06001AE8 RID: 6888 RVA: 0x0005BF45 File Offset: 0x0005A145
			public virtual bool ISteamRemoteStorage_FileDelete(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileDelete(this._ptr, pchFile);
			}

			// Token: 0x06001AE9 RID: 6889 RVA: 0x0005BF70 File Offset: 0x0005A170
			public virtual SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileShare(this._ptr, pchFile);
			}

			// Token: 0x06001AEA RID: 6890 RVA: 0x0005BF9B File Offset: 0x0005A19B
			public virtual bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(this._ptr, pchFile, eRemoteStoragePlatform);
			}

			// Token: 0x06001AEB RID: 6891 RVA: 0x0005BFC7 File Offset: 0x0005A1C7
			public virtual UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(this._ptr, pchFile);
			}

			// Token: 0x06001AEC RID: 6892 RVA: 0x0005BFF2 File Offset: 0x0005A1F2
			public virtual bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(this._ptr, writeHandle, pvData, cubData);
			}

			// Token: 0x06001AED RID: 6893 RVA: 0x0005C01F File Offset: 0x0005A21F
			public virtual bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(this._ptr, writeHandle);
			}

			// Token: 0x06001AEE RID: 6894 RVA: 0x0005C04A File Offset: 0x0005A24A
			public virtual bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(this._ptr, writeHandle);
			}

			// Token: 0x06001AEF RID: 6895 RVA: 0x0005C075 File Offset: 0x0005A275
			public virtual bool ISteamRemoteStorage_FileExists(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FileExists(this._ptr, pchFile);
			}

			// Token: 0x06001AF0 RID: 6896 RVA: 0x0005C0A0 File Offset: 0x0005A2A0
			public virtual bool ISteamRemoteStorage_FilePersisted(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_FilePersisted(this._ptr, pchFile);
			}

			// Token: 0x06001AF1 RID: 6897 RVA: 0x0005C0CB File Offset: 0x0005A2CB
			public virtual int ISteamRemoteStorage_GetFileSize(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileSize(this._ptr, pchFile);
			}

			// Token: 0x06001AF2 RID: 6898 RVA: 0x0005C0F6 File Offset: 0x0005A2F6
			public virtual long ISteamRemoteStorage_GetFileTimestamp(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(this._ptr, pchFile);
			}

			// Token: 0x06001AF3 RID: 6899 RVA: 0x0005C121 File Offset: 0x0005A321
			public virtual RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(this._ptr, pchFile);
			}

			// Token: 0x06001AF4 RID: 6900 RVA: 0x0005C14C File Offset: 0x0005A34C
			public virtual int ISteamRemoteStorage_GetFileCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileCount(this._ptr);
			}

			// Token: 0x06001AF5 RID: 6901 RVA: 0x0005C176 File Offset: 0x0005A376
			public virtual IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(this._ptr, iFile, out pnFileSizeInBytes);
			}

			// Token: 0x06001AF6 RID: 6902 RVA: 0x0005C1A2 File Offset: 0x0005A3A2
			public virtual bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetQuota(this._ptr, out pnTotalBytes, out puAvailableBytes);
			}

			// Token: 0x06001AF7 RID: 6903 RVA: 0x0005C1CE File Offset: 0x0005A3CE
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForAccount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(this._ptr);
			}

			// Token: 0x06001AF8 RID: 6904 RVA: 0x0005C1F8 File Offset: 0x0005A3F8
			public virtual bool ISteamRemoteStorage_IsCloudEnabledForApp()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(this._ptr);
			}

			// Token: 0x06001AF9 RID: 6905 RVA: 0x0005C222 File Offset: 0x0005A422
			public virtual void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(this._ptr, bEnabled);
			}

			// Token: 0x06001AFA RID: 6906 RVA: 0x0005C24D File Offset: 0x0005A44D
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCDownload(this._ptr, hContent, unPriority);
			}

			// Token: 0x06001AFB RID: 6907 RVA: 0x0005C279 File Offset: 0x0005A479
			public virtual bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(this._ptr, hContent, out pnBytesDownloaded, out pnBytesExpected);
			}

			// Token: 0x06001AFC RID: 6908 RVA: 0x0005C2A6 File Offset: 0x0005A4A6
			public virtual bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUGCDetails(this._ptr, hContent, ref pnAppID, ppchName, out pnFileSizeInBytes, out pSteamIDOwner);
			}

			// Token: 0x06001AFD RID: 6909 RVA: 0x0005C2D7 File Offset: 0x0005A4D7
			public virtual int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCRead(this._ptr, hContent, pvData, cubDataToRead, cOffset, eAction);
			}

			// Token: 0x06001AFE RID: 6910 RVA: 0x0005C308 File Offset: 0x0005A508
			public virtual int ISteamRemoteStorage_GetCachedUGCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(this._ptr);
			}

			// Token: 0x06001AFF RID: 6911 RVA: 0x0005C332 File Offset: 0x0005A532
			public virtual UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(this._ptr, iCachedContent);
			}

			// Token: 0x06001B00 RID: 6912 RVA: 0x0005C360 File Offset: 0x0005A560
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(this._ptr, pchFile, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags, eWorkshopFileType);
			}

			// Token: 0x06001B01 RID: 6913 RVA: 0x0005C3A2 File Offset: 0x0005A5A2
			public virtual PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001B02 RID: 6914 RVA: 0x0005C3CD File Offset: 0x0005A5CD
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(this._ptr, updateHandle, pchFile);
			}

			// Token: 0x06001B03 RID: 6915 RVA: 0x0005C3F9 File Offset: 0x0005A5F9
			public virtual bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(this._ptr, updateHandle, pchPreviewFile);
			}

			// Token: 0x06001B04 RID: 6916 RVA: 0x0005C425 File Offset: 0x0005A625
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(this._ptr, updateHandle, pchTitle);
			}

			// Token: 0x06001B05 RID: 6917 RVA: 0x0005C451 File Offset: 0x0005A651
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(this._ptr, updateHandle, pchDescription);
			}

			// Token: 0x06001B06 RID: 6918 RVA: 0x0005C47D File Offset: 0x0005A67D
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(this._ptr, updateHandle, eVisibility);
			}

			// Token: 0x06001B07 RID: 6919 RVA: 0x0005C4A9 File Offset: 0x0005A6A9
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(this._ptr, updateHandle, ref pTags);
			}

			// Token: 0x06001B08 RID: 6920 RVA: 0x0005C4D5 File Offset: 0x0005A6D5
			public virtual SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(this._ptr, updateHandle);
			}

			// Token: 0x06001B09 RID: 6921 RVA: 0x0005C500 File Offset: 0x0005A700
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(this._ptr, unPublishedFileId, unMaxSecondsOld);
			}

			// Token: 0x06001B0A RID: 6922 RVA: 0x0005C52C File Offset: 0x0005A72C
			public virtual SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001B0B RID: 6923 RVA: 0x0005C557 File Offset: 0x0005A757
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x06001B0C RID: 6924 RVA: 0x0005C582 File Offset: 0x0005A782
			public virtual SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001B0D RID: 6925 RVA: 0x0005C5AD File Offset: 0x0005A7AD
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(this._ptr, unStartIndex);
			}

			// Token: 0x06001B0E RID: 6926 RVA: 0x0005C5D8 File Offset: 0x0005A7D8
			public virtual SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001B0F RID: 6927 RVA: 0x0005C603 File Offset: 0x0005A803
			public virtual bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(this._ptr, updateHandle, pchChangeDescription);
			}

			// Token: 0x06001B10 RID: 6928 RVA: 0x0005C62F File Offset: 0x0005A82F
			public virtual SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001B11 RID: 6929 RVA: 0x0005C65A File Offset: 0x0005A85A
			public virtual SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(this._ptr, unPublishedFileId, bVoteUp);
			}

			// Token: 0x06001B12 RID: 6930 RVA: 0x0005C686 File Offset: 0x0005A886
			public virtual SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(this._ptr, unPublishedFileId);
			}

			// Token: 0x06001B13 RID: 6931 RVA: 0x0005C6B1 File Offset: 0x0005A8B1
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(this._ptr, steamId, unStartIndex, ref pRequiredTags, ref pExcludedTags);
			}

			// Token: 0x06001B14 RID: 6932 RVA: 0x0005C6E0 File Offset: 0x0005A8E0
			public virtual SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_PublishVideo(this._ptr, eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId, pchTitle, pchDescription, eVisibility, ref pTags);
			}

			// Token: 0x06001B15 RID: 6933 RVA: 0x0005C724 File Offset: 0x0005A924
			public virtual SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(this._ptr, unPublishedFileId, eAction);
			}

			// Token: 0x06001B16 RID: 6934 RVA: 0x0005C750 File Offset: 0x0005A950
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(this._ptr, eAction, unStartIndex);
			}

			// Token: 0x06001B17 RID: 6935 RVA: 0x0005C77C File Offset: 0x0005A97C
			public virtual SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(this._ptr, eEnumerationType, unStartIndex, unCount, unDays, ref pTags, ref pUserTags);
			}

			// Token: 0x06001B18 RID: 6936 RVA: 0x0005C7AF File Offset: 0x0005A9AF
			public virtual SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamRemoteStorage _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(this._ptr, hContent, pchLocation, unPriority);
			}

			// Token: 0x06001B19 RID: 6937 RVA: 0x0005C7DC File Offset: 0x0005A9DC
			public virtual bool ISteamUserStats_RequestCurrentStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestCurrentStats(this._ptr);
			}

			// Token: 0x06001B1A RID: 6938 RVA: 0x0005C806 File Offset: 0x0005AA06
			public virtual bool ISteamUserStats_GetStat(string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetStat(this._ptr, pchName, out pData);
			}

			// Token: 0x06001B1B RID: 6939 RVA: 0x0005C832 File Offset: 0x0005AA32
			public virtual bool ISteamUserStats_GetStat0(string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetStat0(this._ptr, pchName, out pData);
			}

			// Token: 0x06001B1C RID: 6940 RVA: 0x0005C85E File Offset: 0x0005AA5E
			public virtual bool ISteamUserStats_SetStat(string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetStat(this._ptr, pchName, nData);
			}

			// Token: 0x06001B1D RID: 6941 RVA: 0x0005C88A File Offset: 0x0005AA8A
			public virtual bool ISteamUserStats_SetStat0(string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetStat0(this._ptr, pchName, fData);
			}

			// Token: 0x06001B1E RID: 6942 RVA: 0x0005C8B6 File Offset: 0x0005AAB6
			public virtual bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_UpdateAvgRateStat(this._ptr, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x06001B1F RID: 6943 RVA: 0x0005C8E3 File Offset: 0x0005AAE3
			public virtual bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievement(this._ptr, pchName, ref pbAchieved);
			}

			// Token: 0x06001B20 RID: 6944 RVA: 0x0005C90F File Offset: 0x0005AB0F
			public virtual bool ISteamUserStats_SetAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_SetAchievement(this._ptr, pchName);
			}

			// Token: 0x06001B21 RID: 6945 RVA: 0x0005C93A File Offset: 0x0005AB3A
			public virtual bool ISteamUserStats_ClearAchievement(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_ClearAchievement(this._ptr, pchName);
			}

			// Token: 0x06001B22 RID: 6946 RVA: 0x0005C965 File Offset: 0x0005AB65
			public virtual bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(this._ptr, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x06001B23 RID: 6947 RVA: 0x0005C992 File Offset: 0x0005AB92
			public virtual bool ISteamUserStats_StoreStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_StoreStats(this._ptr);
			}

			// Token: 0x06001B24 RID: 6948 RVA: 0x0005C9BC File Offset: 0x0005ABBC
			public virtual int ISteamUserStats_GetAchievementIcon(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementIcon(this._ptr, pchName);
			}

			// Token: 0x06001B25 RID: 6949 RVA: 0x0005C9E7 File Offset: 0x0005ABE7
			public virtual IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(this._ptr, pchName, pchKey);
			}

			// Token: 0x06001B26 RID: 6950 RVA: 0x0005CA13 File Offset: 0x0005AC13
			public virtual bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_IndicateAchievementProgress(this._ptr, pchName, nCurProgress, nMaxProgress);
			}

			// Token: 0x06001B27 RID: 6951 RVA: 0x0005CA40 File Offset: 0x0005AC40
			public virtual uint ISteamUserStats_GetNumAchievements()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNumAchievements(this._ptr);
			}

			// Token: 0x06001B28 RID: 6952 RVA: 0x0005CA6A File Offset: 0x0005AC6A
			public virtual IntPtr ISteamUserStats_GetAchievementName(uint iAchievement)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementName(this._ptr, iAchievement);
			}

			// Token: 0x06001B29 RID: 6953 RVA: 0x0005CA95 File Offset: 0x0005AC95
			public virtual SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x06001B2A RID: 6954 RVA: 0x0005CAC0 File Offset: 0x0005ACC0
			public virtual bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x06001B2B RID: 6955 RVA: 0x0005CAED File Offset: 0x0005ACED
			public virtual bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x06001B2C RID: 6956 RVA: 0x0005CB1A File Offset: 0x0005AD1A
			public virtual bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x06001B2D RID: 6957 RVA: 0x0005CB47 File Offset: 0x0005AD47
			public virtual bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(this._ptr, steamIDUser, pchName, ref pbAchieved, out punUnlockTime);
			}

			// Token: 0x06001B2E RID: 6958 RVA: 0x0005CB76 File Offset: 0x0005AD76
			public virtual bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_ResetAllStats(this._ptr, bAchievementsToo);
			}

			// Token: 0x06001B2F RID: 6959 RVA: 0x0005CBA1 File Offset: 0x0005ADA1
			public virtual SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(this._ptr, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
			}

			// Token: 0x06001B30 RID: 6960 RVA: 0x0005CBCE File Offset: 0x0005ADCE
			public virtual SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_FindLeaderboard(this._ptr, pchLeaderboardName);
			}

			// Token: 0x06001B31 RID: 6961 RVA: 0x0005CBF9 File Offset: 0x0005ADF9
			public virtual IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardName(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001B32 RID: 6962 RVA: 0x0005CC24 File Offset: 0x0005AE24
			public virtual int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001B33 RID: 6963 RVA: 0x0005CC4F File Offset: 0x0005AE4F
			public virtual LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001B34 RID: 6964 RVA: 0x0005CC7A File Offset: 0x0005AE7A
			public virtual LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(this._ptr, hSteamLeaderboard);
			}

			// Token: 0x06001B35 RID: 6965 RVA: 0x0005CCA5 File Offset: 0x0005AEA5
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(this._ptr, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
			}

			// Token: 0x06001B36 RID: 6966 RVA: 0x0005CCD4 File Offset: 0x0005AED4
			public virtual SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(this._ptr, hSteamLeaderboard, prgUsers, cUsers);
			}

			// Token: 0x06001B37 RID: 6967 RVA: 0x0005CD01 File Offset: 0x0005AF01
			public virtual bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(this._ptr, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
			}

			// Token: 0x06001B38 RID: 6968 RVA: 0x0005CD32 File Offset: 0x0005AF32
			public virtual SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_UploadLeaderboardScore(this._ptr, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
			}

			// Token: 0x06001B39 RID: 6969 RVA: 0x0005CD63 File Offset: 0x0005AF63
			public virtual SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(this._ptr, hSteamLeaderboard, hUGC);
			}

			// Token: 0x06001B3A RID: 6970 RVA: 0x0005CD8F File Offset: 0x0005AF8F
			public virtual SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(this._ptr);
			}

			// Token: 0x06001B3B RID: 6971 RVA: 0x0005CDB9 File Offset: 0x0005AFB9
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(this._ptr);
			}

			// Token: 0x06001B3C RID: 6972 RVA: 0x0005CDE3 File Offset: 0x0005AFE3
			public virtual int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(this._ptr, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x06001B3D RID: 6973 RVA: 0x0005CE12 File Offset: 0x0005B012
			public virtual int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(this._ptr, iIteratorPrevious, pchName, unNameBufLen, out pflPercent, ref pbAchieved);
			}

			// Token: 0x06001B3E RID: 6974 RVA: 0x0005CE43 File Offset: 0x0005B043
			public virtual bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(this._ptr, pchName, out pflPercent);
			}

			// Token: 0x06001B3F RID: 6975 RVA: 0x0005CE6F File Offset: 0x0005B06F
			public virtual SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_RequestGlobalStats(this._ptr, nHistoryDays);
			}

			// Token: 0x06001B40 RID: 6976 RVA: 0x0005CE9A File Offset: 0x0005B09A
			public virtual bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStat(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001B41 RID: 6977 RVA: 0x0005CEC6 File Offset: 0x0005B0C6
			public virtual bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStat0(this._ptr, pchStatName, out pData);
			}

			// Token: 0x06001B42 RID: 6978 RVA: 0x0005CEF2 File Offset: 0x0005B0F2
			public virtual int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001B43 RID: 6979 RVA: 0x0005CF1F File Offset: 0x0005B11F
			public virtual int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUserStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(this._ptr, pchStatName, out pData, cubData);
			}

			// Token: 0x06001B44 RID: 6980 RVA: 0x0005CF4C File Offset: 0x0005B14C
			public virtual bool ISteamApps_BIsSubscribed()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribed(this._ptr);
			}

			// Token: 0x06001B45 RID: 6981 RVA: 0x0005CF76 File Offset: 0x0005B176
			public virtual bool ISteamApps_BIsLowViolence()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsLowViolence(this._ptr);
			}

			// Token: 0x06001B46 RID: 6982 RVA: 0x0005CFA0 File Offset: 0x0005B1A0
			public virtual bool ISteamApps_BIsCybercafe()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsCybercafe(this._ptr);
			}

			// Token: 0x06001B47 RID: 6983 RVA: 0x0005CFCA File Offset: 0x0005B1CA
			public virtual bool ISteamApps_BIsVACBanned()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsVACBanned(this._ptr);
			}

			// Token: 0x06001B48 RID: 6984 RVA: 0x0005CFF4 File Offset: 0x0005B1F4
			public virtual IntPtr ISteamApps_GetCurrentGameLanguage()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetCurrentGameLanguage(this._ptr);
			}

			// Token: 0x06001B49 RID: 6985 RVA: 0x0005D01E File Offset: 0x0005B21E
			public virtual IntPtr ISteamApps_GetAvailableGameLanguages()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAvailableGameLanguages(this._ptr);
			}

			// Token: 0x06001B4A RID: 6986 RVA: 0x0005D048 File Offset: 0x0005B248
			public virtual bool ISteamApps_BIsSubscribedApp(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribedApp(this._ptr, appID);
			}

			// Token: 0x06001B4B RID: 6987 RVA: 0x0005D073 File Offset: 0x0005B273
			public virtual bool ISteamApps_BIsDlcInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsDlcInstalled(this._ptr, appID);
			}

			// Token: 0x06001B4C RID: 6988 RVA: 0x0005D09E File Offset: 0x0005B29E
			public virtual uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(this._ptr, nAppID);
			}

			// Token: 0x06001B4D RID: 6989 RVA: 0x0005D0C9 File Offset: 0x0005B2C9
			public virtual bool ISteamApps_BIsSubscribedFromFreeWeekend()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(this._ptr);
			}

			// Token: 0x06001B4E RID: 6990 RVA: 0x0005D0F3 File Offset: 0x0005B2F3
			public virtual int ISteamApps_GetDLCCount()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetDLCCount(this._ptr);
			}

			// Token: 0x06001B4F RID: 6991 RVA: 0x0005D11D File Offset: 0x0005B31D
			public virtual bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BGetDLCDataByIndex(this._ptr, iDLC, ref pAppID, ref pbAvailable, pchName, cchNameBufferSize);
			}

			// Token: 0x06001B50 RID: 6992 RVA: 0x0005D14E File Offset: 0x0005B34E
			public virtual void ISteamApps_InstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_InstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001B51 RID: 6993 RVA: 0x0005D179 File Offset: 0x0005B379
			public virtual void ISteamApps_UninstallDLC(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_UninstallDLC(this._ptr, nAppID);
			}

			// Token: 0x06001B52 RID: 6994 RVA: 0x0005D1A4 File Offset: 0x0005B3A4
			public virtual void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(this._ptr, nAppID);
			}

			// Token: 0x06001B53 RID: 6995 RVA: 0x0005D1CF File Offset: 0x0005B3CF
			public virtual bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetCurrentBetaName(this._ptr, pchName, cchNameBufferSize);
			}

			// Token: 0x06001B54 RID: 6996 RVA: 0x0005D1FB File Offset: 0x0005B3FB
			public virtual bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_MarkContentCorrupt(this._ptr, bMissingFilesOnly);
			}

			// Token: 0x06001B55 RID: 6997 RVA: 0x0005D226 File Offset: 0x0005B426
			public virtual uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetInstalledDepots(this._ptr, appID, pvecDepots, cMaxDepots);
			}

			// Token: 0x06001B56 RID: 6998 RVA: 0x0005D253 File Offset: 0x0005B453
			public virtual uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppInstallDir(this._ptr, appID, pchFolder, cchFolderBufferSize);
			}

			// Token: 0x06001B57 RID: 6999 RVA: 0x0005D280 File Offset: 0x0005B480
			public virtual bool ISteamApps_BIsAppInstalled(uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_BIsAppInstalled(this._ptr, appID);
			}

			// Token: 0x06001B58 RID: 7000 RVA: 0x0005D2AB File Offset: 0x0005B4AB
			public virtual CSteamID ISteamApps_GetAppOwner()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppOwner(this._ptr);
			}

			// Token: 0x06001B59 RID: 7001 RVA: 0x0005D2D5 File Offset: 0x0005B4D5
			public virtual IntPtr ISteamApps_GetLaunchQueryParam(string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetLaunchQueryParam(this._ptr, pchKey);
			}

			// Token: 0x06001B5A RID: 7002 RVA: 0x0005D300 File Offset: 0x0005B500
			public virtual bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetDlcDownloadProgress(this._ptr, nAppID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x06001B5B RID: 7003 RVA: 0x0005D32D File Offset: 0x0005B52D
			public virtual int ISteamApps_GetAppBuildId()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetAppBuildId(this._ptr);
			}

			// Token: 0x06001B5C RID: 7004 RVA: 0x0005D357 File Offset: 0x0005B557
			public virtual void ISteamApps_RequestAllProofOfPurchaseKeys()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(this._ptr);
			}

			// Token: 0x06001B5D RID: 7005 RVA: 0x0005D381 File Offset: 0x0005B581
			public virtual SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamApps _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamApps_GetFileDetails(this._ptr, pszFileName);
			}

			// Token: 0x06001B5E RID: 7006 RVA: 0x0005D3AC File Offset: 0x0005B5AC
			public virtual bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_SendP2PPacket(this._ptr, steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
			}

			// Token: 0x06001B5F RID: 7007 RVA: 0x0005D3DD File Offset: 0x0005B5DD
			public virtual bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(this._ptr, out pcubMsgSize, nChannel);
			}

			// Token: 0x06001B60 RID: 7008 RVA: 0x0005D409 File Offset: 0x0005B609
			public virtual bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_ReadP2PPacket(this._ptr, pubDest, cubDest, out pcubMsgSize, out psteamIDRemote, nChannel);
			}

			// Token: 0x06001B61 RID: 7009 RVA: 0x0005D43A File Offset: 0x0005B63A
			public virtual bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x06001B62 RID: 7010 RVA: 0x0005D465 File Offset: 0x0005B665
			public virtual bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(this._ptr, steamIDRemote);
			}

			// Token: 0x06001B63 RID: 7011 RVA: 0x0005D490 File Offset: 0x0005B690
			public virtual bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(this._ptr, steamIDRemote, nChannel);
			}

			// Token: 0x06001B64 RID: 7012 RVA: 0x0005D4BC File Offset: 0x0005B6BC
			public virtual bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetP2PSessionState(this._ptr, steamIDRemote, ref pConnectionState);
			}

			// Token: 0x06001B65 RID: 7013 RVA: 0x0005D4E8 File Offset: 0x0005B6E8
			public virtual bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(this._ptr, bAllow);
			}

			// Token: 0x06001B66 RID: 7014 RVA: 0x0005D513 File Offset: 0x0005B713
			public virtual SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateListenSocket(this._ptr, nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
			}

			// Token: 0x06001B67 RID: 7015 RVA: 0x0005D542 File Offset: 0x0005B742
			public virtual SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(this._ptr, steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
			}

			// Token: 0x06001B68 RID: 7016 RVA: 0x0005D571 File Offset: 0x0005B771
			public virtual SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_CreateConnectionSocket(this._ptr, nIP, nPort, nTimeoutSec);
			}

			// Token: 0x06001B69 RID: 7017 RVA: 0x0005D59E File Offset: 0x0005B79E
			public virtual bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_DestroySocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x06001B6A RID: 7018 RVA: 0x0005D5CA File Offset: 0x0005B7CA
			public virtual bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_DestroyListenSocket(this._ptr, hSocket, bNotifyRemoteEnd);
			}

			// Token: 0x06001B6B RID: 7019 RVA: 0x0005D5F6 File Offset: 0x0005B7F6
			public virtual bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_SendDataOnSocket(this._ptr, hSocket, pubData, cubData, bReliable);
			}

			// Token: 0x06001B6C RID: 7020 RVA: 0x0005D625 File Offset: 0x0005B825
			public virtual bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(this._ptr, hSocket, out pcubMsgSize);
			}

			// Token: 0x06001B6D RID: 7021 RVA: 0x0005D651 File Offset: 0x0005B851
			public virtual bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(this._ptr, hSocket, pubDest, cubDest, out pcubMsgSize);
			}

			// Token: 0x06001B6E RID: 7022 RVA: 0x0005D680 File Offset: 0x0005B880
			public virtual bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_IsDataAvailable(this._ptr, hListenSocket, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x06001B6F RID: 7023 RVA: 0x0005D6AD File Offset: 0x0005B8AD
			public virtual bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_RetrieveData(this._ptr, hListenSocket, pubDest, cubDest, out pcubMsgSize, ref phSocket);
			}

			// Token: 0x06001B70 RID: 7024 RVA: 0x0005D6DE File Offset: 0x0005B8DE
			public virtual bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetSocketInfo(this._ptr, hSocket, out pSteamIDRemote, peSocketStatus, out punIPRemote, out punPortRemote);
			}

			// Token: 0x06001B71 RID: 7025 RVA: 0x0005D70F File Offset: 0x0005B90F
			public virtual bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetListenSocketInfo(this._ptr, hListenSocket, out pnIP, out pnPort);
			}

			// Token: 0x06001B72 RID: 7026 RVA: 0x0005D73C File Offset: 0x0005B93C
			public virtual SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetSocketConnectionType(this._ptr, hSocket);
			}

			// Token: 0x06001B73 RID: 7027 RVA: 0x0005D767 File Offset: 0x0005B967
			public virtual int ISteamNetworking_GetMaxPacketSize(uint hSocket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamNetworking _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamNetworking_GetMaxPacketSize(this._ptr, hSocket);
			}

			// Token: 0x06001B74 RID: 7028 RVA: 0x0005D792 File Offset: 0x0005B992
			public virtual ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_WriteScreenshot(this._ptr, pubRGB, cubRGB, nWidth, nHeight);
			}

			// Token: 0x06001B75 RID: 7029 RVA: 0x0005D7C1 File Offset: 0x0005B9C1
			public virtual ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(this._ptr, pchFilename, pchThumbnailFilename, nWidth, nHeight);
			}

			// Token: 0x06001B76 RID: 7030 RVA: 0x0005D7F0 File Offset: 0x0005B9F0
			public virtual void ISteamScreenshots_TriggerScreenshot()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamScreenshots_TriggerScreenshot(this._ptr);
			}

			// Token: 0x06001B77 RID: 7031 RVA: 0x0005D81A File Offset: 0x0005BA1A
			public virtual void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamScreenshots_HookScreenshots(this._ptr, bHook);
			}

			// Token: 0x06001B78 RID: 7032 RVA: 0x0005D845 File Offset: 0x0005BA45
			public virtual bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_SetLocation(this._ptr, hScreenshot, pchLocation);
			}

			// Token: 0x06001B79 RID: 7033 RVA: 0x0005D871 File Offset: 0x0005BA71
			public virtual bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_TagUser(this._ptr, hScreenshot, steamID);
			}

			// Token: 0x06001B7A RID: 7034 RVA: 0x0005D89D File Offset: 0x0005BA9D
			public virtual bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_TagPublishedFile(this._ptr, hScreenshot, unPublishedFileID);
			}

			// Token: 0x06001B7B RID: 7035 RVA: 0x0005D8C9 File Offset: 0x0005BAC9
			public virtual bool ISteamScreenshots_IsScreenshotsHooked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(this._ptr);
			}

			// Token: 0x06001B7C RID: 7036 RVA: 0x0005D8F3 File Offset: 0x0005BAF3
			public virtual ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamScreenshots _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(this._ptr, eType, pchFilename, pchVRFilename);
			}

			// Token: 0x06001B7D RID: 7037 RVA: 0x0005D920 File Offset: 0x0005BB20
			public virtual bool ISteamMusic_BIsEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_BIsEnabled(this._ptr);
			}

			// Token: 0x06001B7E RID: 7038 RVA: 0x0005D94A File Offset: 0x0005BB4A
			public virtual bool ISteamMusic_BIsPlaying()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_BIsPlaying(this._ptr);
			}

			// Token: 0x06001B7F RID: 7039 RVA: 0x0005D974 File Offset: 0x0005BB74
			public virtual AudioPlayback_Status ISteamMusic_GetPlaybackStatus()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_GetPlaybackStatus(this._ptr);
			}

			// Token: 0x06001B80 RID: 7040 RVA: 0x0005D99E File Offset: 0x0005BB9E
			public virtual void ISteamMusic_Play()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_Play(this._ptr);
			}

			// Token: 0x06001B81 RID: 7041 RVA: 0x0005D9C8 File Offset: 0x0005BBC8
			public virtual void ISteamMusic_Pause()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_Pause(this._ptr);
			}

			// Token: 0x06001B82 RID: 7042 RVA: 0x0005D9F2 File Offset: 0x0005BBF2
			public virtual void ISteamMusic_PlayPrevious()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_PlayPrevious(this._ptr);
			}

			// Token: 0x06001B83 RID: 7043 RVA: 0x0005DA1C File Offset: 0x0005BC1C
			public virtual void ISteamMusic_PlayNext()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_PlayNext(this._ptr);
			}

			// Token: 0x06001B84 RID: 7044 RVA: 0x0005DA46 File Offset: 0x0005BC46
			public virtual void ISteamMusic_SetVolume(float flVolume)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamMusic_SetVolume(this._ptr, flVolume);
			}

			// Token: 0x06001B85 RID: 7045 RVA: 0x0005DA71 File Offset: 0x0005BC71
			public virtual float ISteamMusic_GetVolume()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusic _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusic_GetVolume(this._ptr);
			}

			// Token: 0x06001B86 RID: 7046 RVA: 0x0005DA9B File Offset: 0x0005BC9B
			public virtual bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(this._ptr, pchName);
			}

			// Token: 0x06001B87 RID: 7047 RVA: 0x0005DAC6 File Offset: 0x0005BCC6
			public virtual bool ISteamMusicRemote_DeregisterSteamMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(this._ptr);
			}

			// Token: 0x06001B88 RID: 7048 RVA: 0x0005DAF0 File Offset: 0x0005BCF0
			public virtual bool ISteamMusicRemote_BIsCurrentMusicRemote()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(this._ptr);
			}

			// Token: 0x06001B89 RID: 7049 RVA: 0x0005DB1A File Offset: 0x0005BD1A
			public virtual bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_BActivationSuccess(this._ptr, bValue);
			}

			// Token: 0x06001B8A RID: 7050 RVA: 0x0005DB45 File Offset: 0x0005BD45
			public virtual bool ISteamMusicRemote_SetDisplayName(string pchDisplayName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetDisplayName(this._ptr, pchDisplayName);
			}

			// Token: 0x06001B8B RID: 7051 RVA: 0x0005DB70 File Offset: 0x0005BD70
			public virtual bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x06001B8C RID: 7052 RVA: 0x0005DB9C File Offset: 0x0005BD9C
			public virtual bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(this._ptr, bValue);
			}

			// Token: 0x06001B8D RID: 7053 RVA: 0x0005DBC7 File Offset: 0x0005BDC7
			public virtual bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlayNext(this._ptr, bValue);
			}

			// Token: 0x06001B8E RID: 7054 RVA: 0x0005DBF2 File Offset: 0x0005BDF2
			public virtual bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableShuffled(this._ptr, bValue);
			}

			// Token: 0x06001B8F RID: 7055 RVA: 0x0005DC1D File Offset: 0x0005BE1D
			public virtual bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableLooped(this._ptr, bValue);
			}

			// Token: 0x06001B90 RID: 7056 RVA: 0x0005DC48 File Offset: 0x0005BE48
			public virtual bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnableQueue(this._ptr, bValue);
			}

			// Token: 0x06001B91 RID: 7057 RVA: 0x0005DC73 File Offset: 0x0005BE73
			public virtual bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_EnablePlaylists(this._ptr, bValue);
			}

			// Token: 0x06001B92 RID: 7058 RVA: 0x0005DC9E File Offset: 0x0005BE9E
			public virtual bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(this._ptr, nStatus);
			}

			// Token: 0x06001B93 RID: 7059 RVA: 0x0005DCC9 File Offset: 0x0005BEC9
			public virtual bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateShuffled(this._ptr, bValue);
			}

			// Token: 0x06001B94 RID: 7060 RVA: 0x0005DCF4 File Offset: 0x0005BEF4
			public virtual bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateLooped(this._ptr, bValue);
			}

			// Token: 0x06001B95 RID: 7061 RVA: 0x0005DD1F File Offset: 0x0005BF1F
			public virtual bool ISteamMusicRemote_UpdateVolume(float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateVolume(this._ptr, flValue);
			}

			// Token: 0x06001B96 RID: 7062 RVA: 0x0005DD4A File Offset: 0x0005BF4A
			public virtual bool ISteamMusicRemote_CurrentEntryWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(this._ptr);
			}

			// Token: 0x06001B97 RID: 7063 RVA: 0x0005DD74 File Offset: 0x0005BF74
			public virtual bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(this._ptr, bAvailable);
			}

			// Token: 0x06001B98 RID: 7064 RVA: 0x0005DD9F File Offset: 0x0005BF9F
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(this._ptr, pchText);
			}

			// Token: 0x06001B99 RID: 7065 RVA: 0x0005DDCA File Offset: 0x0005BFCA
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(this._ptr, nValue);
			}

			// Token: 0x06001B9A RID: 7066 RVA: 0x0005DDF5 File Offset: 0x0005BFF5
			public virtual bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(this._ptr, pvBuffer, cbBufferLength);
			}

			// Token: 0x06001B9B RID: 7067 RVA: 0x0005DE21 File Offset: 0x0005C021
			public virtual bool ISteamMusicRemote_CurrentEntryDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(this._ptr);
			}

			// Token: 0x06001B9C RID: 7068 RVA: 0x0005DE4B File Offset: 0x0005C04B
			public virtual bool ISteamMusicRemote_QueueWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_QueueWillChange(this._ptr);
			}

			// Token: 0x06001B9D RID: 7069 RVA: 0x0005DE75 File Offset: 0x0005C075
			public virtual bool ISteamMusicRemote_ResetQueueEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_ResetQueueEntries(this._ptr);
			}

			// Token: 0x06001B9E RID: 7070 RVA: 0x0005DE9F File Offset: 0x0005C09F
			public virtual bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetQueueEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x06001B9F RID: 7071 RVA: 0x0005DECC File Offset: 0x0005C0CC
			public virtual bool ISteamMusicRemote_SetCurrentQueueEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(this._ptr, nID);
			}

			// Token: 0x06001BA0 RID: 7072 RVA: 0x0005DEF7 File Offset: 0x0005C0F7
			public virtual bool ISteamMusicRemote_QueueDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_QueueDidChange(this._ptr);
			}

			// Token: 0x06001BA1 RID: 7073 RVA: 0x0005DF21 File Offset: 0x0005C121
			public virtual bool ISteamMusicRemote_PlaylistWillChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_PlaylistWillChange(this._ptr);
			}

			// Token: 0x06001BA2 RID: 7074 RVA: 0x0005DF4B File Offset: 0x0005C14B
			public virtual bool ISteamMusicRemote_ResetPlaylistEntries()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(this._ptr);
			}

			// Token: 0x06001BA3 RID: 7075 RVA: 0x0005DF75 File Offset: 0x0005C175
			public virtual bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(this._ptr, nID, nPosition, pchEntryText);
			}

			// Token: 0x06001BA4 RID: 7076 RVA: 0x0005DFA2 File Offset: 0x0005C1A2
			public virtual bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(this._ptr, nID);
			}

			// Token: 0x06001BA5 RID: 7077 RVA: 0x0005DFCD File Offset: 0x0005C1CD
			public virtual bool ISteamMusicRemote_PlaylistDidChange()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamMusicRemote _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamMusicRemote_PlaylistDidChange(this._ptr);
			}

			// Token: 0x06001BA6 RID: 7078 RVA: 0x0005DFF7 File Offset: 0x0005C1F7
			public virtual HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_CreateHTTPRequest(this._ptr, eHTTPRequestMethod, pchAbsoluteURL);
			}

			// Token: 0x06001BA7 RID: 7079 RVA: 0x0005E023 File Offset: 0x0005C223
			public virtual bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(this._ptr, hRequest, ulContextValue);
			}

			// Token: 0x06001BA8 RID: 7080 RVA: 0x0005E04F File Offset: 0x0005C24F
			public virtual bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(this._ptr, hRequest, unTimeoutSeconds);
			}

			// Token: 0x06001BA9 RID: 7081 RVA: 0x0005E07B File Offset: 0x0005C27B
			public virtual bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(this._ptr, hRequest, pchHeaderName, pchHeaderValue);
			}

			// Token: 0x06001BAA RID: 7082 RVA: 0x0005E0A8 File Offset: 0x0005C2A8
			public virtual bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(this._ptr, hRequest, pchParamName, pchParamValue);
			}

			// Token: 0x06001BAB RID: 7083 RVA: 0x0005E0D5 File Offset: 0x0005C2D5
			public virtual bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SendHTTPRequest(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x06001BAC RID: 7084 RVA: 0x0005E101 File Offset: 0x0005C301
			public virtual bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(this._ptr, hRequest, ref pCallHandle);
			}

			// Token: 0x06001BAD RID: 7085 RVA: 0x0005E12D File Offset: 0x0005C32D
			public virtual bool ISteamHTTP_DeferHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_DeferHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x06001BAE RID: 7086 RVA: 0x0005E158 File Offset: 0x0005C358
			public virtual bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x06001BAF RID: 7087 RVA: 0x0005E183 File Offset: 0x0005C383
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(this._ptr, hRequest, pchHeaderName, out unResponseHeaderSize);
			}

			// Token: 0x06001BB0 RID: 7088 RVA: 0x0005E1B0 File Offset: 0x0005C3B0
			public virtual bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(this._ptr, hRequest, pchHeaderName, out pHeaderValueBuffer, unBufferSize);
			}

			// Token: 0x06001BB1 RID: 7089 RVA: 0x0005E1DF File Offset: 0x0005C3DF
			public virtual bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(this._ptr, hRequest, out unBodySize);
			}

			// Token: 0x06001BB2 RID: 7090 RVA: 0x0005E20B File Offset: 0x0005C40B
			public virtual bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(this._ptr, hRequest, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x06001BB3 RID: 7091 RVA: 0x0005E238 File Offset: 0x0005C438
			public virtual bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(this._ptr, hRequest, cOffset, out pBodyDataBuffer, unBufferSize);
			}

			// Token: 0x06001BB4 RID: 7092 RVA: 0x0005E267 File Offset: 0x0005C467
			public virtual bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(this._ptr, hRequest);
			}

			// Token: 0x06001BB5 RID: 7093 RVA: 0x0005E292 File Offset: 0x0005C492
			public virtual bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(this._ptr, hRequest, out pflPercentOut);
			}

			// Token: 0x06001BB6 RID: 7094 RVA: 0x0005E2BE File Offset: 0x0005C4BE
			public virtual bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(this._ptr, hRequest, pchContentType, out pubBody, unBodyLen);
			}

			// Token: 0x06001BB7 RID: 7095 RVA: 0x0005E2ED File Offset: 0x0005C4ED
			public virtual HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_CreateCookieContainer(this._ptr, bAllowResponsesToModify);
			}

			// Token: 0x06001BB8 RID: 7096 RVA: 0x0005E318 File Offset: 0x0005C518
			public virtual bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_ReleaseCookieContainer(this._ptr, hCookieContainer);
			}

			// Token: 0x06001BB9 RID: 7097 RVA: 0x0005E343 File Offset: 0x0005C543
			public virtual bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetCookie(this._ptr, hCookieContainer, pchHost, pchUrl, pchCookie);
			}

			// Token: 0x06001BBA RID: 7098 RVA: 0x0005E372 File Offset: 0x0005C572
			public virtual bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(this._ptr, hRequest, hCookieContainer);
			}

			// Token: 0x06001BBB RID: 7099 RVA: 0x0005E39E File Offset: 0x0005C59E
			public virtual bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(this._ptr, hRequest, pchUserAgentInfo);
			}

			// Token: 0x06001BBC RID: 7100 RVA: 0x0005E3CA File Offset: 0x0005C5CA
			public virtual bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(this._ptr, hRequest, bRequireVerifiedCertificate);
			}

			// Token: 0x06001BBD RID: 7101 RVA: 0x0005E3F6 File Offset: 0x0005C5F6
			public virtual bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(this._ptr, hRequest, unMilliseconds);
			}

			// Token: 0x06001BBE RID: 7102 RVA: 0x0005E422 File Offset: 0x0005C622
			public virtual bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTTP _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(this._ptr, hRequest, ref pbWasTimedOut);
			}

			// Token: 0x06001BBF RID: 7103 RVA: 0x0005E44E File Offset: 0x0005C64E
			public virtual bool ISteamController_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_Init(this._ptr);
			}

			// Token: 0x06001BC0 RID: 7104 RVA: 0x0005E478 File Offset: 0x0005C678
			public virtual bool ISteamController_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_Shutdown(this._ptr);
			}

			// Token: 0x06001BC1 RID: 7105 RVA: 0x0005E4A2 File Offset: 0x0005C6A2
			public virtual void ISteamController_RunFrame()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_RunFrame(this._ptr);
			}

			// Token: 0x06001BC2 RID: 7106 RVA: 0x0005E4CC File Offset: 0x0005C6CC
			public virtual int ISteamController_GetConnectedControllers(IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetConnectedControllers(this._ptr, handlesOut);
			}

			// Token: 0x06001BC3 RID: 7107 RVA: 0x0005E4F7 File Offset: 0x0005C6F7
			public virtual bool ISteamController_ShowBindingPanel(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_ShowBindingPanel(this._ptr, controllerHandle);
			}

			// Token: 0x06001BC4 RID: 7108 RVA: 0x0005E522 File Offset: 0x0005C722
			public virtual ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetActionSetHandle(this._ptr, pszActionSetName);
			}

			// Token: 0x06001BC5 RID: 7109 RVA: 0x0005E54D File Offset: 0x0005C74D
			public virtual void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_ActivateActionSet(this._ptr, controllerHandle, actionSetHandle);
			}

			// Token: 0x06001BC6 RID: 7110 RVA: 0x0005E579 File Offset: 0x0005C779
			public virtual ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetCurrentActionSet(this._ptr, controllerHandle);
			}

			// Token: 0x06001BC7 RID: 7111 RVA: 0x0005E5A4 File Offset: 0x0005C7A4
			public virtual void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_ActivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001BC8 RID: 7112 RVA: 0x0005E5D0 File Offset: 0x0005C7D0
			public virtual void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_DeactivateActionSetLayer(this._ptr, controllerHandle, actionSetLayerHandle);
			}

			// Token: 0x06001BC9 RID: 7113 RVA: 0x0005E5FC File Offset: 0x0005C7FC
			public virtual void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_DeactivateAllActionSetLayers(this._ptr, controllerHandle);
			}

			// Token: 0x06001BCA RID: 7114 RVA: 0x0005E627 File Offset: 0x0005C827
			public virtual int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetActiveActionSetLayers(this._ptr, controllerHandle, handlesOut);
			}

			// Token: 0x06001BCB RID: 7115 RVA: 0x0005E653 File Offset: 0x0005C853
			public virtual ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x06001BCC RID: 7116 RVA: 0x0005E67E File Offset: 0x0005C87E
			public virtual ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionData(this._ptr, controllerHandle, digitalActionHandle);
			}

			// Token: 0x06001BCD RID: 7117 RVA: 0x0005E6AA File Offset: 0x0005C8AA
			public virtual int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetDigitalActionOrigins(this._ptr, controllerHandle, actionSetHandle, digitalActionHandle, out originsOut);
			}

			// Token: 0x06001BCE RID: 7118 RVA: 0x0005E6D9 File Offset: 0x0005C8D9
			public virtual ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionHandle(this._ptr, pszActionName);
			}

			// Token: 0x06001BCF RID: 7119 RVA: 0x0005E704 File Offset: 0x0005C904
			public virtual ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionData(this._ptr, controllerHandle, analogActionHandle);
			}

			// Token: 0x06001BD0 RID: 7120 RVA: 0x0005E730 File Offset: 0x0005C930
			public virtual int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetAnalogActionOrigins(this._ptr, controllerHandle, actionSetHandle, analogActionHandle, out originsOut);
			}

			// Token: 0x06001BD1 RID: 7121 RVA: 0x0005E75F File Offset: 0x0005C95F
			public virtual void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_StopAnalogActionMomentum(this._ptr, controllerHandle, eAction);
			}

			// Token: 0x06001BD2 RID: 7122 RVA: 0x0005E78B File Offset: 0x0005C98B
			public virtual void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_TriggerHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec);
			}

			// Token: 0x06001BD3 RID: 7123 RVA: 0x0005E7B8 File Offset: 0x0005C9B8
			public virtual void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(this._ptr, controllerHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
			}

			// Token: 0x06001BD4 RID: 7124 RVA: 0x0005E7EB File Offset: 0x0005C9EB
			public virtual void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_TriggerVibration(this._ptr, controllerHandle, usLeftSpeed, usRightSpeed);
			}

			// Token: 0x06001BD5 RID: 7125 RVA: 0x0005E818 File Offset: 0x0005CA18
			public virtual void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamController_SetLEDColor(this._ptr, controllerHandle, nColorR, nColorG, nColorB, nFlags);
			}

			// Token: 0x06001BD6 RID: 7126 RVA: 0x0005E849 File Offset: 0x0005CA49
			public virtual int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetGamepadIndexForController(this._ptr, ulControllerHandle);
			}

			// Token: 0x06001BD7 RID: 7127 RVA: 0x0005E874 File Offset: 0x0005CA74
			public virtual ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetControllerForGamepadIndex(this._ptr, nIndex);
			}

			// Token: 0x06001BD8 RID: 7128 RVA: 0x0005E89F File Offset: 0x0005CA9F
			public virtual ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetMotionData(this._ptr, controllerHandle);
			}

			// Token: 0x06001BD9 RID: 7129 RVA: 0x0005E8CA File Offset: 0x0005CACA
			public virtual bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_ShowDigitalActionOrigins(this._ptr, controllerHandle, digitalActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x06001BDA RID: 7130 RVA: 0x0005E8FB File Offset: 0x0005CAFB
			public virtual bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_ShowAnalogActionOrigins(this._ptr, controllerHandle, analogActionHandle, flScale, flXPosition, flYPosition);
			}

			// Token: 0x06001BDB RID: 7131 RVA: 0x0005E92C File Offset: 0x0005CB2C
			public virtual IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetStringForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x06001BDC RID: 7132 RVA: 0x0005E957 File Offset: 0x0005CB57
			public virtual IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetGlyphForActionOrigin(this._ptr, eOrigin);
			}

			// Token: 0x06001BDD RID: 7133 RVA: 0x0005E982 File Offset: 0x0005CB82
			public virtual SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamController _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamController_GetInputTypeForHandle(this._ptr, controllerHandle);
			}

			// Token: 0x06001BDE RID: 7134 RVA: 0x0005E9AD File Offset: 0x0005CBAD
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(this._ptr, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x06001BDF RID: 7135 RVA: 0x0005E9E2 File Offset: 0x0005CBE2
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(this._ptr, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
			}

			// Token: 0x06001BE0 RID: 7136 RVA: 0x0005EA13 File Offset: 0x0005CC13
			public virtual UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001BE1 RID: 7137 RVA: 0x0005EA3F File Offset: 0x0005CC3F
			public virtual SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SendQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x06001BE2 RID: 7138 RVA: 0x0005EA6A File Offset: 0x0005CC6A
			public virtual bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCResult(this._ptr, handle, index, ref pDetails);
			}

			// Token: 0x06001BE3 RID: 7139 RVA: 0x0005EA97 File Offset: 0x0005CC97
			public virtual bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(this._ptr, handle, index, pchURL, cchURLSize);
			}

			// Token: 0x06001BE4 RID: 7140 RVA: 0x0005EAC6 File Offset: 0x0005CCC6
			public virtual bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCMetadata(this._ptr, handle, index, pchMetadata, cchMetadatasize);
			}

			// Token: 0x06001BE5 RID: 7141 RVA: 0x0005EAF5 File Offset: 0x0005CCF5
			public virtual bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCChildren(this._ptr, handle, index, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001BE6 RID: 7142 RVA: 0x0005EB24 File Offset: 0x0005CD24
			public virtual bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCStatistic(this._ptr, handle, index, eStatType, out pStatValue);
			}

			// Token: 0x06001BE7 RID: 7143 RVA: 0x0005EB53 File Offset: 0x0005CD53
			public virtual uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(this._ptr, handle, index);
			}

			// Token: 0x06001BE8 RID: 7144 RVA: 0x0005EB80 File Offset: 0x0005CD80
			public virtual bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(this._ptr, handle, index, previewIndex, pchURLOrVideoID, cchURLSize, pchOriginalFileName, cchOriginalFileNameSize, out pPreviewType);
			}

			// Token: 0x06001BE9 RID: 7145 RVA: 0x0005EBC2 File Offset: 0x0005CDC2
			public virtual uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(this._ptr, handle, index);
			}

			// Token: 0x06001BEA RID: 7146 RVA: 0x0005EBEE File Offset: 0x0005CDEE
			public virtual bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(this._ptr, handle, index, keyValueTagIndex, pchKey, cchKeySize, pchValue, cchValueSize);
			}

			// Token: 0x06001BEB RID: 7147 RVA: 0x0005EC23 File Offset: 0x0005CE23
			public virtual bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(this._ptr, handle);
			}

			// Token: 0x06001BEC RID: 7148 RVA: 0x0005EC4E File Offset: 0x0005CE4E
			public virtual bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddRequiredTag(this._ptr, handle, pTagName);
			}

			// Token: 0x06001BED RID: 7149 RVA: 0x0005EC7A File Offset: 0x0005CE7A
			public virtual bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddExcludedTag(this._ptr, handle, pTagName);
			}

			// Token: 0x06001BEE RID: 7150 RVA: 0x0005ECA6 File Offset: 0x0005CEA6
			public virtual bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnOnlyIDs(this._ptr, handle, bReturnOnlyIDs);
			}

			// Token: 0x06001BEF RID: 7151 RVA: 0x0005ECD2 File Offset: 0x0005CED2
			public virtual bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnKeyValueTags(this._ptr, handle, bReturnKeyValueTags);
			}

			// Token: 0x06001BF0 RID: 7152 RVA: 0x0005ECFE File Offset: 0x0005CEFE
			public virtual bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnLongDescription(this._ptr, handle, bReturnLongDescription);
			}

			// Token: 0x06001BF1 RID: 7153 RVA: 0x0005ED2A File Offset: 0x0005CF2A
			public virtual bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnMetadata(this._ptr, handle, bReturnMetadata);
			}

			// Token: 0x06001BF2 RID: 7154 RVA: 0x0005ED56 File Offset: 0x0005CF56
			public virtual bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnChildren(this._ptr, handle, bReturnChildren);
			}

			// Token: 0x06001BF3 RID: 7155 RVA: 0x0005ED82 File Offset: 0x0005CF82
			public virtual bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(this._ptr, handle, bReturnAdditionalPreviews);
			}

			// Token: 0x06001BF4 RID: 7156 RVA: 0x0005EDAE File Offset: 0x0005CFAE
			public virtual bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnTotalOnly(this._ptr, handle, bReturnTotalOnly);
			}

			// Token: 0x06001BF5 RID: 7157 RVA: 0x0005EDDA File Offset: 0x0005CFDA
			public virtual bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(this._ptr, handle, unDays);
			}

			// Token: 0x06001BF6 RID: 7158 RVA: 0x0005EE06 File Offset: 0x0005D006
			public virtual bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001BF7 RID: 7159 RVA: 0x0005EE32 File Offset: 0x0005D032
			public virtual bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetAllowCachedResponse(this._ptr, handle, unMaxAgeSeconds);
			}

			// Token: 0x06001BF8 RID: 7160 RVA: 0x0005EE5E File Offset: 0x0005D05E
			public virtual bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetCloudFileNameFilter(this._ptr, handle, pMatchCloudFileName);
			}

			// Token: 0x06001BF9 RID: 7161 RVA: 0x0005EE8A File Offset: 0x0005D08A
			public virtual bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetMatchAnyTag(this._ptr, handle, bMatchAnyTag);
			}

			// Token: 0x06001BFA RID: 7162 RVA: 0x0005EEB6 File Offset: 0x0005D0B6
			public virtual bool ISteamUGC_SetSearchText(ulong handle, string pSearchText)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetSearchText(this._ptr, handle, pSearchText);
			}

			// Token: 0x06001BFB RID: 7163 RVA: 0x0005EEE2 File Offset: 0x0005D0E2
			public virtual bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetRankedByTrendDays(this._ptr, handle, unDays);
			}

			// Token: 0x06001BFC RID: 7164 RVA: 0x0005EF0E File Offset: 0x0005D10E
			public virtual bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(this._ptr, handle, pKey, pValue);
			}

			// Token: 0x06001BFD RID: 7165 RVA: 0x0005EF3B File Offset: 0x0005D13B
			public virtual SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RequestUGCDetails(this._ptr, nPublishedFileID, unMaxAgeSeconds);
			}

			// Token: 0x06001BFE RID: 7166 RVA: 0x0005EF67 File Offset: 0x0005D167
			public virtual SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_CreateItem(this._ptr, nConsumerAppId, eFileType);
			}

			// Token: 0x06001BFF RID: 7167 RVA: 0x0005EF93 File Offset: 0x0005D193
			public virtual UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StartItemUpdate(this._ptr, nConsumerAppId, nPublishedFileID);
			}

			// Token: 0x06001C00 RID: 7168 RVA: 0x0005EFBF File Offset: 0x0005D1BF
			public virtual bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemTitle(this._ptr, handle, pchTitle);
			}

			// Token: 0x06001C01 RID: 7169 RVA: 0x0005EFEB File Offset: 0x0005D1EB
			public virtual bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemDescription(this._ptr, handle, pchDescription);
			}

			// Token: 0x06001C02 RID: 7170 RVA: 0x0005F017 File Offset: 0x0005D217
			public virtual bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemUpdateLanguage(this._ptr, handle, pchLanguage);
			}

			// Token: 0x06001C03 RID: 7171 RVA: 0x0005F043 File Offset: 0x0005D243
			public virtual bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemMetadata(this._ptr, handle, pchMetaData);
			}

			// Token: 0x06001C04 RID: 7172 RVA: 0x0005F06F File Offset: 0x0005D26F
			public virtual bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemVisibility(this._ptr, handle, eVisibility);
			}

			// Token: 0x06001C05 RID: 7173 RVA: 0x0005F09B File Offset: 0x0005D29B
			public virtual bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemTags(this._ptr, updateHandle, ref pTags);
			}

			// Token: 0x06001C06 RID: 7174 RVA: 0x0005F0C7 File Offset: 0x0005D2C7
			public virtual bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemContent(this._ptr, handle, pszContentFolder);
			}

			// Token: 0x06001C07 RID: 7175 RVA: 0x0005F0F3 File Offset: 0x0005D2F3
			public virtual bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetItemPreview(this._ptr, handle, pszPreviewFile);
			}

			// Token: 0x06001C08 RID: 7176 RVA: 0x0005F11F File Offset: 0x0005D31F
			public virtual bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(this._ptr, handle, pchKey);
			}

			// Token: 0x06001C09 RID: 7177 RVA: 0x0005F14B File Offset: 0x0005D34B
			public virtual bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemKeyValueTag(this._ptr, handle, pchKey, pchValue);
			}

			// Token: 0x06001C0A RID: 7178 RVA: 0x0005F178 File Offset: 0x0005D378
			public virtual bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemPreviewFile(this._ptr, handle, pszPreviewFile, type);
			}

			// Token: 0x06001C0B RID: 7179 RVA: 0x0005F1A5 File Offset: 0x0005D3A5
			public virtual bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemPreviewVideo(this._ptr, handle, pszVideoID);
			}

			// Token: 0x06001C0C RID: 7180 RVA: 0x0005F1D1 File Offset: 0x0005D3D1
			public virtual bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewFile(this._ptr, handle, index, pszPreviewFile);
			}

			// Token: 0x06001C0D RID: 7181 RVA: 0x0005F1FE File Offset: 0x0005D3FE
			public virtual bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(this._ptr, handle, index, pszVideoID);
			}

			// Token: 0x06001C0E RID: 7182 RVA: 0x0005F22B File Offset: 0x0005D42B
			public virtual bool ISteamUGC_RemoveItemPreview(ulong handle, uint index)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemPreview(this._ptr, handle, index);
			}

			// Token: 0x06001C0F RID: 7183 RVA: 0x0005F257 File Offset: 0x0005D457
			public virtual SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SubmitItemUpdate(this._ptr, handle, pchChangeNote);
			}

			// Token: 0x06001C10 RID: 7184 RVA: 0x0005F283 File Offset: 0x0005D483
			public virtual ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemUpdateProgress(this._ptr, handle, out punBytesProcessed, out punBytesTotal);
			}

			// Token: 0x06001C11 RID: 7185 RVA: 0x0005F2B0 File Offset: 0x0005D4B0
			public virtual SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SetUserItemVote(this._ptr, nPublishedFileID, bVoteUp);
			}

			// Token: 0x06001C12 RID: 7186 RVA: 0x0005F2DC File Offset: 0x0005D4DC
			public virtual SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetUserItemVote(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001C13 RID: 7187 RVA: 0x0005F307 File Offset: 0x0005D507
			public virtual SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddItemToFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001C14 RID: 7188 RVA: 0x0005F333 File Offset: 0x0005D533
			public virtual SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveItemFromFavorites(this._ptr, nAppId, nPublishedFileID);
			}

			// Token: 0x06001C15 RID: 7189 RVA: 0x0005F35F File Offset: 0x0005D55F
			public virtual SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_SubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001C16 RID: 7190 RVA: 0x0005F38A File Offset: 0x0005D58A
			public virtual SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_UnsubscribeItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001C17 RID: 7191 RVA: 0x0005F3B5 File Offset: 0x0005D5B5
			public virtual uint ISteamUGC_GetNumSubscribedItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetNumSubscribedItems(this._ptr);
			}

			// Token: 0x06001C18 RID: 7192 RVA: 0x0005F3DF File Offset: 0x0005D5DF
			public virtual uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetSubscribedItems(this._ptr, pvecPublishedFileID, cMaxEntries);
			}

			// Token: 0x06001C19 RID: 7193 RVA: 0x0005F40B File Offset: 0x0005D60B
			public virtual uint ISteamUGC_GetItemState(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemState(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001C1A RID: 7194 RVA: 0x0005F436 File Offset: 0x0005D636
			public virtual bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemInstallInfo(this._ptr, nPublishedFileID, out punSizeOnDisk, pchFolder, cchFolderSize, out punTimeStamp);
			}

			// Token: 0x06001C1B RID: 7195 RVA: 0x0005F467 File Offset: 0x0005D667
			public virtual bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetItemDownloadInfo(this._ptr, nPublishedFileID, out punBytesDownloaded, out punBytesTotal);
			}

			// Token: 0x06001C1C RID: 7196 RVA: 0x0005F494 File Offset: 0x0005D694
			public virtual bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_DownloadItem(this._ptr, nPublishedFileID, bHighPriority);
			}

			// Token: 0x06001C1D RID: 7197 RVA: 0x0005F4C0 File Offset: 0x0005D6C0
			public virtual bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(this._ptr, unWorkshopDepotID, pszFolder);
			}

			// Token: 0x06001C1E RID: 7198 RVA: 0x0005F4EC File Offset: 0x0005D6EC
			public virtual void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamUGC_SuspendDownloads(this._ptr, bSuspend);
			}

			// Token: 0x06001C1F RID: 7199 RVA: 0x0005F517 File Offset: 0x0005D717
			public virtual SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StartPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001C20 RID: 7200 RVA: 0x0005F543 File Offset: 0x0005D743
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StopPlaytimeTracking(this._ptr, pvecPublishedFileID, unNumPublishedFileIDs);
			}

			// Token: 0x06001C21 RID: 7201 RVA: 0x0005F56F File Offset: 0x0005D76F
			public virtual SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(this._ptr);
			}

			// Token: 0x06001C22 RID: 7202 RVA: 0x0005F599 File Offset: 0x0005D799
			public virtual SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x06001C23 RID: 7203 RVA: 0x0005F5C5 File Offset: 0x0005D7C5
			public virtual SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveDependency(this._ptr, nParentPublishedFileID, nChildPublishedFileID);
			}

			// Token: 0x06001C24 RID: 7204 RVA: 0x0005F5F1 File Offset: 0x0005D7F1
			public virtual SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_AddAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x06001C25 RID: 7205 RVA: 0x0005F61D File Offset: 0x0005D81D
			public virtual SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_RemoveAppDependency(this._ptr, nPublishedFileID, nAppID);
			}

			// Token: 0x06001C26 RID: 7206 RVA: 0x0005F649 File Offset: 0x0005D849
			public virtual SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_GetAppDependencies(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001C27 RID: 7207 RVA: 0x0005F674 File Offset: 0x0005D874
			public virtual SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamUGC _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamUGC_DeleteItem(this._ptr, nPublishedFileID);
			}

			// Token: 0x06001C28 RID: 7208 RVA: 0x0005F69F File Offset: 0x0005D89F
			public virtual uint ISteamAppList_GetNumInstalledApps()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetNumInstalledApps(this._ptr);
			}

			// Token: 0x06001C29 RID: 7209 RVA: 0x0005F6C9 File Offset: 0x0005D8C9
			public virtual uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetInstalledApps(this._ptr, pvecAppID, unMaxAppIDs);
			}

			// Token: 0x06001C2A RID: 7210 RVA: 0x0005F6F5 File Offset: 0x0005D8F5
			public virtual int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppName(this._ptr, nAppID, pchName, cchNameMax);
			}

			// Token: 0x06001C2B RID: 7211 RVA: 0x0005F722 File Offset: 0x0005D922
			public virtual int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppInstallDir(this._ptr, nAppID, pchDirectory, cchNameMax);
			}

			// Token: 0x06001C2C RID: 7212 RVA: 0x0005F74F File Offset: 0x0005D94F
			public virtual int ISteamAppList_GetAppBuildId(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamAppList _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamAppList_GetAppBuildId(this._ptr, nAppID);
			}

			// Token: 0x06001C2D RID: 7213 RVA: 0x0005F77A File Offset: 0x0005D97A
			public virtual void ISteamHTMLSurface_DestructISteamHTMLSurface()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(this._ptr);
			}

			// Token: 0x06001C2E RID: 7214 RVA: 0x0005F7A4 File Offset: 0x0005D9A4
			public virtual bool ISteamHTMLSurface_Init()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Init(this._ptr);
			}

			// Token: 0x06001C2F RID: 7215 RVA: 0x0005F7CE File Offset: 0x0005D9CE
			public virtual bool ISteamHTMLSurface_Shutdown()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Shutdown(this._ptr);
			}

			// Token: 0x06001C30 RID: 7216 RVA: 0x0005F7F8 File Offset: 0x0005D9F8
			public virtual SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_CreateBrowser(this._ptr, pchUserAgent, pchUserCSS);
			}

			// Token: 0x06001C31 RID: 7217 RVA: 0x0005F824 File Offset: 0x0005DA24
			public virtual void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_RemoveBrowser(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C32 RID: 7218 RVA: 0x0005F84F File Offset: 0x0005DA4F
			public virtual void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_LoadURL(this._ptr, unBrowserHandle, pchURL, pchPostData);
			}

			// Token: 0x06001C33 RID: 7219 RVA: 0x0005F87C File Offset: 0x0005DA7C
			public virtual void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetSize(this._ptr, unBrowserHandle, unWidth, unHeight);
			}

			// Token: 0x06001C34 RID: 7220 RVA: 0x0005F8A9 File Offset: 0x0005DAA9
			public virtual void ISteamHTMLSurface_StopLoad(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_StopLoad(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C35 RID: 7221 RVA: 0x0005F8D4 File Offset: 0x0005DAD4
			public virtual void ISteamHTMLSurface_Reload(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Reload(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C36 RID: 7222 RVA: 0x0005F8FF File Offset: 0x0005DAFF
			public virtual void ISteamHTMLSurface_GoBack(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GoBack(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C37 RID: 7223 RVA: 0x0005F92A File Offset: 0x0005DB2A
			public virtual void ISteamHTMLSurface_GoForward(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GoForward(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C38 RID: 7224 RVA: 0x0005F955 File Offset: 0x0005DB55
			public virtual void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_AddHeader(this._ptr, unBrowserHandle, pchKey, pchValue);
			}

			// Token: 0x06001C39 RID: 7225 RVA: 0x0005F982 File Offset: 0x0005DB82
			public virtual void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(this._ptr, unBrowserHandle, pchScript);
			}

			// Token: 0x06001C3A RID: 7226 RVA: 0x0005F9AE File Offset: 0x0005DBAE
			public virtual void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseUp(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x06001C3B RID: 7227 RVA: 0x0005F9DA File Offset: 0x0005DBDA
			public virtual void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseDown(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x06001C3C RID: 7228 RVA: 0x0005FA06 File Offset: 0x0005DC06
			public virtual void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(this._ptr, unBrowserHandle, eMouseButton);
			}

			// Token: 0x06001C3D RID: 7229 RVA: 0x0005FA32 File Offset: 0x0005DC32
			public virtual void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseMove(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x06001C3E RID: 7230 RVA: 0x0005FA5F File Offset: 0x0005DC5F
			public virtual void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_MouseWheel(this._ptr, unBrowserHandle, nDelta);
			}

			// Token: 0x06001C3F RID: 7231 RVA: 0x0005FA8B File Offset: 0x0005DC8B
			public virtual void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyDown(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001C40 RID: 7232 RVA: 0x0005FAB8 File Offset: 0x0005DCB8
			public virtual void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyUp(this._ptr, unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
			}

			// Token: 0x06001C41 RID: 7233 RVA: 0x0005FAE5 File Offset: 0x0005DCE5
			public virtual void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_KeyChar(this._ptr, unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
			}

			// Token: 0x06001C42 RID: 7234 RVA: 0x0005FB12 File Offset: 0x0005DD12
			public virtual void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001C43 RID: 7235 RVA: 0x0005FB3E File Offset: 0x0005DD3E
			public virtual void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(this._ptr, unBrowserHandle, nAbsolutePixelScroll);
			}

			// Token: 0x06001C44 RID: 7236 RVA: 0x0005FB6A File Offset: 0x0005DD6A
			public virtual void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetKeyFocus(this._ptr, unBrowserHandle, bHasKeyFocus);
			}

			// Token: 0x06001C45 RID: 7237 RVA: 0x0005FB96 File Offset: 0x0005DD96
			public virtual void ISteamHTMLSurface_ViewSource(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_ViewSource(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C46 RID: 7238 RVA: 0x0005FBC1 File Offset: 0x0005DDC1
			public virtual void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_CopyToClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C47 RID: 7239 RVA: 0x0005FBEC File Offset: 0x0005DDEC
			public virtual void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C48 RID: 7240 RVA: 0x0005FC17 File Offset: 0x0005DE17
			public virtual void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_Find(this._ptr, unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
			}

			// Token: 0x06001C49 RID: 7241 RVA: 0x0005FC46 File Offset: 0x0005DE46
			public virtual void ISteamHTMLSurface_StopFind(uint unBrowserHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_StopFind(this._ptr, unBrowserHandle);
			}

			// Token: 0x06001C4A RID: 7242 RVA: 0x0005FC71 File Offset: 0x0005DE71
			public virtual void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(this._ptr, unBrowserHandle, x, y);
			}

			// Token: 0x06001C4B RID: 7243 RVA: 0x0005FC9E File Offset: 0x0005DE9E
			public virtual void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetCookie(this._ptr, pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
			}

			// Token: 0x06001C4C RID: 7244 RVA: 0x0005FCD3 File Offset: 0x0005DED3
			public virtual void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(this._ptr, unBrowserHandle, flZoom, nPointX, nPointY);
			}

			// Token: 0x06001C4D RID: 7245 RVA: 0x0005FD02 File Offset: 0x0005DF02
			public virtual void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(this._ptr, unBrowserHandle, bBackgroundMode);
			}

			// Token: 0x06001C4E RID: 7246 RVA: 0x0005FD2E File Offset: 0x0005DF2E
			public virtual void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(this._ptr, unBrowserHandle, flDPIScaling);
			}

			// Token: 0x06001C4F RID: 7247 RVA: 0x0005FD5A File Offset: 0x0005DF5A
			public virtual void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_AllowStartRequest(this._ptr, unBrowserHandle, bAllowed);
			}

			// Token: 0x06001C50 RID: 7248 RVA: 0x0005FD86 File Offset: 0x0005DF86
			public virtual void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamHTMLSurface _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamHTMLSurface_JSDialogResponse(this._ptr, unBrowserHandle, bResult);
			}

			// Token: 0x06001C51 RID: 7249 RVA: 0x0005FDB2 File Offset: 0x0005DFB2
			public virtual Result ISteamInventory_GetResultStatus(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultStatus(this._ptr, resultHandle);
			}

			// Token: 0x06001C52 RID: 7250 RVA: 0x0005FDDD File Offset: 0x0005DFDD
			public virtual bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultItems(this._ptr, resultHandle, pOutItemsArray, out punOutItemsArraySize);
			}

			// Token: 0x06001C53 RID: 7251 RVA: 0x0005FE0A File Offset: 0x0005E00A
			public virtual bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultItemProperty(this._ptr, resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001C54 RID: 7252 RVA: 0x0005FE3B File Offset: 0x0005E03B
			public virtual uint ISteamInventory_GetResultTimestamp(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetResultTimestamp(this._ptr, resultHandle);
			}

			// Token: 0x06001C55 RID: 7253 RVA: 0x0005FE66 File Offset: 0x0005E066
			public virtual bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_CheckResultSteamID(this._ptr, resultHandle, steamIDExpected);
			}

			// Token: 0x06001C56 RID: 7254 RVA: 0x0005FE92 File Offset: 0x0005E092
			public virtual void ISteamInventory_DestroyResult(int resultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamInventory_DestroyResult(this._ptr, resultHandle);
			}

			// Token: 0x06001C57 RID: 7255 RVA: 0x0005FEBD File Offset: 0x0005E0BD
			public virtual bool ISteamInventory_GetAllItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetAllItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x06001C58 RID: 7256 RVA: 0x0005FEE8 File Offset: 0x0005E0E8
			public virtual bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemsByID(this._ptr, ref pResultHandle, pInstanceIDs, unCountInstanceIDs);
			}

			// Token: 0x06001C59 RID: 7257 RVA: 0x0005FF15 File Offset: 0x0005E115
			public virtual bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SerializeResult(this._ptr, resultHandle, pOutBuffer, out punOutBufferSize);
			}

			// Token: 0x06001C5A RID: 7258 RVA: 0x0005FF42 File Offset: 0x0005E142
			public virtual bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_DeserializeResult(this._ptr, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
			}

			// Token: 0x06001C5B RID: 7259 RVA: 0x0005FF71 File Offset: 0x0005E171
			public virtual bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GenerateItems(this._ptr, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x06001C5C RID: 7260 RVA: 0x0005FFA0 File Offset: 0x0005E1A0
			public virtual bool ISteamInventory_GrantPromoItems(ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GrantPromoItems(this._ptr, ref pResultHandle);
			}

			// Token: 0x06001C5D RID: 7261 RVA: 0x0005FFCB File Offset: 0x0005E1CB
			public virtual bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_AddPromoItem(this._ptr, ref pResultHandle, itemDef);
			}

			// Token: 0x06001C5E RID: 7262 RVA: 0x0005FFF7 File Offset: 0x0005E1F7
			public virtual bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_AddPromoItems(this._ptr, ref pResultHandle, pArrayItemDefs, unArrayLength);
			}

			// Token: 0x06001C5F RID: 7263 RVA: 0x00060024 File Offset: 0x0005E224
			public virtual bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_ConsumeItem(this._ptr, ref pResultHandle, itemConsume, unQuantity);
			}

			// Token: 0x06001C60 RID: 7264 RVA: 0x00060051 File Offset: 0x0005E251
			public virtual bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_ExchangeItems(this._ptr, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
			}

			// Token: 0x06001C61 RID: 7265 RVA: 0x00060086 File Offset: 0x0005E286
			public virtual bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_TransferItemQuantity(this._ptr, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
			}

			// Token: 0x06001C62 RID: 7266 RVA: 0x000600B5 File Offset: 0x0005E2B5
			public virtual void ISteamInventory_SendItemDropHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamInventory_SendItemDropHeartbeat(this._ptr);
			}

			// Token: 0x06001C63 RID: 7267 RVA: 0x000600DF File Offset: 0x0005E2DF
			public virtual bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_TriggerItemDrop(this._ptr, ref pResultHandle, dropListDefinition);
			}

			// Token: 0x06001C64 RID: 7268 RVA: 0x0006010C File Offset: 0x0005E30C
			public virtual bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_TradeItems(this._ptr, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
			}

			// Token: 0x06001C65 RID: 7269 RVA: 0x0006014E File Offset: 0x0005E34E
			public virtual bool ISteamInventory_LoadItemDefinitions()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_LoadItemDefinitions(this._ptr);
			}

			// Token: 0x06001C66 RID: 7270 RVA: 0x00060178 File Offset: 0x0005E378
			public virtual bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemDefinitionIDs(this._ptr, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x06001C67 RID: 7271 RVA: 0x000601A4 File Offset: 0x0005E3A4
			public virtual bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemDefinitionProperty(this._ptr, iDefinition, pchPropertyName, pchValueBuffer, out punValueBufferSizeOut);
			}

			// Token: 0x06001C68 RID: 7272 RVA: 0x000601D3 File Offset: 0x0005E3D3
			public virtual SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(this._ptr, steamID);
			}

			// Token: 0x06001C69 RID: 7273 RVA: 0x000601FE File Offset: 0x0005E3FE
			public virtual bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(this._ptr, steamID, pItemDefIDs, out punItemDefIDsArraySize);
			}

			// Token: 0x06001C6A RID: 7274 RVA: 0x0006022B File Offset: 0x0005E42B
			public virtual SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_StartPurchase(this._ptr, pArrayItemDefs, punArrayQuantity, unArrayLength);
			}

			// Token: 0x06001C6B RID: 7275 RVA: 0x00060258 File Offset: 0x0005E458
			public virtual SteamAPICall_t ISteamInventory_RequestPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_RequestPrices(this._ptr);
			}

			// Token: 0x06001C6C RID: 7276 RVA: 0x00060282 File Offset: 0x0005E482
			public virtual uint ISteamInventory_GetNumItemsWithPrices()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetNumItemsWithPrices(this._ptr);
			}

			// Token: 0x06001C6D RID: 7277 RVA: 0x000602AC File Offset: 0x0005E4AC
			public virtual bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemsWithPrices(this._ptr, pArrayItemDefs, pPrices, unArrayLength);
			}

			// Token: 0x06001C6E RID: 7278 RVA: 0x000602D9 File Offset: 0x0005E4D9
			public virtual bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_GetItemPrice(this._ptr, iDefinition, out pPrice);
			}

			// Token: 0x06001C6F RID: 7279 RVA: 0x00060305 File Offset: 0x0005E505
			public virtual SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_StartUpdateProperties(this._ptr);
			}

			// Token: 0x06001C70 RID: 7280 RVA: 0x0006032F File Offset: 0x0005E52F
			public virtual bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_RemoveProperty(this._ptr, handle, nItemID, pchPropertyName);
			}

			// Token: 0x06001C71 RID: 7281 RVA: 0x0006035C File Offset: 0x0005E55C
			public virtual bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty(this._ptr, handle, nItemID, pchPropertyName, pchPropertyValue);
			}

			// Token: 0x06001C72 RID: 7282 RVA: 0x0006038B File Offset: 0x0005E58B
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, bValue);
			}

			// Token: 0x06001C73 RID: 7283 RVA: 0x000603BA File Offset: 0x0005E5BA
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, nValue);
			}

			// Token: 0x06001C74 RID: 7284 RVA: 0x000603E9 File Offset: 0x0005E5E9
			public virtual bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SetProperty0(this._ptr, handle, nItemID, pchPropertyName, flValue);
			}

			// Token: 0x06001C75 RID: 7285 RVA: 0x00060418 File Offset: 0x0005E618
			public virtual bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamInventory _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamInventory_SubmitUpdateProperties(this._ptr, handle, ref pResultHandle);
			}

			// Token: 0x06001C76 RID: 7286 RVA: 0x00060444 File Offset: 0x0005E644
			public virtual void ISteamVideo_GetVideoURL(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamVideo_GetVideoURL(this._ptr, unVideoAppID);
			}

			// Token: 0x06001C77 RID: 7287 RVA: 0x0006046F File Offset: 0x0005E66F
			public virtual bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamVideo_IsBroadcasting(this._ptr, pnNumViewers);
			}

			// Token: 0x06001C78 RID: 7288 RVA: 0x0006049A File Offset: 0x0005E69A
			public virtual void ISteamVideo_GetOPFSettings(uint unVideoAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamVideo_GetOPFSettings(this._ptr, unVideoAppID);
			}

			// Token: 0x06001C79 RID: 7289 RVA: 0x000604C5 File Offset: 0x0005E6C5
			public virtual bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamVideo _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamVideo_GetOPFStringForApp(this._ptr, unVideoAppID, pchBuffer, out pnBufferSize);
			}

			// Token: 0x06001C7A RID: 7290 RVA: 0x000604F2 File Offset: 0x0005E6F2
			public virtual bool ISteamParentalSettings_BIsParentalLockEnabled()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(this._ptr);
			}

			// Token: 0x06001C7B RID: 7291 RVA: 0x0006051C File Offset: 0x0005E71C
			public virtual bool ISteamParentalSettings_BIsParentalLockLocked()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(this._ptr);
			}

			// Token: 0x06001C7C RID: 7292 RVA: 0x00060546 File Offset: 0x0005E746
			public virtual bool ISteamParentalSettings_BIsAppBlocked(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsAppBlocked(this._ptr, nAppID);
			}

			// Token: 0x06001C7D RID: 7293 RVA: 0x00060571 File Offset: 0x0005E771
			public virtual bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(this._ptr, nAppID);
			}

			// Token: 0x06001C7E RID: 7294 RVA: 0x0006059C File Offset: 0x0005E79C
			public virtual bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(this._ptr, eFeature);
			}

			// Token: 0x06001C7F RID: 7295 RVA: 0x000605C7 File Offset: 0x0005E7C7
			public virtual bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamParentalSettings _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(this._ptr, eFeature);
			}

			// Token: 0x06001C80 RID: 7296 RVA: 0x000605F2 File Offset: 0x0005E7F2
			public virtual bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_InitGameServer(this._ptr, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
			}

			// Token: 0x06001C81 RID: 7297 RVA: 0x00060625 File Offset: 0x0005E825
			public virtual void ISteamGameServer_SetProduct(string pszProduct)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetProduct(this._ptr, pszProduct);
			}

			// Token: 0x06001C82 RID: 7298 RVA: 0x00060650 File Offset: 0x0005E850
			public virtual void ISteamGameServer_SetGameDescription(string pszGameDescription)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameDescription(this._ptr, pszGameDescription);
			}

			// Token: 0x06001C83 RID: 7299 RVA: 0x0006067B File Offset: 0x0005E87B
			public virtual void ISteamGameServer_SetModDir(string pszModDir)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetModDir(this._ptr, pszModDir);
			}

			// Token: 0x06001C84 RID: 7300 RVA: 0x000606A6 File Offset: 0x0005E8A6
			public virtual void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetDedicatedServer(this._ptr, bDedicated);
			}

			// Token: 0x06001C85 RID: 7301 RVA: 0x000606D1 File Offset: 0x0005E8D1
			public virtual void ISteamGameServer_LogOn(string pszToken)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOn(this._ptr, pszToken);
			}

			// Token: 0x06001C86 RID: 7302 RVA: 0x000606FC File Offset: 0x0005E8FC
			public virtual void ISteamGameServer_LogOnAnonymous()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOnAnonymous(this._ptr);
			}

			// Token: 0x06001C87 RID: 7303 RVA: 0x00060726 File Offset: 0x0005E926
			public virtual void ISteamGameServer_LogOff()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_LogOff(this._ptr);
			}

			// Token: 0x06001C88 RID: 7304 RVA: 0x00060750 File Offset: 0x0005E950
			public virtual bool ISteamGameServer_BLoggedOn()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BLoggedOn(this._ptr);
			}

			// Token: 0x06001C89 RID: 7305 RVA: 0x0006077A File Offset: 0x0005E97A
			public virtual bool ISteamGameServer_BSecure()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BSecure(this._ptr);
			}

			// Token: 0x06001C8A RID: 7306 RVA: 0x000607A4 File Offset: 0x0005E9A4
			public virtual CSteamID ISteamGameServer_GetSteamID()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetSteamID(this._ptr);
			}

			// Token: 0x06001C8B RID: 7307 RVA: 0x000607CE File Offset: 0x0005E9CE
			public virtual bool ISteamGameServer_WasRestartRequested()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_WasRestartRequested(this._ptr);
			}

			// Token: 0x06001C8C RID: 7308 RVA: 0x000607F8 File Offset: 0x0005E9F8
			public virtual void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetMaxPlayerCount(this._ptr, cPlayersMax);
			}

			// Token: 0x06001C8D RID: 7309 RVA: 0x00060823 File Offset: 0x0005EA23
			public virtual void ISteamGameServer_SetBotPlayerCount(int cBotplayers)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetBotPlayerCount(this._ptr, cBotplayers);
			}

			// Token: 0x06001C8E RID: 7310 RVA: 0x0006084E File Offset: 0x0005EA4E
			public virtual void ISteamGameServer_SetServerName(string pszServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetServerName(this._ptr, pszServerName);
			}

			// Token: 0x06001C8F RID: 7311 RVA: 0x00060879 File Offset: 0x0005EA79
			public virtual void ISteamGameServer_SetMapName(string pszMapName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetMapName(this._ptr, pszMapName);
			}

			// Token: 0x06001C90 RID: 7312 RVA: 0x000608A4 File Offset: 0x0005EAA4
			public virtual void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetPasswordProtected(this._ptr, bPasswordProtected);
			}

			// Token: 0x06001C91 RID: 7313 RVA: 0x000608CF File Offset: 0x0005EACF
			public virtual void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetSpectatorPort(this._ptr, unSpectatorPort);
			}

			// Token: 0x06001C92 RID: 7314 RVA: 0x000608FA File Offset: 0x0005EAFA
			public virtual void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetSpectatorServerName(this._ptr, pszSpectatorServerName);
			}

			// Token: 0x06001C93 RID: 7315 RVA: 0x00060925 File Offset: 0x0005EB25
			public virtual void ISteamGameServer_ClearAllKeyValues()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_ClearAllKeyValues(this._ptr);
			}

			// Token: 0x06001C94 RID: 7316 RVA: 0x0006094F File Offset: 0x0005EB4F
			public virtual void ISteamGameServer_SetKeyValue(string pKey, string pValue)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetKeyValue(this._ptr, pKey, pValue);
			}

			// Token: 0x06001C95 RID: 7317 RVA: 0x0006097B File Offset: 0x0005EB7B
			public virtual void ISteamGameServer_SetGameTags(string pchGameTags)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameTags(this._ptr, pchGameTags);
			}

			// Token: 0x06001C96 RID: 7318 RVA: 0x000609A6 File Offset: 0x0005EBA6
			public virtual void ISteamGameServer_SetGameData(string pchGameData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetGameData(this._ptr, pchGameData);
			}

			// Token: 0x06001C97 RID: 7319 RVA: 0x000609D1 File Offset: 0x0005EBD1
			public virtual void ISteamGameServer_SetRegion(string pszRegion)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetRegion(this._ptr, pszRegion);
			}

			// Token: 0x06001C98 RID: 7320 RVA: 0x000609FC File Offset: 0x0005EBFC
			public virtual bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(this._ptr, unIPClient, pvAuthBlob, cubAuthBlobSize, out pSteamIDUser);
			}

			// Token: 0x06001C99 RID: 7321 RVA: 0x00060A2B File Offset: 0x0005EC2B
			public virtual CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(this._ptr);
			}

			// Token: 0x06001C9A RID: 7322 RVA: 0x00060A55 File Offset: 0x0005EC55
			public virtual void ISteamGameServer_SendUserDisconnect(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SendUserDisconnect(this._ptr, steamIDUser);
			}

			// Token: 0x06001C9B RID: 7323 RVA: 0x00060A80 File Offset: 0x0005EC80
			public virtual bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BUpdateUserData(this._ptr, steamIDUser, pchPlayerName, uScore);
			}

			// Token: 0x06001C9C RID: 7324 RVA: 0x00060AAD File Offset: 0x0005ECAD
			public virtual HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetAuthSessionTicket(this._ptr, pTicket, cbMaxTicket, out pcbTicket);
			}

			// Token: 0x06001C9D RID: 7325 RVA: 0x00060ADA File Offset: 0x0005ECDA
			public virtual BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_BeginAuthSession(this._ptr, pAuthTicket, cbAuthTicket, steamID);
			}

			// Token: 0x06001C9E RID: 7326 RVA: 0x00060B07 File Offset: 0x0005ED07
			public virtual void ISteamGameServer_EndAuthSession(ulong steamID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_EndAuthSession(this._ptr, steamID);
			}

			// Token: 0x06001C9F RID: 7327 RVA: 0x00060B32 File Offset: 0x0005ED32
			public virtual void ISteamGameServer_CancelAuthTicket(uint hAuthTicket)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_CancelAuthTicket(this._ptr, hAuthTicket);
			}

			// Token: 0x06001CA0 RID: 7328 RVA: 0x00060B5D File Offset: 0x0005ED5D
			public virtual UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_UserHasLicenseForApp(this._ptr, steamID, appID);
			}

			// Token: 0x06001CA1 RID: 7329 RVA: 0x00060B89 File Offset: 0x0005ED89
			public virtual bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_RequestUserGroupStatus(this._ptr, steamIDUser, steamIDGroup);
			}

			// Token: 0x06001CA2 RID: 7330 RVA: 0x00060BB5 File Offset: 0x0005EDB5
			public virtual void ISteamGameServer_GetGameplayStats()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_GetGameplayStats(this._ptr);
			}

			// Token: 0x06001CA3 RID: 7331 RVA: 0x00060BDF File Offset: 0x0005EDDF
			public virtual SteamAPICall_t ISteamGameServer_GetServerReputation()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetServerReputation(this._ptr);
			}

			// Token: 0x06001CA4 RID: 7332 RVA: 0x00060C09 File Offset: 0x0005EE09
			public virtual uint ISteamGameServer_GetPublicIP()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetPublicIP(this._ptr);
			}

			// Token: 0x06001CA5 RID: 7333 RVA: 0x00060C33 File Offset: 0x0005EE33
			public virtual bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_HandleIncomingPacket(this._ptr, pData, cbData, srcIP, srcPort);
			}

			// Token: 0x06001CA6 RID: 7334 RVA: 0x00060C62 File Offset: 0x0005EE62
			public virtual int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(this._ptr, pOut, cbMaxOut, out pNetAdr, out pPort);
			}

			// Token: 0x06001CA7 RID: 7335 RVA: 0x00060C91 File Offset: 0x0005EE91
			public virtual void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_EnableHeartbeats(this._ptr, bActive);
			}

			// Token: 0x06001CA8 RID: 7336 RVA: 0x00060CBC File Offset: 0x0005EEBC
			public virtual void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_SetHeartbeatInterval(this._ptr, iHeartbeatInterval);
			}

			// Token: 0x06001CA9 RID: 7337 RVA: 0x00060CE7 File Offset: 0x0005EEE7
			public virtual void ISteamGameServer_ForceHeartbeat()
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				Platform.Win64.Native.SteamAPI_ISteamGameServer_ForceHeartbeat(this._ptr);
			}

			// Token: 0x06001CAA RID: 7338 RVA: 0x00060D11 File Offset: 0x0005EF11
			public virtual SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_AssociateWithClan(this._ptr, steamIDClan);
			}

			// Token: 0x06001CAB RID: 7339 RVA: 0x00060D3C File Offset: 0x0005EF3C
			public virtual SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServer _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(this._ptr, steamIDNewPlayer);
			}

			// Token: 0x06001CAC RID: 7340 RVA: 0x00060D67 File Offset: 0x0005EF67
			public virtual SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_RequestUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x06001CAD RID: 7341 RVA: 0x00060D92 File Offset: 0x0005EF92
			public virtual bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserStat(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x06001CAE RID: 7342 RVA: 0x00060DBF File Offset: 0x0005EFBF
			public virtual bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserStat0(this._ptr, steamIDUser, pchName, out pData);
			}

			// Token: 0x06001CAF RID: 7343 RVA: 0x00060DEC File Offset: 0x0005EFEC
			public virtual bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_GetUserAchievement(this._ptr, steamIDUser, pchName, ref pbAchieved);
			}

			// Token: 0x06001CB0 RID: 7344 RVA: 0x00060E19 File Offset: 0x0005F019
			public virtual bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserStat(this._ptr, steamIDUser, pchName, nData);
			}

			// Token: 0x06001CB1 RID: 7345 RVA: 0x00060E46 File Offset: 0x0005F046
			public virtual bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserStat0(this._ptr, steamIDUser, pchName, fData);
			}

			// Token: 0x06001CB2 RID: 7346 RVA: 0x00060E73 File Offset: 0x0005F073
			public virtual bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(this._ptr, steamIDUser, pchName, flCountThisSession, dSessionLength);
			}

			// Token: 0x06001CB3 RID: 7347 RVA: 0x00060EA2 File Offset: 0x0005F0A2
			public virtual bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_SetUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x06001CB4 RID: 7348 RVA: 0x00060ECE File Offset: 0x0005F0CE
			public virtual bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_ClearUserAchievement(this._ptr, steamIDUser, pchName);
			}

			// Token: 0x06001CB5 RID: 7349 RVA: 0x00060EFA File Offset: 0x0005F0FA
			public virtual SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser)
			{
				if (this._ptr == IntPtr.Zero)
				{
					throw new Exception("ISteamGameServerStats _ptr is null!");
				}
				return Platform.Win64.Native.SteamAPI_ISteamGameServerStats_StoreUserStats(this._ptr, steamIDUser);
			}

			// Token: 0x06001CB6 RID: 7350 RVA: 0x00060F25 File Offset: 0x0005F125
			public virtual bool SteamApi_SteamAPI_Init()
			{
				return Platform.Win64.Native.SteamAPI_Init();
			}

			// Token: 0x06001CB7 RID: 7351 RVA: 0x00060F2C File Offset: 0x0005F12C
			public virtual void SteamApi_SteamAPI_RunCallbacks()
			{
				Platform.Win64.Native.SteamAPI_RunCallbacks();
			}

			// Token: 0x06001CB8 RID: 7352 RVA: 0x00060F33 File Offset: 0x0005F133
			public virtual void SteamApi_SteamGameServer_RunCallbacks()
			{
				Platform.Win64.Native.SteamGameServer_RunCallbacks();
			}

			// Token: 0x06001CB9 RID: 7353 RVA: 0x00060F3A File Offset: 0x0005F13A
			public virtual void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback)
			{
				Platform.Win64.Native.SteamAPI_RegisterCallback(pCallback, callback);
			}

			// Token: 0x06001CBA RID: 7354 RVA: 0x00060F43 File Offset: 0x0005F143
			public virtual void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback)
			{
				Platform.Win64.Native.SteamAPI_UnregisterCallback(pCallback);
			}

			// Token: 0x06001CBB RID: 7355 RVA: 0x00060F4B File Offset: 0x0005F14B
			public virtual void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win64.Native.SteamAPI_RegisterCallResult(pCallback, callback);
			}

			// Token: 0x06001CBC RID: 7356 RVA: 0x00060F54 File Offset: 0x0005F154
			public virtual void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback)
			{
				Platform.Win64.Native.SteamAPI_UnregisterCallResult(pCallback, callback);
			}

			// Token: 0x06001CBD RID: 7357 RVA: 0x00060F5D File Offset: 0x0005F15D
			public virtual bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString)
			{
				return Platform.Win64.Native.SteamInternal_GameServer_Init(unIP, usPort, usGamePort, usQueryPort, eServerMode, pchVersionString);
			}

			// Token: 0x06001CBE RID: 7358 RVA: 0x00060F6D File Offset: 0x0005F16D
			public virtual void SteamApi_SteamAPI_Shutdown()
			{
				Platform.Win64.Native.SteamAPI_Shutdown();
			}

			// Token: 0x06001CBF RID: 7359 RVA: 0x00060F74 File Offset: 0x0005F174
			public virtual void SteamApi_SteamGameServer_Shutdown()
			{
				Platform.Win64.Native.SteamGameServer_Shutdown();
			}

			// Token: 0x06001CC0 RID: 7360 RVA: 0x00060F7B File Offset: 0x0005F17B
			public virtual HSteamUser SteamApi_SteamAPI_GetHSteamUser()
			{
				return Platform.Win64.Native.SteamAPI_GetHSteamUser();
			}

			// Token: 0x06001CC1 RID: 7361 RVA: 0x00060F82 File Offset: 0x0005F182
			public virtual HSteamPipe SteamApi_SteamAPI_GetHSteamPipe()
			{
				return Platform.Win64.Native.SteamAPI_GetHSteamPipe();
			}

			// Token: 0x06001CC2 RID: 7362 RVA: 0x00060F89 File Offset: 0x0005F189
			public virtual HSteamUser SteamApi_SteamGameServer_GetHSteamUser()
			{
				return Platform.Win64.Native.SteamGameServer_GetHSteamUser();
			}

			// Token: 0x06001CC3 RID: 7363 RVA: 0x00060F90 File Offset: 0x0005F190
			public virtual HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe()
			{
				return Platform.Win64.Native.SteamGameServer_GetHSteamPipe();
			}

			// Token: 0x06001CC4 RID: 7364 RVA: 0x00060F97 File Offset: 0x0005F197
			public virtual IntPtr SteamApi_SteamInternal_CreateInterface(string version)
			{
				return Platform.Win64.Native.SteamInternal_CreateInterface(version);
			}

			// Token: 0x06001CC5 RID: 7365 RVA: 0x00060F9F File Offset: 0x0005F19F
			public virtual bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID)
			{
				return Platform.Win64.Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
			}

			// Token: 0x04000934 RID: 2356
			internal IntPtr _ptr;

			// Token: 0x020002B8 RID: 696
			internal static class Native
			{
				// Token: 0x06002AA8 RID: 10920
				[DllImport("steam_api64.dll")]
				internal static extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(IntPtr ISteamClient);

				// Token: 0x06002AA9 RID: 10921
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06002AAA RID: 10922
				[DllImport("steam_api64.dll")]
				internal static extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(IntPtr ISteamClient, int hSteamPipe);

				// Token: 0x06002AAB RID: 10923
				[DllImport("steam_api64.dll")]
				internal static extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(IntPtr ISteamClient, out int phSteamPipe, AccountType eAccountType);

				// Token: 0x06002AAC RID: 10924
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamClient_ReleaseUser(IntPtr ISteamClient, int hSteamPipe, int hUser);

				// Token: 0x06002AAD RID: 10925
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUser(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AAE RID: 10926
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServer(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AAF RID: 10927
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamClient_SetLocalIPBinding(IntPtr ISteamClient, uint unIP, ushort usPort);

				// Token: 0x06002AB0 RID: 10928
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamFriends(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB1 RID: 10929
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUtils(IntPtr ISteamClient, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB2 RID: 10930
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmaking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB3 RID: 10931
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMatchmakingServers(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB4 RID: 10932
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGenericInterface(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB5 RID: 10933
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUserStats(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB6 RID: 10934
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamGameServerStats(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB7 RID: 10935
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamApps(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB8 RID: 10936
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamNetworking(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AB9 RID: 10937
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamRemoteStorage(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002ABA RID: 10938
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamScreenshots(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002ABB RID: 10939
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamClient_GetIPCCallCount(IntPtr ISteamClient);

				// Token: 0x06002ABC RID: 10940
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamClient_SetWarningMessageHook(IntPtr ISteamClient, IntPtr pFunction);

				// Token: 0x06002ABD RID: 10941
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(IntPtr ISteamClient);

				// Token: 0x06002ABE RID: 10942
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTTP(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002ABF RID: 10943
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamController(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC0 RID: 10944
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamUGC(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC1 RID: 10945
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamAppList(IntPtr ISteamClient, int hSteamUser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC2 RID: 10946
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusic(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC3 RID: 10947
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamMusicRemote(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC4 RID: 10948
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamHTMLSurface(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC5 RID: 10949
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamInventory(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC6 RID: 10950
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamVideo(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC7 RID: 10951
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamClient_GetISteamParentalSettings(IntPtr ISteamClient, int hSteamuser, int hSteamPipe, string pchVersion);

				// Token: 0x06002AC8 RID: 10952
				[DllImport("steam_api64.dll")]
				internal static extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(IntPtr ISteamUser);

				// Token: 0x06002AC9 RID: 10953
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_BLoggedOn(IntPtr ISteamUser);

				// Token: 0x06002ACA RID: 10954
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamUser_GetSteamID(IntPtr ISteamUser);

				// Token: 0x06002ACB RID: 10955
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUser_InitiateGameConnection(IntPtr ISteamUser, IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

				// Token: 0x06002ACC RID: 10956
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_TerminateGameConnection(IntPtr ISteamUser, uint unIPServer, ushort usPortServer);

				// Token: 0x06002ACD RID: 10957
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_TrackAppUsageEvent(IntPtr ISteamUser, ulong gameID, int eAppUsageEvent, string pchExtraInfo);

				// Token: 0x06002ACE RID: 10958
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_GetUserDataFolder(IntPtr ISteamUser, StringBuilder pchBuffer, int cubBuffer);

				// Token: 0x06002ACF RID: 10959
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_StartVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002AD0 RID: 10960
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_StopVoiceRecording(IntPtr ISteamUser);

				// Token: 0x06002AD1 RID: 10961
				[DllImport("steam_api64.dll")]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetAvailableVoice(IntPtr ISteamUser, out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06002AD2 RID: 10962
				[DllImport("steam_api64.dll")]
				internal static extern VoiceResult SteamAPI_ISteamUser_GetVoice(IntPtr ISteamUser, [MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

				// Token: 0x06002AD3 RID: 10963
				[DllImport("steam_api64.dll")]
				internal static extern VoiceResult SteamAPI_ISteamUser_DecompressVoice(IntPtr ISteamUser, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

				// Token: 0x06002AD4 RID: 10964
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(IntPtr ISteamUser);

				// Token: 0x06002AD5 RID: 10965
				[DllImport("steam_api64.dll")]
				internal static extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002AD6 RID: 10966
				[DllImport("steam_api64.dll")]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(IntPtr ISteamUser, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x06002AD7 RID: 10967
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_EndAuthSession(IntPtr ISteamUser, ulong steamID);

				// Token: 0x06002AD8 RID: 10968
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_CancelAuthTicket(IntPtr ISteamUser, uint hAuthTicket);

				// Token: 0x06002AD9 RID: 10969
				[DllImport("steam_api64.dll")]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(IntPtr ISteamUser, ulong steamID, uint appID);

				// Token: 0x06002ADA RID: 10970
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_BIsBehindNAT(IntPtr ISteamUser);

				// Token: 0x06002ADB RID: 10971
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUser_AdvertiseGame(IntPtr ISteamUser, ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

				// Token: 0x06002ADC RID: 10972
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(IntPtr ISteamUser, IntPtr pDataToInclude, int cbDataToInclude);

				// Token: 0x06002ADD RID: 10973
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(IntPtr ISteamUser, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002ADE RID: 10974
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUser_GetGameBadgeLevel(IntPtr ISteamUser, int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

				// Token: 0x06002ADF RID: 10975
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(IntPtr ISteamUser);

				// Token: 0x06002AE0 RID: 10976
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(IntPtr ISteamUser, string pchRedirectURL);

				// Token: 0x06002AE1 RID: 10977
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneVerified(IntPtr ISteamUser);

				// Token: 0x06002AE2 RID: 10978
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(IntPtr ISteamUser);

				// Token: 0x06002AE3 RID: 10979
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(IntPtr ISteamUser);

				// Token: 0x06002AE4 RID: 10980
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(IntPtr ISteamUser);

				// Token: 0x06002AE5 RID: 10981
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPersonaName(IntPtr ISteamFriends);

				// Token: 0x06002AE6 RID: 10982
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(IntPtr ISteamFriends, string pchPersonaName);

				// Token: 0x06002AE7 RID: 10983
				[DllImport("steam_api64.dll")]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetPersonaState(IntPtr ISteamFriends);

				// Token: 0x06002AE8 RID: 10984
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCount(IntPtr ISteamFriends, int iFriendFlags);

				// Token: 0x06002AE9 RID: 10985
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(IntPtr ISteamFriends, int iFriend, int iFriendFlags);

				// Token: 0x06002AEA RID: 10986
				[DllImport("steam_api64.dll")]
				internal static extern FriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002AEB RID: 10987
				[DllImport("steam_api64.dll")]
				internal static extern PersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002AEC RID: 10988
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaName(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002AED RID: 10989
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(IntPtr ISteamFriends, ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

				// Token: 0x06002AEE RID: 10990
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(IntPtr ISteamFriends, ulong steamIDFriend, int iPersonaName);

				// Token: 0x06002AEF RID: 10991
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002AF0 RID: 10992
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetPlayerNickname(IntPtr ISteamFriends, ulong steamIDPlayer);

				// Token: 0x06002AF1 RID: 10993
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(IntPtr ISteamFriends);

				// Token: 0x06002AF2 RID: 10994
				[DllImport("steam_api64.dll")]
				internal static extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(IntPtr ISteamFriends, int iFG);

				// Token: 0x06002AF3 RID: 10995
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendsGroupName(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x06002AF4 RID: 10996
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(IntPtr ISteamFriends, short friendsGroupID);

				// Token: 0x06002AF5 RID: 10997
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(IntPtr ISteamFriends, short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

				// Token: 0x06002AF6 RID: 10998
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_HasFriend(IntPtr ISteamFriends, ulong steamIDFriend, int iFriendFlags);

				// Token: 0x06002AF7 RID: 10999
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetClanCount(IntPtr ISteamFriends);

				// Token: 0x06002AF8 RID: 11000
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(IntPtr ISteamFriends, int iClan);

				// Token: 0x06002AF9 RID: 11001
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanName(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002AFA RID: 11002
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetClanTag(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002AFB RID: 11003
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(IntPtr ISteamFriends, ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

				// Token: 0x06002AFC RID: 11004
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(IntPtr ISteamFriends, IntPtr psteamIDClans, int cClansToRequest);

				// Token: 0x06002AFD RID: 11005
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(IntPtr ISteamFriends, ulong steamIDSource);

				// Token: 0x06002AFE RID: 11006
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(IntPtr ISteamFriends, ulong steamIDSource, int iFriend);

				// Token: 0x06002AFF RID: 11007
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_IsUserInSource(IntPtr ISteamFriends, ulong steamIDUser, ulong steamIDSource);

				// Token: 0x06002B00 RID: 11008
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

				// Token: 0x06002B01 RID: 11009
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlay(IntPtr ISteamFriends, string pchDialog);

				// Token: 0x06002B02 RID: 11010
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(IntPtr ISteamFriends, string pchDialog, ulong steamID);

				// Token: 0x06002B03 RID: 11011
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(IntPtr ISteamFriends, string pchURL);

				// Token: 0x06002B04 RID: 11012
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(IntPtr ISteamFriends, uint nAppID, OverlayToStoreFlag eFlag);

				// Token: 0x06002B05 RID: 11013
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_SetPlayedWith(IntPtr ISteamFriends, ulong steamIDUserPlayedWith);

				// Token: 0x06002B06 RID: 11014
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr ISteamFriends, ulong steamIDLobby);

				// Token: 0x06002B07 RID: 11015
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B08 RID: 11016
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B09 RID: 11017
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B0A RID: 11018
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_RequestUserInformation(IntPtr ISteamFriends, ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

				// Token: 0x06002B0B RID: 11019
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B0C RID: 11020
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B0D RID: 11021
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetClanOfficerCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B0E RID: 11022
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iOfficer);

				// Token: 0x06002B0F RID: 11023
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamFriends_GetUserRestrictions(IntPtr ISteamFriends);

				// Token: 0x06002B10 RID: 11024
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_SetRichPresence(IntPtr ISteamFriends, string pchKey, string pchValue);

				// Token: 0x06002B11 RID: 11025
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_ClearRichPresence(IntPtr ISteamFriends);

				// Token: 0x06002B12 RID: 11026
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend, string pchKey);

				// Token: 0x06002B13 RID: 11027
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B14 RID: 11028
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr ISteamFriends, ulong steamIDFriend, int iKey);

				// Token: 0x06002B15 RID: 11029
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B16 RID: 11030
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_InviteUserToGame(IntPtr ISteamFriends, ulong steamIDFriend, string pchConnectString);

				// Token: 0x06002B17 RID: 11031
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(IntPtr ISteamFriends);

				// Token: 0x06002B18 RID: 11032
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(IntPtr ISteamFriends, int iCoplayFriend);

				// Token: 0x06002B19 RID: 11033
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B1A RID: 11034
				[DllImport("steam_api64.dll")]
				internal static extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(IntPtr ISteamFriends, ulong steamIDFriend);

				// Token: 0x06002B1B RID: 11035
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B1C RID: 11036
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B1D RID: 11037
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B1E RID: 11038
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(IntPtr ISteamFriends, ulong steamIDClan, int iUser);

				// Token: 0x06002B1F RID: 11039
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_SendClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, string pchText);

				// Token: 0x06002B20 RID: 11040
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetClanChatMessage(IntPtr ISteamFriends, ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

				// Token: 0x06002B21 RID: 11041
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(IntPtr ISteamFriends, ulong steamIDClanChat, ulong steamIDUser);

				// Token: 0x06002B22 RID: 11042
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002B23 RID: 11043
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002B24 RID: 11044
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(IntPtr ISteamFriends, ulong steamIDClanChat);

				// Token: 0x06002B25 RID: 11045
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(IntPtr ISteamFriends, [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

				// Token: 0x06002B26 RID: 11046
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, string pchMsgToSend);

				// Token: 0x06002B27 RID: 11047
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamFriends_GetFriendMessage(IntPtr ISteamFriends, ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x06002B28 RID: 11048
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x06002B29 RID: 11049
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(IntPtr ISteamFriends, ulong steamID);

				// Token: 0x06002B2A RID: 11050
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(IntPtr ISteamFriends, uint unStartIndex);

				// Token: 0x06002B2B RID: 11051
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanPublic(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B2C RID: 11052
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(IntPtr ISteamFriends, ulong steamIDClan);

				// Token: 0x06002B2D RID: 11053
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceAppActive(IntPtr ISteamUtils);

				// Token: 0x06002B2E RID: 11054
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(IntPtr ISteamUtils);

				// Token: 0x06002B2F RID: 11055
				[DllImport("steam_api64.dll")]
				internal static extern Universe SteamAPI_ISteamUtils_GetConnectedUniverse(IntPtr ISteamUtils);

				// Token: 0x06002B30 RID: 11056
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUtils_GetServerRealTime(IntPtr ISteamUtils);

				// Token: 0x06002B31 RID: 11057
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetIPCountry(IntPtr ISteamUtils);

				// Token: 0x06002B32 RID: 11058
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_GetImageSize(IntPtr ISteamUtils, int iImage, out uint pnWidth, out uint pnHeight);

				// Token: 0x06002B33 RID: 11059
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_GetImageRGBA(IntPtr ISteamUtils, int iImage, IntPtr pubDest, int nDestBufferSize);

				// Token: 0x06002B34 RID: 11060
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_GetCSERIPPort(IntPtr ISteamUtils, out uint unIP, out ushort usPort);

				// Token: 0x06002B35 RID: 11061
				[DllImport("steam_api64.dll")]
				internal static extern byte SteamAPI_ISteamUtils_GetCurrentBatteryPower(IntPtr ISteamUtils);

				// Token: 0x06002B36 RID: 11062
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUtils_GetAppID(IntPtr ISteamUtils);

				// Token: 0x06002B37 RID: 11063
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(IntPtr ISteamUtils, NotificationPosition eNotificationPosition);

				// Token: 0x06002B38 RID: 11064
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(IntPtr ISteamUtils, ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x06002B39 RID: 11065
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(IntPtr ISteamUtils, ulong hSteamAPICall);

				// Token: 0x06002B3A RID: 11066
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_GetAPICallResult(IntPtr ISteamUtils, ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

				// Token: 0x06002B3B RID: 11067
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUtils_GetIPCCallCount(IntPtr ISteamUtils);

				// Token: 0x06002B3C RID: 11068
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUtils_SetWarningMessageHook(IntPtr ISteamUtils, IntPtr pFunction);

				// Token: 0x06002B3D RID: 11069
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(IntPtr ISteamUtils);

				// Token: 0x06002B3E RID: 11070
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(IntPtr ISteamUtils);

				// Token: 0x06002B3F RID: 11071
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(IntPtr ISteamUtils, string szFileName);

				// Token: 0x06002B40 RID: 11072
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(IntPtr ISteamUtils, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

				// Token: 0x06002B41 RID: 11073
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(IntPtr ISteamUtils);

				// Token: 0x06002B42 RID: 11074
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(IntPtr ISteamUtils, StringBuilder pchText, uint cchText);

				// Token: 0x06002B43 RID: 11075
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamUtils_GetSteamUILanguage(IntPtr ISteamUtils);

				// Token: 0x06002B44 RID: 11076
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(IntPtr ISteamUtils);

				// Token: 0x06002B45 RID: 11077
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(IntPtr ISteamUtils, int nHorizontalInset, int nVerticalInset);

				// Token: 0x06002B46 RID: 11078
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(IntPtr ISteamUtils);

				// Token: 0x06002B47 RID: 11079
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUtils_StartVRDashboard(IntPtr ISteamUtils);

				// Token: 0x06002B48 RID: 11080
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr ISteamUtils);

				// Token: 0x06002B49 RID: 11081
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr ISteamUtils, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x06002B4A RID: 11082
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(IntPtr ISteamMatchmaking);

				// Token: 0x06002B4B RID: 11083
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(IntPtr ISteamMatchmaking, int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

				// Token: 0x06002B4C RID: 11084
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

				// Token: 0x06002B4D RID: 11085
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(IntPtr ISteamMatchmaking, uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

				// Token: 0x06002B4E RID: 11086
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(IntPtr ISteamMatchmaking);

				// Token: 0x06002B4F RID: 11087
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x06002B50 RID: 11088
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

				// Token: 0x06002B51 RID: 11089
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr ISteamMatchmaking, string pchKeyToMatch, int nValueToBeCloseTo);

				// Token: 0x06002B52 RID: 11090
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr ISteamMatchmaking, int nSlotsAvailable);

				// Token: 0x06002B53 RID: 11091
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr ISteamMatchmaking, LobbyDistanceFilter eLobbyDistanceFilter);

				// Token: 0x06002B54 RID: 11092
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr ISteamMatchmaking, int cMaxResults);

				// Token: 0x06002B55 RID: 11093
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B56 RID: 11094
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(IntPtr ISteamMatchmaking, int iLobby);

				// Token: 0x06002B57 RID: 11095
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(IntPtr ISteamMatchmaking, LobbyType eLobbyType, int cMaxMembers);

				// Token: 0x06002B58 RID: 11096
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B59 RID: 11097
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_LeaveLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B5A RID: 11098
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDInvitee);

				// Token: 0x06002B5B RID: 11099
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B5C RID: 11100
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iMember);

				// Token: 0x06002B5D RID: 11101
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x06002B5E RID: 11102
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x06002B5F RID: 11103
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B60 RID: 11104
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

				// Token: 0x06002B61 RID: 11105
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey);

				// Token: 0x06002B62 RID: 11106
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamMatchmaking_GetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDUser, string pchKey);

				// Token: 0x06002B63 RID: 11107
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(IntPtr ISteamMatchmaking, ulong steamIDLobby, string pchKey, string pchValue);

				// Token: 0x06002B64 RID: 11108
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(IntPtr ISteamMatchmaking, ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

				// Token: 0x06002B65 RID: 11109
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(IntPtr ISteamMatchmaking, ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

				// Token: 0x06002B66 RID: 11110
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B67 RID: 11111
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

				// Token: 0x06002B68 RID: 11112
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(IntPtr ISteamMatchmaking, ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

				// Token: 0x06002B69 RID: 11113
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby, int cMaxMembers);

				// Token: 0x06002B6A RID: 11114
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B6B RID: 11115
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(IntPtr ISteamMatchmaking, ulong steamIDLobby, LobbyType eLobbyType);

				// Token: 0x06002B6C RID: 11116
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(IntPtr ISteamMatchmaking, ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

				// Token: 0x06002B6D RID: 11117
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby);

				// Token: 0x06002B6E RID: 11118
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDNewOwner);

				// Token: 0x06002B6F RID: 11119
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(IntPtr ISteamMatchmaking, ulong steamIDLobby, ulong steamIDLobbyDependent);

				// Token: 0x06002B70 RID: 11120
				[DllImport("steam_api64.dll")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002B71 RID: 11121
				[DllImport("steam_api64.dll")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestLANServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr pRequestServersResponse);

				// Token: 0x06002B72 RID: 11122
				[DllImport("steam_api64.dll")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002B73 RID: 11123
				[DllImport("steam_api64.dll")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002B74 RID: 11124
				[DllImport("steam_api64.dll")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002B75 RID: 11125
				[DllImport("steam_api64.dll")]
				internal static extern HServerListRequest SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr ISteamMatchmakingServers, uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

				// Token: 0x06002B76 RID: 11126
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(IntPtr ISteamMatchmakingServers, IntPtr hServerListRequest);

				// Token: 0x06002B77 RID: 11127
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamMatchmakingServers_GetServerDetails(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002B78 RID: 11128
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002B79 RID: 11129
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002B7A RID: 11130
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002B7B RID: 11131
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(IntPtr ISteamMatchmakingServers, IntPtr hRequest);

				// Token: 0x06002B7C RID: 11132
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(IntPtr ISteamMatchmakingServers, IntPtr hRequest, int iServer);

				// Token: 0x06002B7D RID: 11133
				[DllImport("steam_api64.dll")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PingServer(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002B7E RID: 11134
				[DllImport("steam_api64.dll")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_PlayerDetails(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002B7F RID: 11135
				[DllImport("steam_api64.dll")]
				internal static extern HServerQuery SteamAPI_ISteamMatchmakingServers_ServerRules(IntPtr ISteamMatchmakingServers, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

				// Token: 0x06002B80 RID: 11136
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(IntPtr ISteamMatchmakingServers, int hServerQuery);

				// Token: 0x06002B81 RID: 11137
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWrite(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubData);

				// Token: 0x06002B82 RID: 11138
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamRemoteStorage_FileRead(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, int cubDataToRead);

				// Token: 0x06002B83 RID: 11139
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(IntPtr ISteamRemoteStorage, string pchFile, IntPtr pvData, uint cubData);

				// Token: 0x06002B84 RID: 11140
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(IntPtr ISteamRemoteStorage, string pchFile, uint nOffset, uint cubToRead);

				// Token: 0x06002B85 RID: 11141
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(IntPtr ISteamRemoteStorage, ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

				// Token: 0x06002B86 RID: 11142
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileForget(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B87 RID: 11143
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileDelete(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B88 RID: 11144
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B89 RID: 11145
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

				// Token: 0x06002B8A RID: 11146
				[DllImport("steam_api64.dll")]
				internal static extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B8B RID: 11147
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr ISteamRemoteStorage, ulong writeHandle, IntPtr pvData, int cubData);

				// Token: 0x06002B8C RID: 11148
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002B8D RID: 11149
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(IntPtr ISteamRemoteStorage, ulong writeHandle);

				// Token: 0x06002B8E RID: 11150
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FileExists(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B8F RID: 11151
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B90 RID: 11152
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileSize(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B91 RID: 11153
				[DllImport("steam_api64.dll")]
				internal static extern long SteamAPI_ISteamRemoteStorage_GetFileTimestamp(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B92 RID: 11154
				[DllImport("steam_api64.dll")]
				internal static extern RemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(IntPtr ISteamRemoteStorage, string pchFile);

				// Token: 0x06002B93 RID: 11155
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetFileCount(IntPtr ISteamRemoteStorage);

				// Token: 0x06002B94 RID: 11156
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(IntPtr ISteamRemoteStorage, int iFile, out int pnFileSizeInBytes);

				// Token: 0x06002B95 RID: 11157
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetQuota(IntPtr ISteamRemoteStorage, out ulong pnTotalBytes, out ulong puAvailableBytes);

				// Token: 0x06002B96 RID: 11158
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr ISteamRemoteStorage);

				// Token: 0x06002B97 RID: 11159
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr ISteamRemoteStorage);

				// Token: 0x06002B98 RID: 11160
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr ISteamRemoteStorage, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

				// Token: 0x06002B99 RID: 11161
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(IntPtr ISteamRemoteStorage, ulong hContent, uint unPriority);

				// Token: 0x06002B9A RID: 11162
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr ISteamRemoteStorage, ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

				// Token: 0x06002B9B RID: 11163
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(IntPtr ISteamRemoteStorage, ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

				// Token: 0x06002B9C RID: 11164
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamRemoteStorage_UGCRead(IntPtr ISteamRemoteStorage, ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

				// Token: 0x06002B9D RID: 11165
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(IntPtr ISteamRemoteStorage);

				// Token: 0x06002B9E RID: 11166
				[DllImport("steam_api64.dll")]
				internal static extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(IntPtr ISteamRemoteStorage, int iCachedContent);

				// Token: 0x06002B9F RID: 11167
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(IntPtr ISteamRemoteStorage, string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

				// Token: 0x06002BA0 RID: 11168
				[DllImport("steam_api64.dll")]
				internal static extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002BA1 RID: 11169
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchFile);

				// Token: 0x06002BA2 RID: 11170
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchPreviewFile);

				// Token: 0x06002BA3 RID: 11171
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchTitle);

				// Token: 0x06002BA4 RID: 11172
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchDescription);

				// Token: 0x06002BA5 RID: 11173
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr ISteamRemoteStorage, ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x06002BA6 RID: 11174
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr ISteamRemoteStorage, ulong updateHandle, ref SteamParamStringArray_t pTags);

				// Token: 0x06002BA7 RID: 11175
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr ISteamRemoteStorage, ulong updateHandle);

				// Token: 0x06002BA8 RID: 11176
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, uint unMaxSecondsOld);

				// Token: 0x06002BA9 RID: 11177
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002BAA RID: 11178
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x06002BAB RID: 11179
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002BAC RID: 11180
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr ISteamRemoteStorage, uint unStartIndex);

				// Token: 0x06002BAD RID: 11181
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002BAE RID: 11182
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr ISteamRemoteStorage, ulong updateHandle, string pchChangeDescription);

				// Token: 0x06002BAF RID: 11183
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002BB0 RID: 11184
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x06002BB1 RID: 11185
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr ISteamRemoteStorage, ulong unPublishedFileId);

				// Token: 0x06002BB2 RID: 11186
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr ISteamRemoteStorage, ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

				// Token: 0x06002BB3 RID: 11187
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(IntPtr ISteamRemoteStorage, WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

				// Token: 0x06002BB4 RID: 11188
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr ISteamRemoteStorage, ulong unPublishedFileId, WorkshopFileAction eAction);

				// Token: 0x06002BB5 RID: 11189
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr ISteamRemoteStorage, WorkshopFileAction eAction, uint unStartIndex);

				// Token: 0x06002BB6 RID: 11190
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr ISteamRemoteStorage, WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

				// Token: 0x06002BB7 RID: 11191
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(IntPtr ISteamRemoteStorage, ulong hContent, string pchLocation, uint unPriority);

				// Token: 0x06002BB8 RID: 11192
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(IntPtr ISteamUserStats);

				// Token: 0x06002BB9 RID: 11193
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat(IntPtr ISteamUserStats, string pchName, out int pData);

				// Token: 0x06002BBA RID: 11194
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetStat0(IntPtr ISteamUserStats, string pchName, out float pData);

				// Token: 0x06002BBB RID: 11195
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat(IntPtr ISteamUserStats, string pchName, int nData);

				// Token: 0x06002BBC RID: 11196
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_SetStat0(IntPtr ISteamUserStats, string pchName, float fData);

				// Token: 0x06002BBD RID: 11197
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(IntPtr ISteamUserStats, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x06002BBE RID: 11198
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievement(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002BBF RID: 11199
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_SetAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002BC0 RID: 11200
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_ClearAchievement(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002BC1 RID: 11201
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(IntPtr ISteamUserStats, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002BC2 RID: 11202
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_StoreStats(IntPtr ISteamUserStats);

				// Token: 0x06002BC3 RID: 11203
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUserStats_GetAchievementIcon(IntPtr ISteamUserStats, string pchName);

				// Token: 0x06002BC4 RID: 11204
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(IntPtr ISteamUserStats, string pchName, string pchKey);

				// Token: 0x06002BC5 RID: 11205
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(IntPtr ISteamUserStats, string pchName, uint nCurProgress, uint nMaxProgress);

				// Token: 0x06002BC6 RID: 11206
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUserStats_GetNumAchievements(IntPtr ISteamUserStats);

				// Token: 0x06002BC7 RID: 11207
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetAchievementName(IntPtr ISteamUserStats, uint iAchievement);

				// Token: 0x06002BC8 RID: 11208
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(IntPtr ISteamUserStats, ulong steamIDUser);

				// Token: 0x06002BC9 RID: 11209
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002BCA RID: 11210
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserStat0(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x06002BCB RID: 11211
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievement(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002BCC RID: 11212
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr ISteamUserStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

				// Token: 0x06002BCD RID: 11213
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_ResetAllStats(IntPtr ISteamUserStats, [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

				// Token: 0x06002BCE RID: 11214
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

				// Token: 0x06002BCF RID: 11215
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(IntPtr ISteamUserStats, string pchLeaderboardName);

				// Token: 0x06002BD0 RID: 11216
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamUserStats_GetLeaderboardName(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002BD1 RID: 11217
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002BD2 RID: 11218
				[DllImport("steam_api64.dll")]
				internal static extern LeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002BD3 RID: 11219
				[DllImport("steam_api64.dll")]
				internal static extern LeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(IntPtr ISteamUserStats, ulong hSteamLeaderboard);

				// Token: 0x06002BD4 RID: 11220
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

				// Token: 0x06002BD5 RID: 11221
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr ISteamUserStats, ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

				// Token: 0x06002BD6 RID: 11222
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr ISteamUserStats, ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

				// Token: 0x06002BD7 RID: 11223
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(IntPtr ISteamUserStats, ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

				// Token: 0x06002BD8 RID: 11224
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(IntPtr ISteamUserStats, ulong hSteamLeaderboard, ulong hUGC);

				// Token: 0x06002BD9 RID: 11225
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr ISteamUserStats);

				// Token: 0x06002BDA RID: 11226
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr ISteamUserStats);

				// Token: 0x06002BDB RID: 11227
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr ISteamUserStats, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002BDC RID: 11228
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr ISteamUserStats, int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002BDD RID: 11229
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(IntPtr ISteamUserStats, string pchName, out float pflPercent);

				// Token: 0x06002BDE RID: 11230
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(IntPtr ISteamUserStats, int nHistoryDays);

				// Token: 0x06002BDF RID: 11231
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat(IntPtr ISteamUserStats, string pchStatName, out long pData);

				// Token: 0x06002BE0 RID: 11232
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(IntPtr ISteamUserStats, string pchStatName, out double pData);

				// Token: 0x06002BE1 RID: 11233
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory(IntPtr ISteamUserStats, string pchStatName, out long pData, uint cubData);

				// Token: 0x06002BE2 RID: 11234
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamUserStats_GetGlobalStatHistory0(IntPtr ISteamUserStats, string pchStatName, out double pData, uint cubData);

				// Token: 0x06002BE3 RID: 11235
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribed(IntPtr ISteamApps);

				// Token: 0x06002BE4 RID: 11236
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsLowViolence(IntPtr ISteamApps);

				// Token: 0x06002BE5 RID: 11237
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsCybercafe(IntPtr ISteamApps);

				// Token: 0x06002BE6 RID: 11238
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsVACBanned(IntPtr ISteamApps);

				// Token: 0x06002BE7 RID: 11239
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetCurrentGameLanguage(IntPtr ISteamApps);

				// Token: 0x06002BE8 RID: 11240
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetAvailableGameLanguages(IntPtr ISteamApps);

				// Token: 0x06002BE9 RID: 11241
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedApp(IntPtr ISteamApps, uint appID);

				// Token: 0x06002BEA RID: 11242
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsDlcInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x06002BEB RID: 11243
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002BEC RID: 11244
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr ISteamApps);

				// Token: 0x06002BED RID: 11245
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamApps_GetDLCCount(IntPtr ISteamApps);

				// Token: 0x06002BEE RID: 11246
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(IntPtr ISteamApps, int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x06002BEF RID: 11247
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamApps_InstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002BF0 RID: 11248
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamApps_UninstallDLC(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002BF1 RID: 11249
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(IntPtr ISteamApps, uint nAppID);

				// Token: 0x06002BF2 RID: 11250
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_GetCurrentBetaName(IntPtr ISteamApps, StringBuilder pchName, int cchNameBufferSize);

				// Token: 0x06002BF3 RID: 11251
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_MarkContentCorrupt(IntPtr ISteamApps, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

				// Token: 0x06002BF4 RID: 11252
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamApps_GetInstalledDepots(IntPtr ISteamApps, uint appID, IntPtr pvecDepots, uint cMaxDepots);

				// Token: 0x06002BF5 RID: 11253
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamApps_GetAppInstallDir(IntPtr ISteamApps, uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

				// Token: 0x06002BF6 RID: 11254
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_BIsAppInstalled(IntPtr ISteamApps, uint appID);

				// Token: 0x06002BF7 RID: 11255
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamApps_GetAppOwner(IntPtr ISteamApps);

				// Token: 0x06002BF8 RID: 11256
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamApps_GetLaunchQueryParam(IntPtr ISteamApps, string pchKey);

				// Token: 0x06002BF9 RID: 11257
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(IntPtr ISteamApps, uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x06002BFA RID: 11258
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamApps_GetAppBuildId(IntPtr ISteamApps);

				// Token: 0x06002BFB RID: 11259
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr ISteamApps);

				// Token: 0x06002BFC RID: 11260
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(IntPtr ISteamApps, string pszFileName);

				// Token: 0x06002BFD RID: 11261
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_SendP2PPacket(IntPtr ISteamNetworking, ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

				// Token: 0x06002BFE RID: 11262
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(IntPtr ISteamNetworking, out uint pcubMsgSize, int nChannel);

				// Token: 0x06002BFF RID: 11263
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(IntPtr ISteamNetworking, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

				// Token: 0x06002C00 RID: 11264
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x06002C01 RID: 11265
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(IntPtr ISteamNetworking, ulong steamIDRemote);

				// Token: 0x06002C02 RID: 11266
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(IntPtr ISteamNetworking, ulong steamIDRemote, int nChannel);

				// Token: 0x06002C03 RID: 11267
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(IntPtr ISteamNetworking, ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

				// Token: 0x06002C04 RID: 11268
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(IntPtr ISteamNetworking, [MarshalAs(UnmanagedType.U1)] bool bAllow);

				// Token: 0x06002C05 RID: 11269
				[DllImport("steam_api64.dll")]
				internal static extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(IntPtr ISteamNetworking, int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x06002C06 RID: 11270
				[DllImport("steam_api64.dll")]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(IntPtr ISteamNetworking, ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

				// Token: 0x06002C07 RID: 11271
				[DllImport("steam_api64.dll")]
				internal static extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(IntPtr ISteamNetworking, uint nIP, ushort nPort, int nTimeoutSec);

				// Token: 0x06002C08 RID: 11272
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_DestroySocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x06002C09 RID: 11273
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(IntPtr ISteamNetworking, uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

				// Token: 0x06002C0A RID: 11274
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

				// Token: 0x06002C0B RID: 11275
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(IntPtr ISteamNetworking, uint hSocket, out uint pcubMsgSize);

				// Token: 0x06002C0C RID: 11276
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(IntPtr ISteamNetworking, uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

				// Token: 0x06002C0D RID: 11277
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_IsDataAvailable(IntPtr ISteamNetworking, uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x06002C0E RID: 11278
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_RetrieveData(IntPtr ISteamNetworking, uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

				// Token: 0x06002C0F RID: 11279
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_GetSocketInfo(IntPtr ISteamNetworking, uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

				// Token: 0x06002C10 RID: 11280
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(IntPtr ISteamNetworking, uint hListenSocket, out uint pnIP, out ushort pnPort);

				// Token: 0x06002C11 RID: 11281
				[DllImport("steam_api64.dll")]
				internal static extern SNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x06002C12 RID: 11282
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(IntPtr ISteamNetworking, uint hSocket);

				// Token: 0x06002C13 RID: 11283
				[DllImport("steam_api64.dll")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(IntPtr ISteamScreenshots, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

				// Token: 0x06002C14 RID: 11284
				[DllImport("steam_api64.dll")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(IntPtr ISteamScreenshots, string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

				// Token: 0x06002C15 RID: 11285
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(IntPtr ISteamScreenshots);

				// Token: 0x06002C16 RID: 11286
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamScreenshots_HookScreenshots(IntPtr ISteamScreenshots, [MarshalAs(UnmanagedType.U1)] bool bHook);

				// Token: 0x06002C17 RID: 11287
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamScreenshots_SetLocation(IntPtr ISteamScreenshots, uint hScreenshot, string pchLocation);

				// Token: 0x06002C18 RID: 11288
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamScreenshots_TagUser(IntPtr ISteamScreenshots, uint hScreenshot, ulong steamID);

				// Token: 0x06002C19 RID: 11289
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(IntPtr ISteamScreenshots, uint hScreenshot, ulong unPublishedFileID);

				// Token: 0x06002C1A RID: 11290
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(IntPtr ISteamScreenshots);

				// Token: 0x06002C1B RID: 11291
				[DllImport("steam_api64.dll")]
				internal static extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr ISteamScreenshots, VRScreenshotType eType, string pchFilename, string pchVRFilename);

				// Token: 0x06002C1C RID: 11292
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusic_BIsEnabled(IntPtr ISteamMusic);

				// Token: 0x06002C1D RID: 11293
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusic_BIsPlaying(IntPtr ISteamMusic);

				// Token: 0x06002C1E RID: 11294
				[DllImport("steam_api64.dll")]
				internal static extern AudioPlayback_Status SteamAPI_ISteamMusic_GetPlaybackStatus(IntPtr ISteamMusic);

				// Token: 0x06002C1F RID: 11295
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMusic_Play(IntPtr ISteamMusic);

				// Token: 0x06002C20 RID: 11296
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMusic_Pause(IntPtr ISteamMusic);

				// Token: 0x06002C21 RID: 11297
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMusic_PlayPrevious(IntPtr ISteamMusic);

				// Token: 0x06002C22 RID: 11298
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMusic_PlayNext(IntPtr ISteamMusic);

				// Token: 0x06002C23 RID: 11299
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamMusic_SetVolume(IntPtr ISteamMusic, float flVolume);

				// Token: 0x06002C24 RID: 11300
				[DllImport("steam_api64.dll")]
				internal static extern float SteamAPI_ISteamMusic_GetVolume(IntPtr ISteamMusic);

				// Token: 0x06002C25 RID: 11301
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr ISteamMusicRemote, string pchName);

				// Token: 0x06002C26 RID: 11302
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x06002C27 RID: 11303
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr ISteamMusicRemote);

				// Token: 0x06002C28 RID: 11304
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C29 RID: 11305
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(IntPtr ISteamMusicRemote, string pchDisplayName);

				// Token: 0x06002C2A RID: 11306
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x06002C2B RID: 11307
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C2C RID: 11308
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C2D RID: 11309
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C2E RID: 11310
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C2F RID: 11311
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnableQueue(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C30 RID: 11312
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C31 RID: 11313
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(IntPtr ISteamMusicRemote, AudioPlayback_Status nStatus);

				// Token: 0x06002C32 RID: 11314
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C33 RID: 11315
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002C34 RID: 11316
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(IntPtr ISteamMusicRemote, float flValue);

				// Token: 0x06002C35 RID: 11317
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002C36 RID: 11318
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr ISteamMusicRemote, [MarshalAs(UnmanagedType.U1)] bool bAvailable);

				// Token: 0x06002C37 RID: 11319
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(IntPtr ISteamMusicRemote, string pchText);

				// Token: 0x06002C38 RID: 11320
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr ISteamMusicRemote, int nValue);

				// Token: 0x06002C39 RID: 11321
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr ISteamMusicRemote, IntPtr pvBuffer, uint cbBufferLength);

				// Token: 0x06002C3A RID: 11322
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002C3B RID: 11323
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002C3C RID: 11324
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(IntPtr ISteamMusicRemote);

				// Token: 0x06002C3D RID: 11325
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x06002C3E RID: 11326
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x06002C3F RID: 11327
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002C40 RID: 11328
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002C41 RID: 11329
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(IntPtr ISteamMusicRemote);

				// Token: 0x06002C42 RID: 11330
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(IntPtr ISteamMusicRemote, int nID, int nPosition, string pchEntryText);

				// Token: 0x06002C43 RID: 11331
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr ISteamMusicRemote, int nID);

				// Token: 0x06002C44 RID: 11332
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(IntPtr ISteamMusicRemote);

				// Token: 0x06002C45 RID: 11333
				[DllImport("steam_api64.dll")]
				internal static extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(IntPtr ISteamHTTP, HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

				// Token: 0x06002C46 RID: 11334
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(IntPtr ISteamHTTP, uint hRequest, ulong ulContextValue);

				// Token: 0x06002C47 RID: 11335
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr ISteamHTTP, uint hRequest, uint unTimeoutSeconds);

				// Token: 0x06002C48 RID: 11336
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, string pchHeaderValue);

				// Token: 0x06002C49 RID: 11337
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr ISteamHTTP, uint hRequest, string pchParamName, string pchParamValue);

				// Token: 0x06002C4A RID: 11338
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x06002C4B RID: 11339
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr ISteamHTTP, uint hRequest, ref ulong pCallHandle);

				// Token: 0x06002C4C RID: 11340
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002C4D RID: 11341
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002C4E RID: 11342
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

				// Token: 0x06002C4F RID: 11343
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr ISteamHTTP, uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

				// Token: 0x06002C50 RID: 11344
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(IntPtr ISteamHTTP, uint hRequest, out uint unBodySize);

				// Token: 0x06002C51 RID: 11345
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(IntPtr ISteamHTTP, uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x06002C52 RID: 11346
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr ISteamHTTP, uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

				// Token: 0x06002C53 RID: 11347
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(IntPtr ISteamHTTP, uint hRequest);

				// Token: 0x06002C54 RID: 11348
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr ISteamHTTP, uint hRequest, out float pflPercentOut);

				// Token: 0x06002C55 RID: 11349
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr ISteamHTTP, uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

				// Token: 0x06002C56 RID: 11350
				[DllImport("steam_api64.dll")]
				internal static extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(IntPtr ISteamHTTP, [MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

				// Token: 0x06002C57 RID: 11351
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(IntPtr ISteamHTTP, uint hCookieContainer);

				// Token: 0x06002C58 RID: 11352
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetCookie(IntPtr ISteamHTTP, uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

				// Token: 0x06002C59 RID: 11353
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr ISteamHTTP, uint hRequest, uint hCookieContainer);

				// Token: 0x06002C5A RID: 11354
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr ISteamHTTP, uint hRequest, string pchUserAgentInfo);

				// Token: 0x06002C5B RID: 11355
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

				// Token: 0x06002C5C RID: 11356
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr ISteamHTTP, uint hRequest, uint unMilliseconds);

				// Token: 0x06002C5D RID: 11357
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr ISteamHTTP, uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

				// Token: 0x06002C5E RID: 11358
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamController_Init(IntPtr ISteamController);

				// Token: 0x06002C5F RID: 11359
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamController_Shutdown(IntPtr ISteamController);

				// Token: 0x06002C60 RID: 11360
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_RunFrame(IntPtr ISteamController);

				// Token: 0x06002C61 RID: 11361
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamController_GetConnectedControllers(IntPtr ISteamController, IntPtr handlesOut);

				// Token: 0x06002C62 RID: 11362
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamController_ShowBindingPanel(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002C63 RID: 11363
				[DllImport("steam_api64.dll")]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(IntPtr ISteamController, string pszActionSetName);

				// Token: 0x06002C64 RID: 11364
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_ActivateActionSet(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle);

				// Token: 0x06002C65 RID: 11365
				[DllImport("steam_api64.dll")]
				internal static extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002C66 RID: 11366
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_ActivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x06002C67 RID: 11367
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_DeactivateActionSetLayer(IntPtr ISteamController, ulong controllerHandle, ulong actionSetLayerHandle);

				// Token: 0x06002C68 RID: 11368
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002C69 RID: 11369
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamController_GetActiveActionSetLayers(IntPtr ISteamController, ulong controllerHandle, IntPtr handlesOut);

				// Token: 0x06002C6A RID: 11370
				[DllImport("steam_api64.dll")]
				internal static extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x06002C6B RID: 11371
				[DllImport("steam_api64.dll")]
				internal static extern ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle);

				// Token: 0x06002C6C RID: 11372
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamController_GetDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x06002C6D RID: 11373
				[DllImport("steam_api64.dll")]
				internal static extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(IntPtr ISteamController, string pszActionName);

				// Token: 0x06002C6E RID: 11374
				[DllImport("steam_api64.dll")]
				internal static extern ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle);

				// Token: 0x06002C6F RID: 11375
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamController_GetAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

				// Token: 0x06002C70 RID: 11376
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_StopAnalogActionMomentum(IntPtr ISteamController, ulong controllerHandle, ulong eAction);

				// Token: 0x06002C71 RID: 11377
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_TriggerHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

				// Token: 0x06002C72 RID: 11378
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(IntPtr ISteamController, ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

				// Token: 0x06002C73 RID: 11379
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_TriggerVibration(IntPtr ISteamController, ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

				// Token: 0x06002C74 RID: 11380
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamController_SetLEDColor(IntPtr ISteamController, ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

				// Token: 0x06002C75 RID: 11381
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamController_GetGamepadIndexForController(IntPtr ISteamController, ulong ulControllerHandle);

				// Token: 0x06002C76 RID: 11382
				[DllImport("steam_api64.dll")]
				internal static extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(IntPtr ISteamController, int nIndex);

				// Token: 0x06002C77 RID: 11383
				[DllImport("steam_api64.dll")]
				internal static extern ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002C78 RID: 11384
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002C79 RID: 11385
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(IntPtr ISteamController, ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

				// Token: 0x06002C7A RID: 11386
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamController_GetStringForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002C7B RID: 11387
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamAPI_ISteamController_GetGlyphForActionOrigin(IntPtr ISteamController, ControllerActionOrigin eOrigin);

				// Token: 0x06002C7C RID: 11388
				[DllImport("steam_api64.dll")]
				internal static extern SteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(IntPtr ISteamController, ulong controllerHandle);

				// Token: 0x06002C7D RID: 11389
				[DllImport("steam_api64.dll")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(IntPtr ISteamUGC, uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x06002C7E RID: 11390
				[DllImport("steam_api64.dll")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(IntPtr ISteamUGC, UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

				// Token: 0x06002C7F RID: 11391
				[DllImport("steam_api64.dll")]
				internal static extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002C80 RID: 11392
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x06002C81 RID: 11393
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(IntPtr ISteamUGC, ulong handle, uint index, ref SteamUGCDetails_t pDetails);

				// Token: 0x06002C82 RID: 11394
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

				// Token: 0x06002C83 RID: 11395
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(IntPtr ISteamUGC, ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

				// Token: 0x06002C84 RID: 11396
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(IntPtr ISteamUGC, ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x06002C85 RID: 11397
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(IntPtr ISteamUGC, ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

				// Token: 0x06002C86 RID: 11398
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002C87 RID: 11399
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr ISteamUGC, ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

				// Token: 0x06002C88 RID: 11400
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002C89 RID: 11401
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(IntPtr ISteamUGC, ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

				// Token: 0x06002C8A RID: 11402
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(IntPtr ISteamUGC, ulong handle);

				// Token: 0x06002C8B RID: 11403
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002C8C RID: 11404
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_AddExcludedTag(IntPtr ISteamUGC, ulong handle, string pTagName);

				// Token: 0x06002C8D RID: 11405
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

				// Token: 0x06002C8E RID: 11406
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

				// Token: 0x06002C8F RID: 11407
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

				// Token: 0x06002C90 RID: 11408
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnMetadata(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

				// Token: 0x06002C91 RID: 11409
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnChildren(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

				// Token: 0x06002C92 RID: 11410
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

				// Token: 0x06002C93 RID: 11411
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

				// Token: 0x06002C94 RID: 11412
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x06002C95 RID: 11413
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x06002C96 RID: 11414
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(IntPtr ISteamUGC, ulong handle, uint unMaxAgeSeconds);

				// Token: 0x06002C97 RID: 11415
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(IntPtr ISteamUGC, ulong handle, string pMatchCloudFileName);

				// Token: 0x06002C98 RID: 11416
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(IntPtr ISteamUGC, ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

				// Token: 0x06002C99 RID: 11417
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetSearchText(IntPtr ISteamUGC, ulong handle, string pSearchText);

				// Token: 0x06002C9A RID: 11418
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(IntPtr ISteamUGC, ulong handle, uint unDays);

				// Token: 0x06002C9B RID: 11419
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(IntPtr ISteamUGC, ulong handle, string pKey, string pValue);

				// Token: 0x06002C9C RID: 11420
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(IntPtr ISteamUGC, ulong nPublishedFileID, uint unMaxAgeSeconds);

				// Token: 0x06002C9D RID: 11421
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(IntPtr ISteamUGC, uint nConsumerAppId, WorkshopFileType eFileType);

				// Token: 0x06002C9E RID: 11422
				[DllImport("steam_api64.dll")]
				internal static extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(IntPtr ISteamUGC, uint nConsumerAppId, ulong nPublishedFileID);

				// Token: 0x06002C9F RID: 11423
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTitle(IntPtr ISteamUGC, ulong handle, string pchTitle);

				// Token: 0x06002CA0 RID: 11424
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemDescription(IntPtr ISteamUGC, ulong handle, string pchDescription);

				// Token: 0x06002CA1 RID: 11425
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(IntPtr ISteamUGC, ulong handle, string pchLanguage);

				// Token: 0x06002CA2 RID: 11426
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemMetadata(IntPtr ISteamUGC, ulong handle, string pchMetaData);

				// Token: 0x06002CA3 RID: 11427
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemVisibility(IntPtr ISteamUGC, ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

				// Token: 0x06002CA4 RID: 11428
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemTags(IntPtr ISteamUGC, ulong updateHandle, ref SteamParamStringArray_t pTags);

				// Token: 0x06002CA5 RID: 11429
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemContent(IntPtr ISteamUGC, ulong handle, string pszContentFolder);

				// Token: 0x06002CA6 RID: 11430
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_SetItemPreview(IntPtr ISteamUGC, ulong handle, string pszPreviewFile);

				// Token: 0x06002CA7 RID: 11431
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(IntPtr ISteamUGC, ulong handle, string pchKey);

				// Token: 0x06002CA8 RID: 11432
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(IntPtr ISteamUGC, ulong handle, string pchKey, string pchValue);

				// Token: 0x06002CA9 RID: 11433
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(IntPtr ISteamUGC, ulong handle, string pszPreviewFile, ItemPreviewType type);

				// Token: 0x06002CAA RID: 11434
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(IntPtr ISteamUGC, ulong handle, string pszVideoID);

				// Token: 0x06002CAB RID: 11435
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(IntPtr ISteamUGC, ulong handle, uint index, string pszPreviewFile);

				// Token: 0x06002CAC RID: 11436
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(IntPtr ISteamUGC, ulong handle, uint index, string pszVideoID);

				// Token: 0x06002CAD RID: 11437
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_RemoveItemPreview(IntPtr ISteamUGC, ulong handle, uint index);

				// Token: 0x06002CAE RID: 11438
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(IntPtr ISteamUGC, ulong handle, string pchChangeNote);

				// Token: 0x06002CAF RID: 11439
				[DllImport("steam_api64.dll")]
				internal static extern ItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(IntPtr ISteamUGC, ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

				// Token: 0x06002CB0 RID: 11440
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

				// Token: 0x06002CB1 RID: 11441
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002CB2 RID: 11442
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x06002CB3 RID: 11443
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(IntPtr ISteamUGC, uint nAppId, ulong nPublishedFileID);

				// Token: 0x06002CB4 RID: 11444
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002CB5 RID: 11445
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002CB6 RID: 11446
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUGC_GetNumSubscribedItems(IntPtr ISteamUGC);

				// Token: 0x06002CB7 RID: 11447
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUGC_GetSubscribedItems(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint cMaxEntries);

				// Token: 0x06002CB8 RID: 11448
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamUGC_GetItemState(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002CB9 RID: 11449
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

				// Token: 0x06002CBA RID: 11450
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(IntPtr ISteamUGC, ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

				// Token: 0x06002CBB RID: 11451
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_DownloadItem(IntPtr ISteamUGC, ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

				// Token: 0x06002CBC RID: 11452
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(IntPtr ISteamUGC, uint unWorkshopDepotID, string pszFolder);

				// Token: 0x06002CBD RID: 11453
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamUGC_SuspendDownloads(IntPtr ISteamUGC, [MarshalAs(UnmanagedType.U1)] bool bSuspend);

				// Token: 0x06002CBE RID: 11454
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002CBF RID: 11455
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(IntPtr ISteamUGC, IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

				// Token: 0x06002CC0 RID: 11456
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr ISteamUGC);

				// Token: 0x06002CC1 RID: 11457
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x06002CC2 RID: 11458
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(IntPtr ISteamUGC, ulong nParentPublishedFileID, ulong nChildPublishedFileID);

				// Token: 0x06002CC3 RID: 11459
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x06002CC4 RID: 11460
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(IntPtr ISteamUGC, ulong nPublishedFileID, uint nAppID);

				// Token: 0x06002CC5 RID: 11461
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002CC6 RID: 11462
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(IntPtr ISteamUGC, ulong nPublishedFileID);

				// Token: 0x06002CC7 RID: 11463
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamAppList_GetNumInstalledApps(IntPtr ISteamAppList);

				// Token: 0x06002CC8 RID: 11464
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamAppList_GetInstalledApps(IntPtr ISteamAppList, IntPtr pvecAppID, uint unMaxAppIDs);

				// Token: 0x06002CC9 RID: 11465
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamAppList_GetAppName(IntPtr ISteamAppList, uint nAppID, StringBuilder pchName, int cchNameMax);

				// Token: 0x06002CCA RID: 11466
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamAppList_GetAppInstallDir(IntPtr ISteamAppList, uint nAppID, StringBuilder pchDirectory, int cchNameMax);

				// Token: 0x06002CCB RID: 11467
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamAppList_GetAppBuildId(IntPtr ISteamAppList, uint nAppID);

				// Token: 0x06002CCC RID: 11468
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(IntPtr ISteamHTMLSurface);

				// Token: 0x06002CCD RID: 11469
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Init(IntPtr ISteamHTMLSurface);

				// Token: 0x06002CCE RID: 11470
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamHTMLSurface_Shutdown(IntPtr ISteamHTMLSurface);

				// Token: 0x06002CCF RID: 11471
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(IntPtr ISteamHTMLSurface, string pchUserAgent, string pchUserCSS);

				// Token: 0x06002CD0 RID: 11472
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CD1 RID: 11473
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_LoadURL(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchURL, string pchPostData);

				// Token: 0x06002CD2 RID: 11474
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetSize(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint unWidth, uint unHeight);

				// Token: 0x06002CD3 RID: 11475
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopLoad(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CD4 RID: 11476
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_Reload(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CD5 RID: 11477
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoBack(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CD6 RID: 11478
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GoForward(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CD7 RID: 11479
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_AddHeader(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchKey, string pchValue);

				// Token: 0x06002CD8 RID: 11480
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchScript);

				// Token: 0x06002CD9 RID: 11481
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002CDA RID: 11482
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002CDB RID: 11483
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(IntPtr ISteamHTMLSurface, uint unBrowserHandle, HTMLMouseButton eMouseButton);

				// Token: 0x06002CDC RID: 11484
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseMove(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x06002CDD RID: 11485
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_MouseWheel(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int nDelta);

				// Token: 0x06002CDE RID: 11486
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyDown(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002CDF RID: 11487
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyUp(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002CE0 RID: 11488
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_KeyChar(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

				// Token: 0x06002CE1 RID: 11489
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x06002CE2 RID: 11490
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(IntPtr ISteamHTMLSurface, uint unBrowserHandle, uint nAbsolutePixelScroll);

				// Token: 0x06002CE3 RID: 11491
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

				// Token: 0x06002CE4 RID: 11492
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_ViewSource(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CE5 RID: 11493
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CE6 RID: 11494
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CE7 RID: 11495
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_Find(IntPtr ISteamHTMLSurface, uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

				// Token: 0x06002CE8 RID: 11496
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_StopFind(IntPtr ISteamHTMLSurface, uint unBrowserHandle);

				// Token: 0x06002CE9 RID: 11497
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(IntPtr ISteamHTMLSurface, uint unBrowserHandle, int x, int y);

				// Token: 0x06002CEA RID: 11498
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetCookie(IntPtr ISteamHTMLSurface, string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

				// Token: 0x06002CEB RID: 11499
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

				// Token: 0x06002CEC RID: 11500
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

				// Token: 0x06002CED RID: 11501
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(IntPtr ISteamHTMLSurface, uint unBrowserHandle, float flDPIScaling);

				// Token: 0x06002CEE RID: 11502
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

				// Token: 0x06002CEF RID: 11503
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(IntPtr ISteamHTMLSurface, uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

				// Token: 0x06002CF0 RID: 11504
				[DllImport("steam_api64.dll")]
				internal static extern Result SteamAPI_ISteamInventory_GetResultStatus(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002CF1 RID: 11505
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItems(IntPtr ISteamInventory, int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

				// Token: 0x06002CF2 RID: 11506
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetResultItemProperty(IntPtr ISteamInventory, int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x06002CF3 RID: 11507
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamInventory_GetResultTimestamp(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002CF4 RID: 11508
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_CheckResultSteamID(IntPtr ISteamInventory, int resultHandle, ulong steamIDExpected);

				// Token: 0x06002CF5 RID: 11509
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamInventory_DestroyResult(IntPtr ISteamInventory, int resultHandle);

				// Token: 0x06002CF6 RID: 11510
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetAllItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002CF7 RID: 11511
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsByID(IntPtr ISteamInventory, ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

				// Token: 0x06002CF8 RID: 11512
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_SerializeResult(IntPtr ISteamInventory, int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

				// Token: 0x06002CF9 RID: 11513
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_DeserializeResult(IntPtr ISteamInventory, ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

				// Token: 0x06002CFA RID: 11514
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GenerateItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002CFB RID: 11515
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GrantPromoItems(IntPtr ISteamInventory, ref int pResultHandle);

				// Token: 0x06002CFC RID: 11516
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItem(IntPtr ISteamInventory, ref int pResultHandle, int itemDef);

				// Token: 0x06002CFD RID: 11517
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_AddPromoItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

				// Token: 0x06002CFE RID: 11518
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_ConsumeItem(IntPtr ISteamInventory, ref int pResultHandle, ulong itemConsume, uint unQuantity);

				// Token: 0x06002CFF RID: 11519
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_ExchangeItems(IntPtr ISteamInventory, ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

				// Token: 0x06002D00 RID: 11520
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_TransferItemQuantity(IntPtr ISteamInventory, ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

				// Token: 0x06002D01 RID: 11521
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(IntPtr ISteamInventory);

				// Token: 0x06002D02 RID: 11522
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_TriggerItemDrop(IntPtr ISteamInventory, ref int pResultHandle, int dropListDefinition);

				// Token: 0x06002D03 RID: 11523
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_TradeItems(IntPtr ISteamInventory, ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

				// Token: 0x06002D04 RID: 11524
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(IntPtr ISteamInventory);

				// Token: 0x06002D05 RID: 11525
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(IntPtr ISteamInventory, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x06002D06 RID: 11526
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(IntPtr ISteamInventory, int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

				// Token: 0x06002D07 RID: 11527
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr ISteamInventory, ulong steamID);

				// Token: 0x06002D08 RID: 11528
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr ISteamInventory, ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

				// Token: 0x06002D09 RID: 11529
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(IntPtr ISteamInventory, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

				// Token: 0x06002D0A RID: 11530
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(IntPtr ISteamInventory);

				// Token: 0x06002D0B RID: 11531
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamInventory_GetNumItemsWithPrices(IntPtr ISteamInventory);

				// Token: 0x06002D0C RID: 11532
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(IntPtr ISteamInventory, IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

				// Token: 0x06002D0D RID: 11533
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_GetItemPrice(IntPtr ISteamInventory, int iDefinition, out ulong pPrice);

				// Token: 0x06002D0E RID: 11534
				[DllImport("steam_api64.dll")]
				internal static extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(IntPtr ISteamInventory);

				// Token: 0x06002D0F RID: 11535
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_RemoveProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName);

				// Token: 0x06002D10 RID: 11536
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

				// Token: 0x06002D11 RID: 11537
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

				// Token: 0x06002D12 RID: 11538
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, long nValue);

				// Token: 0x06002D13 RID: 11539
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_SetProperty0(IntPtr ISteamInventory, ulong handle, ulong nItemID, string pchPropertyName, float flValue);

				// Token: 0x06002D14 RID: 11540
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(IntPtr ISteamInventory, ulong handle, ref int pResultHandle);

				// Token: 0x06002D15 RID: 11541
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamVideo_GetVideoURL(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x06002D16 RID: 11542
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamVideo_IsBroadcasting(IntPtr ISteamVideo, IntPtr pnNumViewers);

				// Token: 0x06002D17 RID: 11543
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamVideo_GetOPFSettings(IntPtr ISteamVideo, uint unVideoAppID);

				// Token: 0x06002D18 RID: 11544
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(IntPtr ISteamVideo, uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

				// Token: 0x06002D19 RID: 11545
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(IntPtr ISteamParentalSettings);

				// Token: 0x06002D1A RID: 11546
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(IntPtr ISteamParentalSettings);

				// Token: 0x06002D1B RID: 11547
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x06002D1C RID: 11548
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(IntPtr ISteamParentalSettings, uint nAppID);

				// Token: 0x06002D1D RID: 11549
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x06002D1E RID: 11550
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(IntPtr ISteamParentalSettings, ParentalFeature eFeature);

				// Token: 0x06002D1F RID: 11551
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_InitGameServer(IntPtr ISteamGameServer, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

				// Token: 0x06002D20 RID: 11552
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetProduct(IntPtr ISteamGameServer, string pszProduct);

				// Token: 0x06002D21 RID: 11553
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameDescription(IntPtr ISteamGameServer, string pszGameDescription);

				// Token: 0x06002D22 RID: 11554
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetModDir(IntPtr ISteamGameServer, string pszModDir);

				// Token: 0x06002D23 RID: 11555
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetDedicatedServer(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bDedicated);

				// Token: 0x06002D24 RID: 11556
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_LogOn(IntPtr ISteamGameServer, string pszToken);

				// Token: 0x06002D25 RID: 11557
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_LogOnAnonymous(IntPtr ISteamGameServer);

				// Token: 0x06002D26 RID: 11558
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_LogOff(IntPtr ISteamGameServer);

				// Token: 0x06002D27 RID: 11559
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_BLoggedOn(IntPtr ISteamGameServer);

				// Token: 0x06002D28 RID: 11560
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_BSecure(IntPtr ISteamGameServer);

				// Token: 0x06002D29 RID: 11561
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(IntPtr ISteamGameServer);

				// Token: 0x06002D2A RID: 11562
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_WasRestartRequested(IntPtr ISteamGameServer);

				// Token: 0x06002D2B RID: 11563
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(IntPtr ISteamGameServer, int cPlayersMax);

				// Token: 0x06002D2C RID: 11564
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(IntPtr ISteamGameServer, int cBotplayers);

				// Token: 0x06002D2D RID: 11565
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetServerName(IntPtr ISteamGameServer, string pszServerName);

				// Token: 0x06002D2E RID: 11566
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetMapName(IntPtr ISteamGameServer, string pszMapName);

				// Token: 0x06002D2F RID: 11567
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetPasswordProtected(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

				// Token: 0x06002D30 RID: 11568
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorPort(IntPtr ISteamGameServer, ushort unSpectatorPort);

				// Token: 0x06002D31 RID: 11569
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(IntPtr ISteamGameServer, string pszSpectatorServerName);

				// Token: 0x06002D32 RID: 11570
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(IntPtr ISteamGameServer);

				// Token: 0x06002D33 RID: 11571
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetKeyValue(IntPtr ISteamGameServer, string pKey, string pValue);

				// Token: 0x06002D34 RID: 11572
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameTags(IntPtr ISteamGameServer, string pchGameTags);

				// Token: 0x06002D35 RID: 11573
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetGameData(IntPtr ISteamGameServer, string pchGameData);

				// Token: 0x06002D36 RID: 11574
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetRegion(IntPtr ISteamGameServer, string pszRegion);

				// Token: 0x06002D37 RID: 11575
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr ISteamGameServer, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

				// Token: 0x06002D38 RID: 11576
				[DllImport("steam_api64.dll")]
				internal static extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr ISteamGameServer);

				// Token: 0x06002D39 RID: 11577
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SendUserDisconnect(IntPtr ISteamGameServer, ulong steamIDUser);

				// Token: 0x06002D3A RID: 11578
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_BUpdateUserData(IntPtr ISteamGameServer, ulong steamIDUser, string pchPlayerName, uint uScore);

				// Token: 0x06002D3B RID: 11579
				[DllImport("steam_api64.dll")]
				internal static extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(IntPtr ISteamGameServer, IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

				// Token: 0x06002D3C RID: 11580
				[DllImport("steam_api64.dll")]
				internal static extern BeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(IntPtr ISteamGameServer, IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

				// Token: 0x06002D3D RID: 11581
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_EndAuthSession(IntPtr ISteamGameServer, ulong steamID);

				// Token: 0x06002D3E RID: 11582
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_CancelAuthTicket(IntPtr ISteamGameServer, uint hAuthTicket);

				// Token: 0x06002D3F RID: 11583
				[DllImport("steam_api64.dll")]
				internal static extern UserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(IntPtr ISteamGameServer, ulong steamID, uint appID);

				// Token: 0x06002D40 RID: 11584
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(IntPtr ISteamGameServer, ulong steamIDUser, ulong steamIDGroup);

				// Token: 0x06002D41 RID: 11585
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_GetGameplayStats(IntPtr ISteamGameServer);

				// Token: 0x06002D42 RID: 11586
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(IntPtr ISteamGameServer);

				// Token: 0x06002D43 RID: 11587
				[DllImport("steam_api64.dll")]
				internal static extern uint SteamAPI_ISteamGameServer_GetPublicIP(IntPtr ISteamGameServer);

				// Token: 0x06002D44 RID: 11588
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(IntPtr ISteamGameServer, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

				// Token: 0x06002D45 RID: 11589
				[DllImport("steam_api64.dll")]
				internal static extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(IntPtr ISteamGameServer, IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

				// Token: 0x06002D46 RID: 11590
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_EnableHeartbeats(IntPtr ISteamGameServer, [MarshalAs(UnmanagedType.U1)] bool bActive);

				// Token: 0x06002D47 RID: 11591
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(IntPtr ISteamGameServer, int iHeartbeatInterval);

				// Token: 0x06002D48 RID: 11592
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_ISteamGameServer_ForceHeartbeat(IntPtr ISteamGameServer);

				// Token: 0x06002D49 RID: 11593
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(IntPtr ISteamGameServer, ulong steamIDClan);

				// Token: 0x06002D4A RID: 11594
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr ISteamGameServer, ulong steamIDNewPlayer);

				// Token: 0x06002D4B RID: 11595
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002D4C RID: 11596
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out int pData);

				// Token: 0x06002D4D RID: 11597
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, out float pData);

				// Token: 0x06002D4E RID: 11598
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

				// Token: 0x06002D4F RID: 11599
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, int nData);

				// Token: 0x06002D50 RID: 11600
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float fData);

				// Token: 0x06002D51 RID: 11601
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

				// Token: 0x06002D52 RID: 11602
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x06002D53 RID: 11603
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(IntPtr ISteamGameServerStats, ulong steamIDUser, string pchName);

				// Token: 0x06002D54 RID: 11604
				[DllImport("steam_api64.dll")]
				internal static extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(IntPtr ISteamGameServerStats, ulong steamIDUser);

				// Token: 0x06002D55 RID: 11605
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_Init();

				// Token: 0x06002D56 RID: 11606
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_RunCallbacks();

				// Token: 0x06002D57 RID: 11607
				[DllImport("steam_api64.dll")]
				internal static extern void SteamGameServer_RunCallbacks();

				// Token: 0x06002D58 RID: 11608
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

				// Token: 0x06002D59 RID: 11609
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

				// Token: 0x06002D5A RID: 11610
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002D5B RID: 11611
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

				// Token: 0x06002D5C RID: 11612
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

				// Token: 0x06002D5D RID: 11613
				[DllImport("steam_api64.dll")]
				internal static extern void SteamAPI_Shutdown();

				// Token: 0x06002D5E RID: 11614
				[DllImport("steam_api64.dll")]
				internal static extern void SteamGameServer_Shutdown();

				// Token: 0x06002D5F RID: 11615
				[DllImport("steam_api64.dll")]
				internal static extern HSteamUser SteamAPI_GetHSteamUser();

				// Token: 0x06002D60 RID: 11616
				[DllImport("steam_api64.dll")]
				internal static extern HSteamPipe SteamAPI_GetHSteamPipe();

				// Token: 0x06002D61 RID: 11617
				[DllImport("steam_api64.dll")]
				internal static extern HSteamUser SteamGameServer_GetHSteamUser();

				// Token: 0x06002D62 RID: 11618
				[DllImport("steam_api64.dll")]
				internal static extern HSteamPipe SteamGameServer_GetHSteamPipe();

				// Token: 0x06002D63 RID: 11619
				[DllImport("steam_api64.dll")]
				internal static extern IntPtr SteamInternal_CreateInterface(string version);

				// Token: 0x06002D64 RID: 11620
				[DllImport("steam_api64.dll")]
				internal static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
			}
		}
	}
}
